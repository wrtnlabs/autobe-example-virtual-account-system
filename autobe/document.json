{
  "operations": [
    {
      "specification": "List customers with advanced filtering, pagination, and search. This operation retrieves a paginated list of customers registered in the virtual account platform. Supports filtering by name, phone, email, registration date, and status. Implements the requirements for admin and dashboard features for customer management, and complies with audit, role, and security policies. Associated directly with the 'virtual_account_customers' table.",
      "description": "This endpoint is designed to fetch a paginated and searchable list of customers who are registered in the virtual account system. It references the 'virtual_account_customers' table, which stores key customer information such as name, phone, email, and registration timestamp, as detailed in the Prisma schema.\n\nThe endpoint supports advanced filtering by customer name, phone number, email, registration period, and deletion state. Pagination and sorting options are provided to enhance admin dashboard usability and facilitate Excel export features, fulfilling dashboard and reporting use-cases.\n\nAccess to this endpoint is typically restricted to administrator users or higher, as enforced by RBAC and API authentication mechanisms (OAuth2/HMAC). All queries are logged for audit trail, and returned data never includes deleted records unless specifically requested by filter.\n\nValidation rules include: string filter fields must be valid, dates in ISO, and filters do not expose physical deletion timestamps. Error handling is robust, responding with well-formed error objects for permission or validation failures.\n\nRelated API operations include: GET /virtualAccount/customers/{id} for detail, POST /virtualAccount/customers for creation, and PUT/DELETE for update/removal.\n\nReturned data is always anonymized where required for compliance, and response includes a total count for UI pagination controls. This endpoint underpins the main customer search view in the admin console.",
      "summary": "List virtual account customers with filtering and pagination (virtual_account_customers table).",
      "parameters": [],
      "requestBody": {
        "description": "Query parameters for filtering, searching, and pagination when listing virtual account customers.",
        "typeName": "IVirtualAccountCustomer.IRequest"
      },
      "responseBody": {
        "description": "Paginated result set of customer summary information, including pagination metadata and filtered customer list.",
        "typeName": "IPageIVirtualAccountCustomer"
      },
      "path": "/virtualAccount/customers",
      "method": "patch"
    },
    {
      "specification": "Get detailed information for a specific virtual account customer by ID. This operation fetches the full record of a customer using their unique identifier. Core use for customer profile display and admin audit tracking. Associated with 'virtual_account_customers'.",
      "description": "Retrieves complete details for a single customer from the 'virtual_account_customers' table, including their name, contact info, registration date, and any soft deletion state.\n\nThis endpoint requires the customer ID as a path parameter. Access is generally limited to authenticated administrators with appropriate permissions (see RBAC policy). Audit logs are generated for every access to customer detail.\n\nIf the specified customer does not exist, or access is not authorized, a clear error code and message are returned.\n\nThis endpoint is typically used in conjunction with the customer search/list endpoint, and is displayed as the details pane or page on the admin dashboard.\n\nNo sensitive information, such as passwords, is included in the response. Sensitive fields are masked per compliance needs. All responses are structured according to the 'IVirtualAccountCustomer' API schema.",
      "summary": "Fetch detailed information for a specific virtual account customer (virtual_account_customers table).",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the virtual account customer to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Full detail of the selected customer, including registration information and active status.",
        "typeName": "IVirtualAccountCustomer"
      },
      "path": "/virtualAccount/customers/{id}",
      "method": "get"
    },
    {
      "specification": "Create a new customer in the virtual account system. This endpoint allows the creation of a customer for KYC and deposit purposes. Used by admin or public registration workflows. Linked to 'virtual_account_customers'.",
      "description": "Registers a new customer in the system, generating a secure, unique customer record in accordance with the 'virtual_account_customers' schema. Required fields include name, phone, email (all unique and validated), and optional registration data respecting normalization and compliance rules.\n\nThis endpoint is invoked when new users join the service or are onboarded by an admin. Automatic audit logs are created for the registration, and all input is validated according to KYC and contact uniqueness rules.\n\nSecurity policies enforce that only administrators or public system workflows can invoke this API. Duplicate phone/email are rejected with specific error codes.\n\nBusiness rules dictate that registration date is captured server-side. Related endpoints are GET for listing and PUT/DELETE for modification or removal.\n\nOn success, the returned customer data reflects the normalized, canonical schema representation.",
      "summary": "Register a new virtual account customer (virtual_account_customers table).",
      "parameters": [],
      "requestBody": {
        "description": "Customer details for registration—name, phone, email required.",
        "typeName": "IVirtualAccountCustomer.ICreate"
      },
      "responseBody": {
        "description": "Newly created customer record as per system canonical schema.",
        "typeName": "IVirtualAccountCustomer"
      },
      "path": "/virtualAccount/customers",
      "method": "post"
    },
    {
      "specification": "Update customer profile information for a specified customer ID. This endpoint enables authorized admins to modify personal data fields for a customer. Linked to 'virtual_account_customers'.",
      "description": "Enables authorized administrators to update the profile of a customer based on their unique ID. Modifiable fields include name, phone number, and email, subject to uniqueness validation. Certain fields such as registration date and ID are immutable.\n\nAll modifications trigger audit log entries and are regulated by RBAC permissions and API authentication. Validation errors (duplicate email/phone, invalid formats) are returned with descriptive error codes.\n\nThis endpoint is cross-referenced by the list/detail endpoints for customers. Upon success, returns the updated customer object according to the canonical schema.\n\nSoft deletion (setting deleted_at) is not handled by this endpoint; use DELETE instead. This operation is intended for admin use only.",
      "summary": "Update a specific virtual account customer's profile (virtual_account_customers table).",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier for the customer to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Profile fields to update (name, phone, email); registration date and ID not modifiable.",
        "typeName": "IVirtualAccountCustomer.IUpdate"
      },
      "responseBody": {
        "description": "Updated customer record after modification.",
        "typeName": "IVirtualAccountCustomer"
      },
      "path": "/virtualAccount/customers/{id}",
      "method": "put"
    },
    {
      "specification": "Soft-delete (deactivate) a customer by ID. This operation marks a customer as deleted in the virtual account system. The customer record remains for audit compliance, as required by KYC and retention policy. Linked to 'virtual_account_customers'.",
      "description": "This endpoint marks a customer record as deleted (sets deleted_at). It does not physically remove the record, in compliance with audit, KYC, and retention requirements. Only administrators with the appropriate privilege may use this API.\n\nThe customer to be deleted is identified by the unique ID path parameter. Deletion attempts are validated for existence, current state (e.g., not already deleted), and authorization.\n\nAll deletion actions are logged for audit/forensics. Related activity may include cascading notifications or disabling attached virtual accounts per policy.\n\nThis endpoint is intended exclusively for backend/admin use. Related endpoints: GET for recovery/view, PATCH for filtering, PUT for profile update.\n\nOn success, returns a confirmation or the updated customer record, with deleted_at populated.",
      "summary": "Soft-delete (deactivate) a virtual account customer by ID (virtual_account_customers table).",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier of the customer to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Confirmation or updated customer record including deleted_at timestamp.",
        "typeName": "IVirtualAccountCustomer"
      },
      "path": "/virtualAccount/customers/{id}",
      "method": "delete"
    },
    {
      "specification": "List all admin users with advanced filtering and pagination. This endpoint enables searching admin records by username, email, and creation date for roles/permission management. Linked to 'virtual_account_admins'.",
      "description": "Provides paginated, filterable access to all platform admin users, leveraging the 'virtual_account_admins' table. Filtering supports username, email, creation date range, and login/lock status. Sorting and pagination metadata included, supporting the admin dashboard and privilege management UI.\n\nOnly super-admin or users with appropriate permissions may access this endpoint. Query criteria validated for type and range correctness. All accesses are logged per security/audit policy.\n\nRelated endpoints: GET for detail, POST for creation, PUT/DELETE for maintenance. This underpins the main user/role management view on the platform.",
      "summary": "List admin users with filtering, search, and pagination (virtual_account_admins table).",
      "parameters": [],
      "requestBody": {
        "description": "Admin user list request—supports filtering, sort, pagination.",
        "typeName": "IVirtualAccountAdmin.IRequest"
      },
      "responseBody": {
        "description": "Paginated admin user summary with count and metadata.",
        "typeName": "IPageIVirtualAccountAdmin"
      },
      "path": "/virtualAccount/admins",
      "method": "patch"
    },
    {
      "specification": "Fetch detailed information for a specific admin user. This operation returns all stored fields except password hash. Used for profile display, audit review, and privilege management. Linked to 'virtual_account_admins'.",
      "description": "Retrieves the full (non-sensitive) profile for an admin user by their ID. Access to this endpoint is restricted by RBAC and API authentication policies, and all requests are audit-logged.\n\nResponse fields include username, email, all timestamps, and status indicators (lockout, last login). The password hash is never exposed.\n\nIf the admin does not exist or access is unauthorized, a proper error code is returned. Associated use-cases: admin profile view, role changes, activity history UI.\n\nRelated APIs: PATCH for list/search, POST for creation, PUT/DELETE for maintenance.",
      "summary": "Get detailed information for a specific admin user (virtual_account_admins table).",
      "parameters": [
        {
          "name": "id",
          "description": "Admin user ID to look up.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Detailed admin user record for management and audit.",
        "typeName": "IVirtualAccountAdmin"
      },
      "path": "/virtualAccount/admins/{id}",
      "method": "get"
    },
    {
      "specification": "Create a new admin user record. Used by super-admins for onboarding new administrators, setting up roles and privileges. Linked to 'virtual_account_admins'.",
      "description": "Creates a new admin user account in the platform. Required fields: username (unique), email (unique), password hash (never plain text), with optional initial role assignment. Validates uniqueness and securely stores credentials.\n\nThis operation is only available to super-admins or users with the appropriate privilege. Triggers audit logs and notification flows (e.g., for 2FA setup). Errors include duplicate username/email, weak password (if enforceable), or policy violation.\n\nRelated endpoints: PATCH for listing, GET for detail, PUT/DELETE for updates.",
      "summary": "Register a new admin user account (virtual_account_admins table).",
      "parameters": [],
      "requestBody": {
        "description": "Admin user details for onboarding—username, email, password, optional roles.",
        "typeName": "IVirtualAccountAdmin.ICreate"
      },
      "responseBody": {
        "description": "Full record of created admin user.",
        "typeName": "IVirtualAccountAdmin"
      },
      "path": "/virtualAccount/admins",
      "method": "post"
    },
    {
      "specification": "Update profile or status of an admin user by ID. This allows role or contact detail change by super-admins. Linked to 'virtual_account_admins'.",
      "description": "Allows updates to an existing admin user's profile fields (username, email) or status fields (lockout, last_login_at) by super-admins or authorized admins. All changes are tracked in audit logs and RBAC is enforced. Password update may be available in a separate endpoint due to extra policy.\n\nAttempts to set duplicate usernames/emails are blocked. This endpoint is referenced in workflows for admin privilege changes, contact updates, or lockout/reactivation. On success, updated admin record is returned.\n\nSensitive operations such as password reset may require additional authentication.",
      "summary": "Update admin user profile or status information (virtual_account_admins table).",
      "parameters": [
        {
          "name": "id",
          "description": "Admin user ID to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields for update: email, username, status fields; password change not allowed here.",
        "typeName": "IVirtualAccountAdmin.IUpdate"
      },
      "responseBody": {
        "description": "Updated admin user record, reflecting changes.",
        "typeName": "IVirtualAccountAdmin"
      },
      "path": "/virtualAccount/admins/{id}",
      "method": "put"
    },
    {
      "specification": "Delete (deactivate) an admin user by ID. This operation disables the admin's ability to log in, in alignment with security and compliance requirements. Linked to 'virtual_account_admins'.",
      "description": "Disables or soft-deletes an admin user record, marking them inactive and preventing access to the platform. The user's record remains in the database for audit compliance. Only super-admin-level access may invoke this API. All operations are logged.\n\nRequest errors returned if the admin does not exist or RBAC forbids action. Related dashboard interfaces: admin user management, audit logging, compliance review.",
      "summary": "Deactivate (soft-delete) an admin user (virtual_account_admins table).",
      "parameters": [
        {
          "name": "id",
          "description": "Admin user ID to deactivate.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Deactivated admin record with updated state indicators (e.g., locked_until).",
        "typeName": "IVirtualAccountAdmin"
      },
      "path": "/virtualAccount/admins/{id}",
      "method": "delete"
    },
    {
      "specification": "List all super administrators with pagination and search. Used for system security audits, and initial admin onboarding. Linked to 'virtual_account_super_admins'.",
      "description": "Returns a paginated and searchable list of super admin accounts, referencing the 'virtual_account_super_admins' table. Filters may include username and created_at date range. Used for compliance dashboards and account management by highest-privilege users. Access is strictly limited by security policies. The result supports pagination for large installations.\n\nNo sensitive credential data is included in the response. All accesses are logged and minimally required for day-to-day operation.",
      "summary": "List all super admin accounts with search and pagination (virtual_account_super_admins table).",
      "parameters": [],
      "requestBody": {
        "description": "Search and pagination criteria for super admin list.",
        "typeName": "IVirtualAccountSuperAdmin.IRequest"
      },
      "responseBody": {
        "description": "Paginated list of super admins with key data.",
        "typeName": "IPageIVirtualAccountSuperAdmin"
      },
      "path": "/virtualAccount/superAdmins",
      "method": "patch"
    },
    {
      "specification": "Fetch detail for a specific super admin by ID for compliance or onboarding review. Linked to 'virtual_account_super_admins'.",
      "description": "Returns the full, non-sensitive detail for a specific super admin account. Used in role management and security audit flows. Always RBAC/privilege checked, and all reads are audit-logged.\n\nError handling returns a clear, non-sensitive message for unauthorized or non-existent super admin IDs. Associated with super admin management workflows for critical access users only.",
      "summary": "Fetch a specific super administrator's details (virtual_account_super_admins table).",
      "parameters": [
        {
          "name": "id",
          "description": "Super admin ID to look up.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Full super admin account detail without credential material.",
        "typeName": "IVirtualAccountSuperAdmin"
      },
      "path": "/virtualAccount/superAdmins/{id}",
      "method": "get"
    },
    {
      "specification": "This operation creates a new super administrator account for the virtual account system. It directly corresponds to the 'virtual_account_super_admins' table in the Prisma schema, which is designed for highest-level administrators with system-wide privileges such as managing admin roles, audit policies, and general platform settings. Input must include required credentials (username, password), and security is strictly enforced, with only authorized existing super admins allowed to execute this endpoint. After creation, the super admin has full access as described in requirements and schema comments.",
      "description": "Creates a new super administrator record in the virtual account platform. This operation is only accessible to existing super admins due to the critical privileges conferred. The API expects a JSON object with fields matching the 'virtual_account_super_admins' schema: a unique username and a securely hashed password. Upon successful creation, audit logs are made for policy compliance and traceability. The endpoint returns the created super admin object, excluding sensitive information such as the raw password. If a duplicate username is provided, an error is raised. This operation underpins platform-level setup and on-boarding process for top-level governance.",
      "summary": "Create a new super admin account (virtual_account_super_admins table).",
      "parameters": [],
      "requestBody": {
        "description": "Fields required to create a new super admin (username, password).",
        "typeName": "IVirtualAccountSuperAdmin.ICreate"
      },
      "responseBody": {
        "description": "Super admin account details (without sensitive info).",
        "typeName": "IVirtualAccountSuperAdmin"
      },
      "path": "/virtualAccount/superAdmins",
      "method": "post"
    },
    {
      "specification": "Updates the details of a specific super admin account in the virtual_account_super_admins table. This allows current super admins to change username or password of another super admin account. Security checks and audit logging must be enforced.",
      "description": "Updates the properties of a designated super admin, identified by their unique ID. Only authenticated and authorized super admins can perform this action for critical role and audit reasons. The API body mirrors updatable fields from the Prisma schema (currently username and password_hash). The operation logs all changes for traceability and returns the updated super admin, omitting confidential details. Attempts to update non-existent or unauthorized resources produce an error. This enables controlled account updates as outlined in security requirements.",
      "summary": "Update a super admin account (virtual_account_super_admins table).",
      "parameters": [
        {
          "name": "id",
          "description": "Target super admin's ID",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields to update for super admin (username, password)",
        "typeName": "IVirtualAccountSuperAdmin.IUpdate"
      },
      "responseBody": {
        "description": "Updated super admin account details.",
        "typeName": "IVirtualAccountSuperAdmin"
      },
      "path": "/virtualAccount/superAdmins/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes a specific super admin account from the virtual_account_super_admins table. Only existing super admins can perform this operation, and strict audit procedures apply to ensure compliance and traceability. Used in off-boarding and emergency access revocations.",
      "description": "Permanently removes a super admin by ID. Security policy requires dual authentication and logging of all such actions, as deleting top-level administrators impacts platform governance and policy. The account is deleted only if the ID exists and policy checks pass; otherwise, returns error per API spec. This operation is crucial for managing root-level system access.",
      "summary": "Delete a super admin account (virtual_account_super_admins table).",
      "parameters": [
        {
          "name": "id",
          "description": "Target super admin's ID",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Operation success confirmation.",
        "typeName": "IOperationResult"
      },
      "path": "/virtualAccount/superAdmins/{id}",
      "method": "delete"
    },
    {
      "specification": "Retrieves a paginated list of role definitions from the virtual_account_roles table, supporting filtering and sorting. This operation is used for managing RBAC role types, as required by both requirements and Prisma schema. Designed for admin dashboard usage.",
      "description": "Fetches a paginated, searchable list of all defined roles for admin RBAC configuration. Parameters in the request body allow search by role name, filtering, and pagination/sorting. Data returned is a summary, including role name, description, and ID. This enables admin console UI to display, search, and configure access roles. Security checks ensure only authorized admin users can query role lists.",
      "summary": "List/search all roles (virtual_account_roles table).",
      "parameters": [],
      "requestBody": {
        "description": "Filters and pagination for listing/searching roles",
        "typeName": "IVirtualAccountRole.IRequest"
      },
      "responseBody": {
        "description": "Paginated role list with summaries.",
        "typeName": "IPageIVirtualAccountRole"
      },
      "path": "/virtualAccount/roles",
      "method": "patch"
    },
    {
      "specification": "Retrieves the details of a specific RBAC role from the virtual_account_roles table based on its ID. Used for showing, editing, or managing a role assignment.",
      "description": "Returns the properties and relationships of an individual role for admin configuration UI, given the role ID. Only authorized admin users may access this endpoint. Returned data includes ID, name, description, and associated permissions or related objects if present. Used for detailed view and edit preparation in access management.",
      "summary": "Get a specific role's details (virtual_account_roles table).",
      "parameters": [
        {
          "name": "id",
          "description": "Target role's ID",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Role detailed object including permissions.",
        "typeName": "IVirtualAccountRole"
      },
      "path": "/virtualAccount/roles/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new role entry in the virtual_account_roles table. Used for adding new RBAC role types as necessary for new policies or systems expansion.",
      "description": "Adds a new RBAC role, requiring unique name and a description. The request body must provide all required fields as defined in the Prisma schema. After creation, the new role is available for assignment to admins. Security policy restricts this operation to authorized users, and audit logs are kept for compliance. Duplicate role names return a conflict error.",
      "summary": "Create a new role (virtual_account_roles table).",
      "parameters": [],
      "requestBody": {
        "description": "Fields for creating a new role.",
        "typeName": "IVirtualAccountRole.ICreate"
      },
      "responseBody": {
        "description": "Created role object.",
        "typeName": "IVirtualAccountRole"
      },
      "path": "/virtualAccount/roles",
      "method": "post"
    },
    {
      "specification": "Updates a specific RBAC role's properties in virtual_account_roles. Only fields that are updatable according to the schema (e.g., name, description) may be included. Used for admin-side changes to roles.",
      "description": "Updates the name or description of a specified role. Security policies restrict this endpoint to admin users with proper authority. The request body should reflect mutable schema fields. Audit trails are required and attempts to update an invalid or non-existent ID are handled with appropriate errors. Used in role management UIs.",
      "summary": "Update a role (virtual_account_roles table).",
      "parameters": [
        {
          "name": "id",
          "description": "Target role's ID",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Role fields to update (name, description)",
        "typeName": "IVirtualAccountRole.IUpdate"
      },
      "responseBody": {
        "description": "Updated role object.",
        "typeName": "IVirtualAccountRole"
      },
      "path": "/virtualAccount/roles/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes a specific role from the virtual_account_roles table. This operation enforces RBAC and compliance policies, restricting access to privileged admin users only. Used to remove obsolete or unwanted custom roles.",
      "description": "Removes a role entity by its unique ID. Security/policy checks ensure that a role is not currently assigned in use or required by system policies before deletion. All deletions are logged for audit. Returns a confirmation object on successful deletion, or an error for any constraint violation. Used for RBAC configuration cleanup.",
      "summary": "Delete a role (virtual_account_roles table).",
      "parameters": [
        {
          "name": "id",
          "description": "Target role's ID",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Confirmation of successful role deletion.",
        "typeName": "IOperationResult"
      },
      "path": "/virtualAccount/roles/{id}",
      "method": "delete"
    },
    {
      "specification": "Fetches a paginated list of permissions from the virtual_account_permissions table, supporting filters and full text search. Used for populating RBAC admin UIs or system permission management tools.",
      "description": "Returns a list of defined permissions for RBAC mapping, optionally filtered/searched via the request body parameters (such as code, description/subtext, pagination, and sorting). Used for permission assignment, UI dropdowns, and permission audit trails. Router enforces admin-only access. Implements full audit and searchability as required for practical RBAC administration.",
      "summary": "List/search all permissions (virtual_account_permissions table).",
      "parameters": [],
      "requestBody": {
        "description": "Filters and pagination for permission list.",
        "typeName": "IVirtualAccountPermission.IRequest"
      },
      "responseBody": {
        "description": "Paginated permission summary list.",
        "typeName": "IPageIVirtualAccountPermission"
      },
      "path": "/virtualAccount/permissions",
      "method": "patch"
    },
    {
      "specification": "Retrieves a specific permission's details from the virtual_account_permissions table by ID. Utilized in showing/editing permissions and mapping to roles.",
      "description": "Outputs the full details of a single permission entity as defined in the Prisma schema, using the permission ID path parameter. Includes code, description, and linkage metadata. Secured for admin use; used in permission config/edit screens.",
      "summary": "Get a specific permission's details (virtual_account_permissions table).",
      "parameters": [
        {
          "name": "id",
          "description": "Target permission's ID",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Permission detailed info object.",
        "typeName": "IVirtualAccountPermission"
      },
      "path": "/virtualAccount/permissions/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new permission entry in the virtual_account_permissions table for use in RBAC assignments (see requirements and schema). Used by privileged admins to extend RBAC capabilities.",
      "description": "Adds a new permission, given a unique code and human-readable description. Only privileged admin users may invoke this operation. All creation actions are strictly logged. Used for onboarding new features or finer-grained access control scenarios. Attempts to duplicate an existing code or violate schema constraints result in a conflict error; otherwise, returns the created permission object.",
      "summary": "Create a new permission (virtual_account_permissions table).",
      "parameters": [],
      "requestBody": {
        "description": "Permission creation fields (code, description).",
        "typeName": "IVirtualAccountPermission.ICreate"
      },
      "responseBody": {
        "description": "Created permission object.",
        "typeName": "IVirtualAccountPermission"
      },
      "path": "/virtualAccount/permissions",
      "method": "post"
    },
    {
      "specification": "Updates an individual permission record by its ID in the virtual_account_permissions table. Typically restricted to schema-allowed mutable fields and strictly monitored for audit reporting on privilege escalation. Used for permission text revision or code change as needed.",
      "description": "Updates a permission field such as code or description, by permission ID, reflecting the mutable fields defined in the schema. All changes are strictly logged with before/after values for RBAC compliance and rollback. If a provided ID is not found or other constraints are violated, appropriate errors are returned. Enables dynamic RBAC evolution as described in requirements.",
      "summary": "Update a permission (virtual_account_permissions table).",
      "parameters": [
        {
          "name": "id",
          "description": "Target permission's ID",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Permission fields to update (code, description)",
        "typeName": "IVirtualAccountPermission.IUpdate"
      },
      "responseBody": {
        "description": "Updated permission object.",
        "typeName": "IVirtualAccountPermission"
      },
      "path": "/virtualAccount/permissions/{id}",
      "method": "put"
    },
    {
      "specification": "Implements logical DELETE for a specific permission entry in the virtual_account_permissions table by its unique id. This operation enforces proper permission management and maintains security best practices, such as least privilege and audit trail requirements, as stated in the Prisma schema's description. Related requirements from the requirements analysis concern permission management, RBAC policy changes, and the ability for admin/superadmin to retire or remove explicit permissions from use. Only authorized admin or superadmin roles may invoke this deletion, and all delete actions are audit-logged. Fails if permission is currently linked to roles (due to foreign key).",
      "description": "This operation deletes a permission entry from the virtual_account_permissions table by a unique ID path parameter. \n\nThe permission defines an individual allowable action or capability in the RBAC system, as required for admin dashboard and security compliance. Deletion is only allowed if the permission is not referenced by any active role-permission mapping in the role_permission link table, enforcing referential integrity as described in the Prisma schema. Attempts to delete a permission in use will result in a referential integrity error response.\n\nThis endpoint is restricted to privileged users (admin and super admin) due to the security implications of permission deletion. All attempts to delete must be logged in the system's audit log, including the acting admin, target permission, and the action result.\n\nRelated endpoints are: PATCH /virtualAccount/permissions for listing and searching permissions, and POST /virtualAccount/permissions for creating new permission codes.\n\nValidation includes path parameter existence check and reference check for role-permission usage. Any error related to constraint violation or permission handling must return structured error messages.",
      "summary": "Deletes a permission entry from the virtual_account_permissions table by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier for the permission to delete",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": null,
      "path": "/virtualAccount/permissions/{id}",
      "method": "delete"
    },
    {
      "specification": "Implements list/retrieve operation for the virtual_account_role_permissions entity, supporting search, pagination, and filtering. This follows REST PATCH convention for complex search/request bodies. Refer to the Prisma schema doc: virtual_account_role_permissions implements the normalized role-permission mapping in the RBAC model. This operation supports the administrator use cases for viewing all current role-permission mappings and filtering by role, permission, and assignment metadata.",
      "description": "This operation retrieves a paginated list of role-permission assignments from the virtual_account_role_permissions table. The request body may contain complex search, paging, and filter criteria, such as role, permission, assignment date, etc. \n\nThe role-permission model implements the M:N mapping between roles and permissions for RBAC enforcement, ensuring normalized security controls at the logical DB layer. The description references the Prisma schema comment for virtual_account_role_permissions: one row per role-permission assignment, with uniqueness enforced at the DB level.\n\nSecurity: This endpoint is intended for admin or super admin use, enforced by RBAC middleware. The results are never cached and may include sensitive security configuration info, so access is tightly controlled.\n\nValidation and errors: Invalid search requests return 422. Users without RBAC VIEW/EDIT privileges will get 403. Response includes a paginated list of summary role-permission assignments.",
      "summary": "Retrieves a paginated list of role-permission assignments for virtual_account_role_permissions.",
      "parameters": [],
      "requestBody": {
        "description": "Optional search, filter, and paging criteria for role-permission assignments",
        "typeName": "IVirtualAccountRolePermission.IRequest"
      },
      "responseBody": {
        "description": "Paginated list of role-permission assignments.",
        "typeName": "IPageIVirtualAccountRolePermission"
      },
      "path": "/virtualAccount/rolePermissions",
      "method": "patch"
    },
    {
      "specification": "Implements detail GET for a single role-permission mapping from the virtual_account_role_permissions table. Used for drill-down into individual assignment for debugging, auditing, or editing. As per the Prisma schema, role-permission links are unique and used for normalized enforcement of RBAC at the DB and API layer. Only accessible by admin or super admin roles via RBAC enforcement.",
      "description": "This operation fetches complete details of a specific role-permission assignment by its unique ID from the virtual_account_role_permissions table, as referenced in the Prisma schema doc. Role-permission assignments form the M:N join between roles and permissions in the RBAC model, crucial for fine-grained security.  \n\nThe GET returns all assignment metadata: role, permission, assigned timestamps, and any linkage-specific data. The operation enforces access control policies (only admins/superadmins) and is audit-logged. It must validate the ID and return 404 if not found, or 403 if unauthorized. This endpoint is related to PATCH /virtualAccount/rolePermissions (list), POST (create), PUT (update), and DELETE (remove).\n\nValidation: Must check the existence of the ID and relationship constraints. Errors are returned as structured messages.",
      "summary": "Retrieves details of a single role-permission assignment by ID from virtual_account_role_permissions.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier of the role-permission assignment to fetch",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Complete detail of the specified role-permission assignment.",
        "typeName": "IVirtualAccountRolePermission"
      },
      "path": "/virtualAccount/rolePermissions/{id}",
      "method": "get"
    },
    {
      "specification": "Implements creation of a new role-permission mapping in the virtual_account_role_permissions table as per the Prisma schema, for the RBAC system. RBAC assignment is managed by super/admin roles. Operation creates single mapping, enforcing uniqueness and referential integrity per schema. Admin-only operation with full audit logging.",
      "description": "This endpoint creates and inserts a new role-permission assignment into the virtual_account_role_permissions table as per the Prisma schema documentation. This mapping enables the specified role to get the corresponding permission, supporting fine-grained security management.\n\nPayload includes role_id and permission_id, which must reference valid existing roles and permissions. Creation fails if the mapping already exists (enforced at DB via unique constraint), or if either role/permission does not exist. All creation attempts, successful or failed, are audit-logged for compliance with RBAC management requirements. \n\nValidation: request is rejected with 422 if IDs are missing/invalid. DB errors (constraint violations) are reported with structured error responses. Only admins/superadmins may execute this operation.\n\nRelated endpoints: PATCH (list/search), PUT (edit), DELETE (remove) role-permission assignments.",
      "summary": "Creates a new role-permission assignment entry in virtual_account_role_permissions.",
      "parameters": [],
      "requestBody": {
        "description": "Information required to create a role-permission mapping.",
        "typeName": "IVirtualAccountRolePermission.ICreate"
      },
      "responseBody": {
        "description": "The newly created role-permission assignment entry.",
        "typeName": "IVirtualAccountRolePermission"
      },
      "path": "/virtualAccount/rolePermissions",
      "method": "post"
    },
    {
      "specification": "Implements update of an existing role-permission mapping in the virtual_account_role_permissions table, supporting admin-driven RBAC management requirements. As per the Prisma schema, mappings are unique, and updates are constrained to allowed fields only (role/permission IDs cannot be made invalid or create duplicates). All updates are subject to full audit logging and RBAC enforcement.",
      "description": "This endpoint updates an existing role-permission mapping by ID in the virtual_account_role_permissions table. Only certain fields may be updatable, depending on business logic (for example: audit notes, custom metadata, but not role_id/permission_id if uniqueness constraints would be violated). \n\nThe operation first validates the ID and fetches the current row, then applies requested changes from the request body. If the row does not exist, 404 is returned; if RBAC prevents the change, 403.\n\nAll update actions and their results are audit-logged. This endpoint requires admin or superadmin privileges per RBAC enforced at the API level. Related endpoints include PATCH (list), GET (detail), POST (create), and DELETE (remove) role-permission assignments.",
      "summary": "Updates an existing role-permission mapping in virtual_account_role_permissions by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Role-permission mapping unique identifier to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields to update for the role-permission mapping.",
        "typeName": "IVirtualAccountRolePermission.IUpdate"
      },
      "responseBody": {
        "description": "The updated role-permission assignment entry.",
        "typeName": "IVirtualAccountRolePermission"
      },
      "path": "/virtualAccount/rolePermissions/{id}",
      "method": "put"
    },
    {
      "specification": "Implements logical deletion of a role-permission mapping in the virtual_account_role_permissions table by its unique ID, supporting RBAC assignment removal requirements. As described in the Prisma schema, unique assignment ensures security control; removal is fully audit-logged and only allowed by admin/superadmin roles. Operation is subject to referential integrity constraints.",
      "description": "This endpoint deletes an individual role-permission mapping from virtual_account_role_permissions using the unique ID. The operation fulfills requirements for RBAC assignment removal, supporting security and compliance. \n\nThe operation is only permitted for authorized admin/superadmin users; all delete attempts are audit-logged with actor, target, and outcome per security and audit requirements. Deletion is subject to referential integrity checks (e.g., cannot delete if mapping is required elsewhere, such as for mandatory default role-permissions).  \n\nReturns 204 on success, 404 if mapping not found, or an error message on denial for RBAC/constraints. Related operations: PATCH/GET/POST/PUT role-permission endpoints.",
      "summary": "Deletes a role-permission assignment entry in virtual_account_role_permissions by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Role-permission mapping unique identifier to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": null,
      "path": "/virtualAccount/rolePermissions/{id}",
      "method": "delete"
    },
    {
      "specification": "Implements PATCH list/search operation for supported bank entities from the virtual_account_banks table according to requirements for account issuance configuration, filtering, and dashboard visibility, as documented in the Prisma schema. This endpoint supports paging, filtering by bank name/code, and sort, allowing admins to manage available bank options for virtual account issuance efficiently.",
      "description": "This operation retrieves a paginated list of banks available for virtual account issuance, supporting filtering and paging via PATCH request body consistent with REST API best practices. The entity (virtual_account_banks table) manages the master registry of banks, as explained in the Prisma schema. \n\nThe request body can specify search criteria such as name, code, and sort order. The logic supports administrator dashboard use cases for managing, reviewing, and filtering available banks. Only admin or superadmin users may access this endpoint. All access and filter actions are audit-logged for compliance.\n\nRelated endpoints are POST (add new bank), GET (detail), PUT (update), and DELETE (remove) for the same entity. Business logic: banks in use by active virtual accounts may not be deleted (referential integrity enforced).",
      "summary": "Returns a paginated/filterable list of available banks for virtual account issuance.",
      "parameters": [],
      "requestBody": {
        "description": "Optional filters, sort order, and paging config for the bank list.",
        "typeName": "IVirtualAccountBank.IRequest"
      },
      "responseBody": {
        "description": "Paginated summary list of banks for dashboard/admin use.",
        "typeName": "IPageIVirtualAccountBank"
      },
      "path": "/virtualAccount/banks",
      "method": "patch"
    },
    {
      "specification": "Implements GET of an individual bank record from virtual_account_banks table by ID, supporting dashboard, onboarding, and configuration workflows. As per ERD, this entity manages the master registry of supported banks for virtual account issuance. Access restricted to admin/superadmin users by RBAC.",
      "description": "This operation retrieves full information on a specific bank from the virtual_account_banks entity by its unique ID. The target is the master table row referenced by virtual accounts during issuance.\n\nThe endpoint supports both dashboard drill-down for bank management and direct configuration checks during onboarding or troubleshooting. The operation is RBAC-protected, audit-logged, and returns 404 if the record does not exist or 403 if the user lacks privileges. Details returned include all available metadata: name, code, logo_url, timestamps, etc. Related endpoints: PATCH (list), POST (add), PUT (edit), DELETE (remove) on banks. Error handling includes missing/invalid ID and privilege enforcement as per security policy.",
      "summary": "Retrieves detailed info on a specific bank from virtual_account_banks by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier for the bank record to fetch.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Detailed information on the specified bank.",
        "typeName": "IVirtualAccountBank"
      },
      "path": "/virtualAccount/banks/{id}",
      "method": "get"
    },
    {
      "specification": "Implements creation/insertion of a new bank record into the virtual_account_banks master table, per requirements for admin dashboard and onboarding of new banks for virtual account issuance. Implements REST POST for single row insert, data validated per Prisma schema constraints (unique bank code, etc). Access is restricted to admin/superadmin by RBAC. Insertion is full audit-logged.",
      "description": "This endpoint allows authorized admins to add a new bank to the master table, virtual_account_banks, by posting the required bank metadata in the request body. The payload requires all necessary fields as per the Prisma schema: name, code, logo_url (optional), and other audit data as per business rules.\n\nUniqueness of bank code is enforced, as are field lengths and data validation. If a bank entry with the same code already exists, an error (409) is returned. Successful inserts are audit-logged.\n\nOnly users with admin/superadmin privileges can use this endpoint (RBAC required). Related endpoints: PATCH (list/search banks), GET (detail), PUT (update), DELETE (remove).",
      "summary": "Creates a new bank record in virtual_account_banks.",
      "parameters": [],
      "requestBody": {
        "description": "New bank details to create (name, code, logo_url, etc).",
        "typeName": "IVirtualAccountBank.ICreate"
      },
      "responseBody": {
        "description": "The created bank record (with full detail fields).",
        "typeName": "IVirtualAccountBank"
      },
      "path": "/virtualAccount/banks",
      "method": "post"
    },
    {
      "specification": "Implements updating an existing bank entity in the virtual_account_banks master table by ID, per admin management requirements in the dashboard. Supports updating allowed/selected fields (name, logo_url, etc) subject to validation and audit policies documented in the Prisma schema. Update is RBAC-gated (admin/superadmin) and fully audit-logged.",
      "description": "This endpoint enables authorized admin users to update fields in a bank entity identified by its ID in the virtual_account_banks table. The payload can specify any permitted bank fields (e.g., name, logo_url, status), as defined in the Prisma schema.\n\nOnly allowed/valid fields can be set. Uniqueness on 'code' is preserved (cannot change to existing code). All edit attempts, successful or failed, are fully audit-logged. The user must have admin or superadmin role.\n\nRelated endpoints: PATCH (list/search), GET (detail), POST (create new), DELETE (remove) for this entity. Errors are returned on invalid data, constraint failure, not found, or RBAC denial.",
      "summary": "Updates an existing bank in the virtual_account_banks table by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Bank entity unique identifier to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields to update for the bank entry.",
        "typeName": "IVirtualAccountBank.IUpdate"
      },
      "responseBody": {
        "description": "The updated bank entity record.",
        "typeName": "IVirtualAccountBank"
      },
      "path": "/virtualAccount/banks/{id}",
      "method": "put"
    },
    {
      "specification": "Implements logical deletion of a bank record in the virtual_account_banks master table by unique ID, supporting administrative management and compliance requirements per Prisma entity docs. Deletion is only allowed if the bank is not in use by any active virtual account (reference check). Operation is RBAC-restricted and fully audit-logged.",
      "description": "This operation deletes a bank entry from the virtual_account_banks master table using the 'id' path parameter. As per the ERD/schema, a bank may only be deleted if it is not referenced by any active virtual accounts, which is enforced before removal. Any attempt to delete an in-use bank returns an integrity error.\n\nThis endpoint is restricted to admin and superadmin roles. All deletion attempts are audit-logged for compliance. Related operations: PATCH/GET/POST/PUT for banks. Returns 204 on success, 409 on reference error, or 404 if the bank record is not found.",
      "summary": "Deletes a bank record in virtual_account_banks by ID (RBAC-protected).",
      "parameters": [
        {
          "name": "id",
          "description": "Bank record unique identifier to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": null,
      "path": "/virtualAccount/banks/{id}",
      "method": "delete"
    },
    {
      "specification": "Implements list/search for payment gateway (PG) providers in the virtual_account_pg_providers table, per requirements for admin management and onboarding. PATCH method supports paging/filtering/searching for dashboard use cases. Prisma entity doc certifies 3NF design/usage; only accessible to admin and superadmin roles by RBAC policy.",
      "description": "This operation returns a filterable and paginated list of payment gateway (PG) providers from the virtual_account_pg_providers table. Used for dashboard onboarding, external integration management, and reference during virtual account issuance. The PATCH method allows a search/filter query in the request body, specifying provider name, code, or ordering as needed.\n\nAccess is protected by RBAC policy (admin/superadmin). Results may include sensitive integration data, so actions are audit-logged.\n\nRelated endpoints: POST (add new PG), GET (detail), PUT (update), DELETE (remove) for the same entity. Referential integrity enforced (providers referenced by accounts cannot be removed until unused).",
      "summary": "Retrieves a paginated and filterable list of payment gateway providers.",
      "parameters": [],
      "requestBody": {
        "description": "Optional search/filter criteria for PG provider list.",
        "typeName": "IVirtualAccountPgProvider.IRequest"
      },
      "responseBody": {
        "description": "Paginated summary list of PG providers for onboarding/integration.",
        "typeName": "IPageIVirtualAccountPgProvider"
      },
      "path": "/virtualAccount/pgProviders",
      "method": "patch"
    },
    {
      "specification": "Retrieve information for a specific PG provider by its unique ID from the `virtual_account_pg_providers` table. This endpoint provides details about a payment gateway (PG) provider, such as KG이니시스 or Toss Payments, including its API endpoint, code, and metadata. This is essential for both administrative configuration and for mapping external account issuance workflows. It enforces referential integrity by only returning providers that exist. Used in admin UIs and external integration settings management.",
      "description": "This API fetches a single record from the `virtual_account_pg_providers` table using a unique PG provider ID. The endpoint allows administrators to view the provider's details, such as its name, code, API endpoint, and status. All returned data is atomic and complies with 3NF; the response never includes summarizations or duplicate data. This read operation is essential for various service maintenance and external API integration workflows, where knowing each PG configuration is required.\n\nSecurity is enforced through role-based permissions (RBAC); only authorized administrators can access provider details. The endpoint ensures that only a provider with a matching ID will return a result, otherwise, a 404 not found is returned for absent resources. Links to external integrations are also visible.\n\nNo business logic modifies the record—this is a pure read operation. Error handling follows typical RESTful conventions (401 for unauthorized, 404 for not found).\n\nRelated operations: Creation and update endpoints exist for managing provider entries.\n",
      "summary": "Fetch a specific PG provider from the `virtual_account_pg_providers` table by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier (UUID) for the PG provider.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Details of the specified PG provider.",
        "typeName": "IVirtualAccountPgProvider"
      },
      "path": "/virtualAccount/pgProviders/{id}",
      "method": "get"
    },
    {
      "specification": "Create a new PG provider entry in the `virtual_account_pg_providers` table. Used for onboarding new payment gateway integrations (e.g., adding Toss Payments or KG이니시스). This operation is critical for system extensibility and future support for new financial integrations. Data must include all required fields, such as code, name, and API endpoint, and enforce uniqueness at the database level.",
      "description": "This API allows an administrator to register a new PG provider into the `virtual_account_pg_providers` table. All input is strictly validated: required fields such as `name`, `code`, and `api_endpoint` must be supplied and must be unique. Upon success, a record will be created, and the new provider will be available for virtual account issuance workflows.\n\nSecurity is enforced using RBAC; only privileged admins may use this endpoint. Input is checked for uniqueness to prevent duplication of providers or conflicting codes. The operation will fail if uniqueness is violated (409 error).\n\nData validation ensures only atomic, non-derived values are inserted, maintaining strict 3NF normalization. Business logic ensures integration metadata is correct before creation.\n\nRelated endpoints for fetching, updating, and deleting providers are also available.\n",
      "summary": "Register a new PG provider into the `virtual_account_pg_providers` table.",
      "parameters": [],
      "requestBody": {
        "description": "Data for the new PG provider (name, code, API endpoint, etc).",
        "typeName": "IVirtualAccountPgProvider.ICreate"
      },
      "responseBody": {
        "description": "The newly created PG provider record.",
        "typeName": "IVirtualAccountPgProvider"
      },
      "path": "/virtualAccount/pgProviders",
      "method": "post"
    },
    {
      "specification": "Update an existing PG provider in the `virtual_account_pg_providers` table by its unique ID. This operation is the primary administrative means for maintaining payment gateway (PG) configurations, such as recording a new API endpoint, updating provider names, or modifying status.",
      "description": "This API allows authorized admins to edit or update a PG provider identified by its unique ID. Only fields that are allowed to change (e.g., name, API endpoint, code) may be updated; unique constraints are enforced (e.g., code uniqueness). The update will only proceed for existing records, preserving referential integrity and protecting against erroneous modifications to other providers.\n\nFull atomic validation is performed on all updates. If non-existing, a 404 is returned. Security: only authorized admins can perform updates per RBAC. Data is strictly normalized, and only non-derived, direct values are ever changed. Related downstream effects (e.g., impact on linked accounts) are not handled here—this is a pure table update operation.\n\nInput validation errors and uniqueness violations (409) are handled as RESTful errors.\n\nRelated operations cover creation, deletion, and detail retrieval for PG providers.\n",
      "summary": "Update PG provider details in the `virtual_account_pg_providers` table by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier (UUID) for the PG provider.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields to update for this PG provider.",
        "typeName": "IVirtualAccountPgProvider.IUpdate"
      },
      "responseBody": {
        "description": "The updated PG provider record.",
        "typeName": "IVirtualAccountPgProvider"
      },
      "path": "/virtualAccount/pgProviders/{id}",
      "method": "put"
    },
    {
      "specification": "Delete a PG provider from the `virtual_account_pg_providers` table by its unique ID. This administrative operation is used to cleanly remove external payment gateway integrations that are no longer required.",
      "description": "This endpoint deletes a PG provider from the `virtual_account_pg_providers` table using its unique ID. Only privileged administrators can perform this operation. The deletion is validated against referential integrity rules—if the provider is referenced by any issued virtual accounts, deletion is blocked (409 Conflict), as required by the database schema comments and relationships.\n\nUpon successful deletion, no content is returned; a 204 status is assumed. If the PG provider is not found, a 404 is returned. Security is ensured through RBAC permissions. No related downstream records will be removed except as allowed via foreign key cascading (only if safe, as enforced by the schema).\n\nRelated CRUD APIs cover creation, update, and retrieval of providers. Business logic never allows deletion of referenced rows.\n",
      "summary": "Delete a PG provider from the `virtual_account_pg_providers` table by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier (UUID) for the PG provider.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": null,
      "path": "/virtualAccount/pgProviders/{id}",
      "method": "delete"
    },
    {
      "specification": "Query and list virtual accounts in the `virtual_account_virtual_accounts` table, with full paging, filtering, and sorting. Implements requirement for administrator dashboard, statistics, and advanced search by customer, status, expiration, bank/PG provider, and so on.",
      "description": "This endpoint returns a paginated, filterable, and sortable list of virtual accounts from the `virtual_account_virtual_accounts` table. Filtering can include criteria such as customer ID, status, bank or PG, account number, expiration dates, etc. Sorting options support admin dashboard/search requirements.\n\nSecurity is enforced: only authenticated admins or super admins may access the list. Root search fields are atomic and map directly to the schema columns; non-derived only. Pagination follows standard conventions (page number/size). Errors are returned for invalid queries or authentication failures.\n\nUsed for dashboard screens, statistics, and operational monitoring. Related endpoints exist for detail viewing, creation, updates, and deletion.\n",
      "summary": "List or search virtual accounts in the `virtual_account_virtual_accounts` table with paging/filter/sort support.",
      "parameters": [],
      "requestBody": {
        "description": "Search, filter, and paging information for virtual account queries.",
        "typeName": "IVirtualAccountVirtualAccount.IRequest"
      },
      "responseBody": {
        "description": "Paged list of virtual account records matching the criteria.",
        "typeName": "IPageIVirtualAccountVirtualAccount"
      },
      "path": "/virtualAccount/virtualAccounts",
      "method": "patch"
    },
    {
      "specification": "Retrieve details of a specific virtual account by its unique ID from the `virtual_account_virtual_accounts` table. Implements administrator need for viewing single account data for operations, matching, troubleshooting, etc.",
      "description": "This endpoint fetches a single virtual account by its unique ID. Response data includes all fields from the table, such as account number, customer, bank, PG provider, status, and expiry. Related entities may be expanded as per needs (bank, customer, PG provider info) if applicable.\n\nSecured by RBAC: only privileged admins can view full virtual account detail. 404 is returned if the account is not found. All data is atomic per schema and restricted to non-derived columns.\n\nThis operation serves dashboard inspection, troubleshooting, and tracking use cases. Errors use standard REST semantics for not found and unauthorized.\n\nRelated endpoints cover list/retrieve, create, update, and delete actions.",
      "summary": "Fetch a specific virtual account from the `virtual_account_virtual_accounts` table by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier (UUID) of the virtual account.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Full details of the virtual account.",
        "typeName": "IVirtualAccountVirtualAccount"
      },
      "path": "/virtualAccount/virtualAccounts/{id}",
      "method": "get"
    },
    {
      "specification": "Create a new virtual account record in the `virtual_account_virtual_accounts` table. Implements core account issuance (admin or automated), as required by the requirements specification for bank/PG integration and customer virtual account management.",
      "description": "This endpoint lets an administrator (or automated backend process) create a new virtual account for a customer. Requires all atomic, non-derived fields as per the schema: customer ID, bank, PG provider, account number, status, holder, expiry, etc. Ensures referential integrity to valid customers, banks, and PGs; rejects inserts for missing/invalid FKs.\n\nSecurity: Only authorized admins may issue new accounts, via RBAC. Uniqueness for (account number + bank + PG) is strictly enforced. The created account row will be used for downstream deposit/matching/notification functionality.\n\nUpon success, returns the new virtual account record. Violations in unique or referential constraints generate informative REST errors. Related endpoints support update, delete, and query actions.\n",
      "summary": "Create a new virtual account entry in the `virtual_account_virtual_accounts` table.",
      "parameters": [],
      "requestBody": {
        "description": "Data for the new virtual account, including references to customer, bank, PG, and settings.",
        "typeName": "IVirtualAccountVirtualAccount.ICreate"
      },
      "responseBody": {
        "description": "The newly created virtual account record.",
        "typeName": "IVirtualAccountVirtualAccount"
      },
      "path": "/virtualAccount/virtualAccounts",
      "method": "post"
    },
    {
      "specification": "Edit or update an existing virtual account record by ID in the `virtual_account_virtual_accounts` table. Supports administrative correction of metadata or account parameters. Only fields that may be updated per the business logic are modifiable; some fields may be immutable (e.g., customer_id).",
      "description": "This endpoint enables administrators to update fields in a virtual account record, identified by unique ID. Fields like status, expiry, and holder name may be edited, subject to business rules. Primary keys and immutable system fields may not be changed. Uniqueness of (account_number, bank, PG) is strictly enforced. Only updatable fields as per the schema/editor design can be supplied.\n\nReferential and security constraints are always validated. 404 is returned if the row is not found. The operation is only allowed for privileged admins (RBAC policy).\n\nTypical use: fixing account expiry dates, status updates, or changing holder name for correction. Input validation, constraints, and business logic are all applied per schema documentation. Error handling for authorization, not found, and constraint violations is robust.\n\nRelated endpoints: create, delete, get, list.",
      "summary": "Update an existing virtual account entry in the `virtual_account_virtual_accounts` table by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier (UUID) of the virtual account.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields to update for the virtual account.",
        "typeName": "IVirtualAccountVirtualAccount.IUpdate"
      },
      "responseBody": {
        "description": "The updated virtual account record.",
        "typeName": "IVirtualAccountVirtualAccount"
      },
      "path": "/virtualAccount/virtualAccounts/{id}",
      "method": "put"
    },
    {
      "specification": "Remove a virtual account record from the `virtual_account_virtual_accounts` table by ID. Only accounts that are not referenced in business logic flows (i.e., not active or in use) can be deleted, enforced via foreign key/ref checks and business rules.",
      "description": "This endpoint allows an authorized admin to delete a virtual account from the system by its unique ID. Deletion is subject to eligibility—referential integrity and business rules (e.g., cannot delete accounts attached to deposits or active business processes). Foreign key constraints ensure no cascading loss of related required data.\n\nSecurity: Only privileged admins may perform deletions. If the account does not exist, a 404 is returned. If forbidden by reference rules, a 409 Conflict is returned.\n\nSuccessful deletions return no content (HTTP 204).\n\nRelated endpoints include creation, update, get, and list operations on virtual accounts.",
      "summary": "Delete a virtual account from the `virtual_account_virtual_accounts` table by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier (UUID) of the virtual account.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": null,
      "path": "/virtualAccount/virtualAccounts/{id}",
      "method": "delete"
    },
    {
      "specification": "Provide search/paging/filter of account status change logs (`virtual_account_account_status_logs`) for virtual accounts. Used to audit all account state transitions (e.g., ACTIVE → EXPIRED) in administrator or dashboard UI.",
      "description": "This endpoint returns a paginated, filterable list of account status change logs from the `virtual_account_account_status_logs` table. Filters include account ID, admin ID, time windows, or status types. Results are sorted for dashboard/reporting purposes.\n\nSecurity is required: only authorized admins or super admins have access. Filtering and sorting parameters map atomically to columns—never derived/calculated values. Pagination conventions are followed per admin dashboard requirement.\n\nErrors are returned for invalid queries or unauthorized access attempts.\n\nThis search is vital for audit trailing, reporting, and investigating status transitions or lifecycle events for each virtual account. Related endpoints exist for details, creation, and update.",
      "summary": "List/search virtual account status logs in `virtual_account_account_status_logs` table with paging/filter/sort.",
      "parameters": [],
      "requestBody": {
        "description": "Filtering/search/paging information for account status logs.",
        "typeName": "IVirtualAccountAccountStatusLog.IRequest"
      },
      "responseBody": {
        "description": "Paged list of account status change logs matching the criteria.",
        "typeName": "IPageIVirtualAccountAccountStatusLog"
      },
      "path": "/virtualAccount/accountStatusLogs",
      "method": "patch"
    },
    {
      "specification": "Fetch a specific account status log by its unique ID from the `virtual_account_account_status_logs` table. Required for auditing, troubleshooting, or reviewing account lifecycle transitions by administrators.",
      "description": "This endpoint fetches a single account status change log by its unique ID from the `virtual_account_account_status_logs` table. Response includes info about the virtual account, old/new statuses, reason for change, admin responsible, and timestamp. Used in audits, dashboard event tracing, and administrator troubleshooting workflows.\n\nSecurity is RBAC-enforced; only privileged users can view the details. If not found, returns 404. Errors follow RESTful semantics, e.g., unauthorized/forbidden.\n\nRelated operations cover listing, creation, and updates for account status logs.",
      "summary": "Fetch a specific account status log entry by ID from `virtual_account_account_status_logs`.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier (UUID) of the status log entry.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Details of the specified account status log entry.",
        "typeName": "IVirtualAccountAccountStatusLog"
      },
      "path": "/virtualAccount/accountStatusLogs/{id}",
      "method": "get"
    },
    {
      "specification": "Create a new account status log entry in the `virtual_account_account_status_logs` table. This is used whenever an account status is changed (e.g., manually or via automation), for audit and compliance. Maintains atomic state transition log for each virtual account.",
      "description": "This endpoint creates a new record in the `virtual_account_account_status_logs` table, logging a status transition for a virtual account. All required atomic fields must be validated: virtual account ID, admin ID, old/new status, reason, changed_at timestamp. Referential integrity to both the referenced virtual account and admin is enforced.\n\nSecurity: Only privileged admins can create logs via status changes or manual audit corrections. Uniqueness and auditing constraints are applied. If references are invalid, a 400/404 is returned.\n\nThis operation is critical for managing compliant and traceable account lifecycle management. Related endpoints: searching, updating, deleting, and viewing details for account status logs.",
      "summary": "Create a new account status change log entry in the `virtual_account_account_status_logs` table.",
      "parameters": [],
      "requestBody": {
        "description": "Fields for the new account status change log entry.",
        "typeName": "IVirtualAccountAccountStatusLog.ICreate"
      },
      "responseBody": {
        "description": "The newly created account status log entry.",
        "typeName": "IVirtualAccountAccountStatusLog"
      },
      "path": "/virtualAccount/accountStatusLogs",
      "method": "post"
    },
    {
      "specification": "Updates an existing virtual account account status log entry by its unique identifier. The update operation adjusts the record's fields such as the status change, change reason, admin ID, and associated timestamps to reflect new status transitions made by administrators. This operation references the 'virtual_account_account_status_logs' table in the Prisma schema, which tracks all account status changes for issued virtual accounts. Access is likely restricted to admins with permission to update account status logs for audit and compliance, and all changed data is strictly validated for integrity. Related operations include log creation, deletion, and querying for audit purposes.",
      "description": "This operation enables authorized administrators to modify a specific account status log record, identified by its unique log ID. The status log records every transition (such as from ACTIVE to EXPIRED or CLOSED) of a virtual account for precise auditing, as required by regulatory and business requirements. \n\nThe update includes fields like from_status, to_status, reason, admin_id (the actor making the change), and the timestamp changed_at. Admin authorization is enforced through RBAC policies to ensure only permitted updates. Business rules may require that reasons and status values are validated for correctness.\n\nUpdates are logged to a separate admin audit trail to guarantee non-repudiation and traceability. Attempting to update immutable or already-finalized logs returns an error. Related endpoints include creating a new status log, deleting or fetching existing logs, and querying the list of account status logs for dashboard monitoring.\n",
      "summary": "Update a virtual_account_account_status_logs row (account status change log).",
      "parameters": [
        {
          "name": "id",
          "description": "Target account status log's ID",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields to update for the status log entry.",
        "typeName": "IVirtualAccountAccountStatusLogs.IUpdate"
      },
      "responseBody": {
        "description": "The updated status log entry.",
        "typeName": "IVirtualAccountAccountStatusLogs"
      },
      "path": "/virtualAccount/accountStatusLogs/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes an account status log entry for a virtual account, identified by log ID. The delete API removes or soft-deletes the specific log from 'virtual_account_account_status_logs' in accordance with compliance requirements and data retention policies. This endpoint is critical for the management, audit cleanup, or compliance removal of sensitive status transition records. Related entities are logs for status, admin, virtual account, and full audit trail maintenance is required for every delete action. Authorization is strictly managed, and attempts to delete immutable or locked logs are rejected.",
      "description": "This API allows admin users with appropriate permissions to delete a targeted account status log entry by its unique ID. This log holds the history of each status change in a virtual account's lifecycle. Deleting a status log may be necessary for correcting mistakes, complying with data retention policies, or removing test/demo data from the system.\n\nOn invocation, the endpoint checks business and regulatory rules about deletability (logs related to finalized/finished accounts may be protected), preserves audit history in virtual_account_admin_activity_logs, and ensures only authorized actors can perform this action. If the log is successfully deleted or soft-deleted, system audit records are updated for traceability. Errors are returned if the log does not exist, is already deleted, or is protected by policy.\n\nRelated endpoints include updating, querying, and listing account status logs for the dashboard/audit views.",
      "summary": "Delete a virtual_account_account_status_logs row (account status change log).",
      "parameters": [
        {
          "name": "id",
          "description": "Target account status log's ID",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Result of deletion (success or error).",
        "typeName": "IVirtualAccountAccountStatusLogs.IDeleteResult"
      },
      "path": "/virtualAccount/accountStatusLogs/{id}",
      "method": "delete"
    },
    {
      "specification": "Retrieves a paginated, filterable list of all deposit events in the virtual account system according to search, filter, pagination, and sorting parameters. This is a management dashboard operation on the 'virtual_account_deposits' table, supporting advanced querying for deposit audit, reconciliation, auto-matching review, and alert follow-up. Filters typically include period, status, account, customer, and reference number, as well as pagination controls. Only authorized admin or permitted user roles can access the full deposit list. Related endpoints: single deposit retrieval, create deposit (manual test), and deletion.",
      "description": "This operation provides a sophisticated search for deposit event records registered in the system. Records in 'virtual_account_deposits' represent all incoming transfers to virtual accounts, with metadata such as account ID, amount, depositor name, timestamp, reference number, and processing status.\n\nThe dashboard/search request can include numerous criteria: specific account, customer, date range, deposit status (e.g. PENDING, MATCHED, ERROR), reference number, amount range, and more, as well as pagination parameters (page/size) and advanced sorting. Access is restricted to authorized users—typically admins with finance or support roles. Responses are paginated result lists with accompanying metadata for further filtering or Excel export.\n\nThis operation is linked to matching review, error investigation, and batch reconciliation workflows, as well as notification/alert triggers for deposit processing states. Business rules and validation are applied to all search criteria, and error responses are returned for invalid queries or permission faults.",
      "summary": "Filter, search, and paginate virtual_account_deposits (deposit events).",
      "parameters": [],
      "requestBody": {
        "description": "Search and filter criteria for deposit events.",
        "typeName": "IVirtualAccountDeposits.IRequest"
      },
      "responseBody": {
        "description": "Paginated deposits list and metadata.",
        "typeName": "IPageIVirtualAccountDeposits"
      },
      "path": "/virtualAccount/deposits",
      "method": "patch"
    },
    {
      "specification": "Retrieves the full details of a single deposit event by its unique ID from the 'virtual_account_deposits' table. This endpoint is used to display all relevant information for an individual deposit: account, amount, depositor, time, reference number, status, and any matching or error linkage. Primarily for admin/support review or reconciliation, with access control. Related operations: updating, deleting, or matching deposit records, and writing logs for audit/history display.",
      "description": "This operation returns all available information about a specific deposit record, identified by UUID. It fetches metadata including the linked virtual account, event timestamp, incoming amount, depositor details, bank reference, processing status, and timestamps (created/updated).\n\nAccess is typically restricted to authorized admin, finance, or customer support personnel. Usage scenarios include resolving disputes, viewing historical records for audit, or performing manual reconciliation, especially where automatic matching failed or additional notes must be attached. Related operations are deposit search/list, updating deposit data, soft/hard deletion for cleanup, or triggering manual matching/error investigations.",
      "summary": "Fetch a single virtual_account_deposits record (deposit event).",
      "parameters": [
        {
          "name": "id",
          "description": "Target deposit event's ID",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Detailed deposit event record.",
        "typeName": "IVirtualAccountDeposits"
      },
      "path": "/virtualAccount/deposits/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new deposit event record in the virtual account system for manual entry, testing, or exceptional cases needing direct insertion. Used by support/admin users when an automated webhook is unavailable (for example, manual deposit adjustment or testing alarms). The 'virtual_account_deposits' table is referenced, holding all deposit event metadata. Input fields: virtual account, amount, depositor, time, reference number, and status. Authorization is required. Activity is logged for audit compliance. Related endpoints include searching, updating, deleting, and matching deposit records.",
      "description": "This endpoint allows an administrator or system operator to create a deposit event record manually. The new deposit represents an incoming transfer to a virtual account, containing required fields like the linked virtual account, amount received, depositor name, deposited_at datetime, bank reference number, and initial status ('PENDING', 'MATCHED', etc).\n\nBusiness validations include prevention of duplicate reference numbers for a given virtual account, positive amount checks, and permission requirements for manual event creation. Related actions (auto-matching, notification triggers) may be performed after record creation. Full creation events are captured in the audit log with user and event detail.\n\nThis endpoint is used only in special flows such as manual corrections, integration testing, or deposit reconciliation workflows when normal automated integration is interrupted. Related endpoints include searching deposit events, matching, error record review, and activity log examination.",
      "summary": "Create (insert) a new virtual_account_deposits event record (manual deposit entry).",
      "parameters": [],
      "requestBody": {
        "description": "Deposit event data to be inserted.",
        "typeName": "IVirtualAccountDeposits.ICreate"
      },
      "responseBody": {
        "description": "Newly created deposit record.",
        "typeName": "IVirtualAccountDeposits"
      },
      "path": "/virtualAccount/deposits",
      "method": "post"
    },
    {
      "specification": "Updates a deposit event record by its unique identifier, enabling admins to adjust, correct, or annotate a deposit entry. This operation references 'virtual_account_deposits' from the schema and can update any editable field: amount, depositor, status, etc. Authorization and strict validation are enforced; every change is audit-logged. Related endpoints: creation, deletion, searching, error/matching review.",
      "description": "Provides the ability for an admin or support role to update a deposit event record to correct data, annotate with additional information, or move it through the processing workflow. Updateable fields are typically amount, depositor name, deposited time, reference number, and status. Updates must not violate business rules such as duplicate references or illegal negative amounts. API checks RBAC permissions before applying changes.\n\nEvery update event is tracked in the admin action/audit log for compliance with financial regulations. No updates are allowed to immutable or finalized deposit entries. Access is limited to authorized roles (audit, finance, support). Errors occur for nonexistent records or forbidden updates. Related endpoints: fetch, create, delete deposit, matching/error subflows.",
      "summary": "Update a virtual_account_deposits event record.",
      "parameters": [
        {
          "name": "id",
          "description": "Target deposit event's ID",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Editable fields for the deposit event update.",
        "typeName": "IVirtualAccountDeposits.IUpdate"
      },
      "responseBody": {
        "description": "The updated deposit record.",
        "typeName": "IVirtualAccountDeposits"
      },
      "path": "/virtualAccount/deposits/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes a deposit event record from the 'virtual_account_deposits' table, by its unique ID. Used for cleaning up test, demo, or incorrectly recorded events, in compliance with data retention and audit requirements. Usually accesses only non-finalized deposits; system logs every delete. Related endpoints include create, update, find/list deposits, and error/matching record tracking.",
      "description": "Allows a privileged admin to remove (or soft-delete) a deposit event record by UUID. Used in scenarios where a deposit was entered in error (manual/test records), or regulatory/data retention policies require cleanup. \n\nDeletes may be restricted by business logic—such as not allowing deletion of completed/finalized deposits. Action is strictly permission-controlled (audit/compliance), and every delete is tracked in the admin audit log for later inspection. Errors are returned for not found or protected records.\n\nRelated endpoints include creation, updating, searching, and matching of deposit events, as well as reconciliation and notification audit features.",
      "summary": "Delete a virtual_account_deposits event record.",
      "parameters": [
        {
          "name": "id",
          "description": "Target deposit event's ID",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Result of deposit deletion (success or error).",
        "typeName": "IVirtualAccountDeposits.IDeleteResult"
      },
      "path": "/virtualAccount/deposits/{id}",
      "method": "delete"
    },
    {
      "specification": "Retrieves a paginated, filterable list of all deposit matching events for audit, dashboard, and reconciliation. Includes advanced filtering, searching, and pagination. The data source is the 'virtual_account_deposit_matchings' table linking deposits/admins/customers. Used by admins to review, verify, and post-process all automatic/manual matching attempts. Access is restricted by RBAC policy. Related endpoints: matching create/revise, error logs, linked deposit fetching.",
      "description": "This endpoint enables admin or support users to list all deposit matching events with advanced filtering—by status, date, deposit, matched customer, admin, matching method, and custom business filters. Paginated responses support dashboard and downloadable reporting (Excel export). Results provide full audit trail capability, supporting investigation of auto-match errors, admin actions, or customer reconciliation.\n\nKey filters include deposit reference, matching times, matching method ('AUTOMATIC', 'MANUAL'), and annotated reasons. Access control is enforced for all queries. Related endpoints: get, update, delete single match records; linked deposit, admin, error logs retrieval. Errors returned for invalid filters or permission issues.",
      "summary": "Filter, search, and paginate virtual_account_deposit_matchings (deposit matching logs).",
      "parameters": [],
      "requestBody": {
        "description": "Search and filter criteria for deposit matchings.",
        "typeName": "IVirtualAccountDepositMatchings.IRequest"
      },
      "responseBody": {
        "description": "Paginated result with metadata, for dashboard/audit uses.",
        "typeName": "IPageIVirtualAccountDepositMatchings"
      },
      "path": "/virtualAccount/depositMatchings",
      "method": "patch"
    },
    {
      "specification": "Fetches full data for a single deposit matching event by unique ID in the 'virtual_account_deposit_matchings' table. Returns all details—linked deposit, admin, matched customer, timestamps, method, reason. Used for audit or admin workflow and error review. Access is restricted. Related operations: update/delete, list all, create, link to error logs or deposit.",
      "description": "Enables a privileged user to fetch all fields for a single deposit matching record for review or investigation. Data includes deposit linkage, assigned admin, matched customer, matching time, matching method ('AUTOMATIC', 'MANUAL'), and reason. Supports dashboard auditing, reconciliation reviews, and error diagnosis on manual/automatic matching runs.\n\nStrict permission enforcement is required; only authorized auditors, admins, or finance users can access non-anonymized data. Associated endpoints include search for matchings, linked deposit lookup, updating, and deletion. Nonexistent or access-controlled records return appropriate errors.",
      "summary": "Fetch a single virtual_account_deposit_matchings record (matching event).",
      "parameters": [
        {
          "name": "id",
          "description": "Target deposit matching's ID",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Full detail of the deposit matching record.",
        "typeName": "IVirtualAccountDepositMatchings"
      },
      "path": "/virtualAccount/depositMatchings/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new deposit matching event/log in 'virtual_account_deposit_matchings', representing either auto-matching or manual assignment. Used by the matching system or admins to log a customer-assigned match for a deposit. Input fields are: linked deposit, admin (actor), matched customer, matching timestamp, method, and optional reason/comments. Triggers downstream notification/alert if matching resolves an error. Related endpoints: updating, querying, error log linkage. Authorization enforced.",
      "description": "This endpoint is used by the matching system or admin actors to log that a deposit event has been matched to a customer (for successful auto-matching or batch/manual assignment). Required input: deposit ID, acting admin ID, matched customer, matched_at time, method ('AUTOMATIC' or 'MANUAL'), and an audit reason.\n\nValidations require that only one matching can be active per deposit, requisite permissions are checked, and business rules for match status progression are enforced. System notifications or downstream workflow triggers (such as error resolution) may occur as side effects. All events are captured for audit compliance. Linked to dashboard, error review, and matching status presentation.\n\nRelated endpoints: updating, deleting, and querying individual matchings, error linkage, and aggregation for dashboard KPIs.",
      "summary": "Insert (create) a new virtual_account_deposit_matchings record.",
      "parameters": [],
      "requestBody": {
        "description": "Fields for new matching event log.",
        "typeName": "IVirtualAccountDepositMatchings.ICreate"
      },
      "responseBody": {
        "description": "Created deposit matching record.",
        "typeName": "IVirtualAccountDepositMatchings"
      },
      "path": "/virtualAccount/depositMatchings",
      "method": "post"
    },
    {
      "specification": "Updates an existing deposit matching record by ID, amending associated fields such as matching method, reason, or involved actors. References 'virtual_account_deposit_matchings' in the schema. For auditing and error correction workflows where past match assignments must be updated (e.g., annotate or revise matching reason/method/admin). Admin/audit log tracking required. Related operations: create, delete, audit fetch, and linked deposit lookup.",
      "description": "Allows an authorized admin to change details of a deposit matching record, such as reason, matching method, or involved actors (admin or customer). Use case: annotating match events after investigation, or correcting original assignments from inaccurate automated processing. Only non-finalized (editable) records can be changed; immutable records are protected.\n\nAll modifications are strictly captured in the admin audit log for transparency and regulatory compliance. Attempts to update protected or non-existent entries return errors. Peer endpoints include fetch, create, and delete matching records, error logs, and reconciliation batch ops.",
      "summary": "Update a virtual_account_deposit_matchings record.",
      "parameters": [
        {
          "name": "id",
          "description": "Target deposit matching's ID",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields to update in the matching event record.",
        "typeName": "IVirtualAccountDepositMatchings.IUpdate"
      },
      "responseBody": {
        "description": "Updated deposit matching data.",
        "typeName": "IVirtualAccountDepositMatchings"
      },
      "path": "/virtualAccount/depositMatchings/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes a deposit matching record by ID from 'virtual_account_deposit_matchings'. Used to clean up misassigned or test match logs. Enforces audit trail and permission validation. Soft/hard deletes allowable depending on system policy. Related operations: create, update, fetch detail, list all. Downstream effects logged, and errors are returned for non-deletable/locked records.",
      "description": "Enables admin users with appropriate audit permissions to delete a deposit matching log entry. Used to correct errors, remove test/demo assignments, or undo inaccurate matching events. On delete, the system enforces strict audit and logging for traceability, and may only allow deletion of non-final or non-essential matches per policy.\n\nAttempts to delete protected or linked records return detailed errors. All delete events are written to the audit trail, including actor ID, target record, result, and time. Errors also include permission denials, not found, or immutability rejections. Related endpoints: create, update, list, fetch detail, and backlinked error/deposit event operations.",
      "summary": "Delete a virtual_account_deposit_matchings record (matching event).",
      "parameters": [
        {
          "name": "id",
          "description": "Target deposit matching's ID",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Result of deletion operation (success/error).",
        "typeName": "IVirtualAccountDepositMatchings.IDeleteResult"
      },
      "path": "/virtualAccount/depositMatchings/{id}",
      "method": "delete"
    },
    {
      "specification": "Implements the listing/searching of deposit error records for virtual accounts, supporting advanced filtering, pagination, and sorting. This operation is tightly coupled with the 'virtual_account_deposit_errors' table, which logs errors encountered during deposit processing (e.g., failed matching, bank/PG errors). It enables system admins to audit and investigate all error events across the deposit pipeline. Pagination/search fields are mapped to key columns like error_code, error_message, occurred_at. May be cross-referenced with deposit events for hierarchical drilldown. Sensitive information requires appropriate permissions (admin/super-admin). Results can be filtered by error code, deposit id, admin id, date ranges, and other criteria. Used by the admin dashboard for bulk review or export of error incidents.",
      "description": "This API endpoint retrieves a paginated and searchable list of deposit error events, directly referencing the 'virtual_account_deposit_errors' table. Each deposit error record tracks failed or exceptional cases encountered during virtual account deposits, including attributes such as error_code, error_message, deposit_id, admin_id, and occurred_at. The API supports advanced search parameters, including filtering by error code, admin, timeframe, and keyword in error messages, as well as pagination and sorting for scalable review of large event volumes.\n\nAdministrators typically use this endpoint for error analysis, operations troubleshooting, or proactive incident management. Data access must honor RBAC permission rules, ensuring sensitive events are only viewable by authorized accounts. Particular care must be taken to hide potentially sensitive detail fields unless necessary for diagnosis, and to prevent information leakage in export/download workflows.\n\nRelated operations include retrieval of individual errors (GET by id), the deposit list for the affected virtual account or deposit event, and contextual linking within admin dashboard integrations. All query parameters are validated for security and performance.",
      "summary": "List and search deposit errors (virtual_account_deposit_errors table) with filtering, pagination, and security enforcement.",
      "parameters": [],
      "requestBody": {
        "description": "Search conditions and pagination for deposit error listing",
        "typeName": "IVirtualAccountDepositError.IRequest"
      },
      "responseBody": {
        "description": "Paginated deposit error result list with filtering and metadata",
        "typeName": "IPageIVirtualAccountDepositError"
      },
      "path": "/virtualAccount/depositErrors",
      "method": "patch"
    },
    {
      "specification": "Implements retrieval of a single deposit error event by its unique ID for virtual account deposit processing. This maps directly to the 'virtual_account_deposit_errors' table (primary key: id). Supports use cases such as error detail inspection, admin investigation, and linking from notification/audit screens. Sensitive error details must be RBAC-guarded. Referenced in troubleshooting or export/download workflows.",
      "description": "Retrieves the full details of an individual deposit error entry, identifying it by its UUID primary key as defined in the 'virtual_account_deposit_errors' table. The response includes all standard fields for the error: error_code, error_message, deposit_id, admin_id, error_detail, occurred_at, and relational context for troubleshooting. Admins or super-admins typically use this endpoint for targeted investigation of error events recorded during virtual account deposit flows.\n\nError records are referenced for incident management, compliance audits, and root cause analysis in conjunction with upstream deposit event and status logs. Permission checks must restrict access to only authorized users, especially regarding raw error_detail and system messages. Proper error handling is required to respond with 404s for not found records or 403 if unauthorized.\n\nCross-references include hierarchical APIs for deposits and integrations with the admin dashboard export/log features.",
      "summary": "Retrieve a specific deposit error event (virtual_account_deposit_errors) by ID with full error context.",
      "parameters": [
        {
          "name": "id",
          "description": "Target deposit error record UUID",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Detailed deposit error information for the given event",
        "typeName": "IVirtualAccountDepositError"
      },
      "path": "/virtualAccount/depositErrors/{id}",
      "method": "get"
    },
    {
      "specification": "Implements creation of a new deposit error record for a virtual account, mapped to 'virtual_account_deposit_errors'. Supports error logging by internal processes, background jobs, or manual admin interventions, e.g. when an exceptional deposit issue arises (matching failure, API error, etc). Validates required fields: deposit_id, error_code, error_message, occurred_at. RBAC required for manual creation; automated system jobs may be granted backend role. Successful creation returns the full record.",
      "description": "Creates a new deposit error entry in the 'virtual_account_deposit_errors' table, supporting atomic logging of errors encountered during virtual account deposit handling. The endpoint requires fields such as deposit_id, error_code, error_message, optionally admin_id, error_detail, and the occurred_at timestamp.\n\nThis operation is invoked by either system-level jobs (auto-matching, parsing, webhook handling) or by authorized admin actions (manual error registration, overrides). Permissions are tightly controlled: manual creation may require additional RBAC checks to prevent misuse or accidental logging.\n\nUpon success, the endpoint returns the detailed object as persisted. Business logic may reject duplicates, validate correctness of the target deposit record, or throttle flood attempts. Errors must be handled according to standard conventions (422 for validation, 409 for duplicate, 403/401 for unauthorized).",
      "summary": "Create a new deposit error record (virtual_account_deposit_errors) for an encountered deposit problem.",
      "parameters": [],
      "requestBody": {
        "description": "Creation data for deposit error event",
        "typeName": "IVirtualAccountDepositError.ICreate"
      },
      "responseBody": {
        "description": "Complete created deposit error record",
        "typeName": "IVirtualAccountDepositError"
      },
      "path": "/virtualAccount/depositErrors",
      "method": "post"
    },
    {
      "specification": "Implements update/edit for a given deposit error log record in 'virtual_account_deposit_errors'. Used by authorized admins to update error classification, add detail/context, or correct attribution after manual investigation. Updates are typically constrained to non-primary fields: error_code, error_message, error_detail. Requires full RBAC permission checks and strong audit controls.",
      "description": "Updates an existing deposit error entry identified by its primary key in 'virtual_account_deposit_errors'. Permitted updates might include changing error_code/classification (after reanalysis), editing error_message or error_detail (for richer context), or updating admin reference after override. The API requires full request validation to prevent accidental overwrite or inconsistent status, and is RBAC-restricted to admin/super-admin roles only.\n\nAll updates trigger audit log writes as required by compliance and traceability demands. UI should display before/after on major field changes. Requires careful error handling for ID mismatches (404), invalid transitions (409), or violation of validation constraints (422). Only mutable fields are expected in the request body; immutable identity fields may not be changed.",
      "summary": "Update a deposit error record (virtual_account_deposit_errors) with new context/classification/attribution details.",
      "parameters": [
        {
          "name": "id",
          "description": "Target deposit error record UUID to update",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields to update (error_code, message, detail, admin, etc)",
        "typeName": "IVirtualAccountDepositError.IUpdate"
      },
      "responseBody": {
        "description": "Updated deposit error record object",
        "typeName": "IVirtualAccountDepositError"
      },
      "path": "/virtualAccount/depositErrors/{id}",
      "method": "put"
    },
    {
      "specification": "Implements hard deletion (or tumbling/tombstone) of a deposit error event from 'virtual_account_deposit_errors', by primary UUID. Used in rare cases for error correction, test record cleanup, or in compliance with legal data erasure requests. RBAC restrictions are strict; may be system-only or super-admin only. Operation should be fully audited.",
      "description": "Deletes a deposit error record from 'virtual_account_deposit_errors' identified by its primary key (UUID). This action is typically permitted only for super-admins or automation processes under special compliance scenarios (such as legal erasure requests or initial test record cleanup). RBAC policy must be strictly enforced to avoid unauthorized loss of audit data.\n\nBefore deletion, the API verifies existence and constraints (e.g., not referenced in other audit records). Full audit logging is required for traceability. Fails with 404 if record is not found, or 403 for lack of permission. On success, returns the deleted object, or a confirmation status.",
      "summary": "Delete a deposit error event (virtual_account_deposit_errors) by ID with strict RBAC/audit.",
      "parameters": [
        {
          "name": "id",
          "description": "Target deposit error event UUID to delete",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Confirmation of deletion or deleted error object",
        "typeName": "IVirtualAccountDepositError"
      },
      "path": "/virtualAccount/depositErrors/{id}",
      "method": "delete"
    },
    {
      "specification": "Implements listing/filtering of notification event records for virtual accounts, based on 'virtual_account_notifications'. Supports full-featured searching/pagination/filtering for admin dashboard use, with advanced fields: event_type, recipient, status, dates, channel. Used in notification log review, troubleshooting, and operational reporting. May cross-reference notification template/channel for richer admin UX.",
      "description": "Fetches a paginated, searchable list of all notification event entries as represented in the 'virtual_account_notifications' table. Each notification event documents a particular system alert, user/customer/admin notification, or automated system warning/expiration/incident (such as DEPOSIT_CONFIRMED, DEPOSIT_FAIL, ADMIN_ALERT, etc).\n\nThe query supports extensive filters/pagination for dashboard needs: by event_type, target recipient (UUID), channel (kakao, email...), notification_template_id, status (SENT, DELIVERED, FAILED), date ranges, and full-text search over status/message fields. Admin users use this endpoint to review outgoing notification performance, troubleshoot failures/non-delivery, and support user/customer service needs.\n\nRBAC control ensures only appropriate roles may access notification logs, with special attention to customer privacy and delivery details. The result set may be cross-referenced with channels/templates endpoints for UI presentation. Pagination and performance safeguards are recommended for production use.",
      "summary": "Search and list notification event records (virtual_account_notifications table) for admin dashboard with advanced filtering.",
      "parameters": [],
      "requestBody": {
        "description": "Filtering and pagination/searching options for notifications.",
        "typeName": "IVirtualAccountNotification.IRequest"
      },
      "responseBody": {
        "description": "Paginated notification event records.",
        "typeName": "IPageIVirtualAccountNotification"
      },
      "path": "/virtualAccount/notifications",
      "method": "patch"
    },
    {
      "specification": "Implements retrieval of individual notification event record from 'virtual_account_notifications' by primary UUID. Used by admins for troubleshooting failed notifications, reviewing delivery status, or customer service inquiries. May include cross-references to template/channel for admin UX. Sensitive status/context requires permission checks.",
      "description": "Retrieves a single notification event object from the 'virtual_account_notifications' table, identified by UUID. The response details its type, delivery status/timestamps, recipient metadata, template/channel linkage, and status history. Supports in-depth inspection of notification life cycle (sent, delivered, failed, retry...) for audit or customer support.\n\nSpecial care must be taken to restrict access to sensitive delivery info (such as recipient and delivery status). If event is not found, respond with 404. If forbidden by role/RBAC, return 403. Integrates with hierarchical/reference endpoints for notification templates/channels as needed by the dashboard.",
      "summary": "Retrieve single notification event record (virtual_account_notifications) by ID for inspection.",
      "parameters": [
        {
          "name": "id",
          "description": "Target notification event UUID to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Detailed notification event record.",
        "typeName": "IVirtualAccountNotification"
      },
      "path": "/virtualAccount/notifications/{id}",
      "method": "get"
    },
    {
      "specification": "Implements creation of a new notification event record in 'virtual_account_notifications', either by system jobs (auto-alerts) or by authorized admin/scheduler. Required for custom/manual notification triggers and reflow scenarios. Validates core required fields: template id, channel id, recipient id, event type, initial status, requested_at. Returns created event log.",
      "description": "Creates a new notification event in the 'virtual_account_notifications' table. Typically used by backend notification processors (upon deposit events, expiration, failed payments, etc) or by admin panel to forcibly trigger manual/customer notifications. Required fields: notification_template_id, notification_channel_id, recipient_id, event_type, status, requested_at; sent_at/delivered_at are later filled in by async processes or admin overrides.\n\nStrict validation ensures each field is correct; RBAC controls limit who may create notifications (manual triggers may be restricted to admin roles). Duplicate/invalid data (nonexistent template/channel/recipient) must be handled as per conventions. Upon success, the full event object is returned, suitable for log display/audit needs.",
      "summary": "Create a new notification event (virtual_account_notifications) for system or manual triggers.",
      "parameters": [],
      "requestBody": {
        "description": "Creation data for notification event (includes template/channel/recipient IDs and metadata)",
        "typeName": "IVirtualAccountNotification.ICreate"
      },
      "responseBody": {
        "description": "Created notification event object.",
        "typeName": "IVirtualAccountNotification"
      },
      "path": "/virtualAccount/notifications",
      "method": "post"
    },
    {
      "specification": "Implements updating a notification event record in 'virtual_account_notifications', allowing admins to change event state/classification/context after issue investigation, or for retry/reflow scenarios. Supports editing status (e.g., mark as DELIVERED/FAILED), changing template reference, or updating delivery data. Full audit required for changes. RBAC required.",
      "description": "Updates a notification event record identified by UUID in 'virtual_account_notifications'. Admin users (with RBAC permission) may change event status, update recipient references, revise template/channel associations, record revised status timestamps, or provide richer troubleshooting/context fields as needed. Mutations are limited to mutable fields (status, sent_at, delivered_at, etc); identity fields are never changed.\n\nEvery update must trigger audit log entries for compliance. Standard error handling applies (404 for not found, 403 if not authorized, 409 on invalid state transitions). RBAC enforcement restricts sensitive status updates to appropriate roles, e.g., forced DELIVERED or retry scenarios are reserved for system or super-admin.",
      "summary": "Update a notification event record (virtual_account_notifications) - status/classification/context update by admin.",
      "parameters": [
        {
          "name": "id",
          "description": "Target notification event UUID to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields permitted to update on notification event (status, context, template/channel, times).",
        "typeName": "IVirtualAccountNotification.IUpdate"
      },
      "responseBody": {
        "description": "Updated notification event object.",
        "typeName": "IVirtualAccountNotification"
      },
      "path": "/virtualAccount/notifications/{id}",
      "method": "put"
    },
    {
      "specification": "Implements hard deletion (or tumbling/tombstone) for notification event records in 'virtual_account_notifications' by primary key. Used for initial test cleanup, legal erasure, or admin audit fix-up. Strict RBAC: usually restricted to super-admins. Full audit and cascade logic for related logs required. Responds with deleted object or status.",
      "description": "Deletes a notification event record from 'virtual_account_notifications' by UUID. Used rarely—mostly in compliance with data erasure policies, test data cleanup, or system admin audit fixes. The endpoint is protected by strong RBAC, and full audit logging of deletion actions is required for traceability. Cascade or denial must be handled for dependent log/event rows as per business logic (might restrict deletion if log history exists).\n\nResponds with the deleted object or a status/confirmation message. Fails with 404 if not found, 403 if not authorized. All deletions should be idempotent and fully logged for security/compliance.",
      "summary": "Delete a notification event record (virtual_account_notifications) by ID with audit and RBAC enforcement.",
      "parameters": [
        {
          "name": "id",
          "description": "Target notification event UUID to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Confirmation of deletion or deleted notification object.",
        "typeName": "IVirtualAccountNotification"
      },
      "path": "/virtualAccount/notifications/{id}",
      "method": "delete"
    },
    {
      "specification": "Implements advanced search/filtering/pagination for notification template records in 'virtual_account_notification_templates'. Used by admin panel to browse templates per channel/type/status/locale/version for management and preview UI. Highly referenced for notification configuration/change workflows. Paging, text search, filtering by channel, active flag, language, etc.",
      "description": "Lists and searches notification templates from 'virtual_account_notification_templates', with support for advanced filtering by template code, channel type, title, is_active, language, and version. Used by admins in the notification configuration/management panel.\n\nSupports advanced search (by code/name), filtering, paging, and sorting for scalable admin UX. Access must be RBAC-controlled to restrict who can manage or preview template configurations (typically admins or system integrators). Results may be joined with notification event/channel APIs for contextual admin dashboard screens. Query validation and performance safeguards (limits, allowed sorts) are strongly advised.",
      "summary": "List/search notification templates (virtual_account_notification_templates) with advanced filtering for admin UI.",
      "parameters": [],
      "requestBody": {
        "description": "Template search criteria, pagination options, and filtering parameters.",
        "typeName": "IVirtualAccountNotificationTemplate.IRequest"
      },
      "responseBody": {
        "description": "Paginated notification template search result objects.",
        "typeName": "IPageIVirtualAccountNotificationTemplate"
      },
      "path": "/virtualAccount/notificationTemplates",
      "method": "patch"
    },
    {
      "specification": "Implements retrieval of an individual notification template record from 'virtual_account_notification_templates' by UUID. Used by admin panels or system processes to view template config, manage edit workflows, or audit version and usage. Exposes all config/content fields for template preview/management.",
      "description": "Retrieves a notification template object from 'virtual_account_notification_templates' by its unique identifier (UUID primary key). Includes all data needed for preview or edit: template_code, channel_type, title, body_format, body_template, language_code, version, is_active, plus relevant relational references. Supports admin workflows for notification management, version audit, and cross-reference with past notification events.\n\nRBAC ensures only authorized admins/super-admins have access to view/modify template content. Returns 404 if template not found, or 403 if forbidden. May be referenced by GET/list endpoints for templates or notification integration panels.",
      "summary": "Retrieve a notification template record (virtual_account_notification_templates) by ID for admin or system preview/audit.",
      "parameters": [
        {
          "name": "id",
          "description": "Target notification template UUID to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Notification template detail object.",
        "typeName": "IVirtualAccountNotificationTemplate"
      },
      "path": "/virtualAccount/notificationTemplates/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new notification template. This is for managing message formatting/content structure for various notification events (e.g. 입금 알림, 만료 알림)의 템플릿을 추가합니다. This operation uses the 'virtual_account_notification_templates' Prisma table, which stores message template details for different channels and events, allowing multi-channel and multi-language support. Must include atomic data such as template_code, channel_type, title, format, and a message body with placeholders. Enforces the ability to add new templates for use in notification events.",
      "description": "This API operation creates a new notification template in the 'virtual_account_notification_templates' table, supporting requirements for 관리되는 다국어/다채널 알림 템플릿 추가. Templates define format, channel (e.g., kakao/email/sms), subject, body (with variables), language, and active status for use in virtual_account_notifications and downstream event logic.\n\nSecurity: Only admin users with permission to manage notification templates can use this operation. Traceability and audit are enforced by logging every change through admin activity logs. Validation includes uniqueness for template_code/channel_type/language/version and required atomic fields.\n\nUses: Allows system to flexibly add new types of event-driven notifications. Error responses for duplicate keys or malformed requests are defined. Related APIs: modify or delete template, event notification creation that references templates.",
      "summary": "Create a notification template (virtual_account_notification_templates).",
      "parameters": [],
      "requestBody": {
        "description": "Creation info of the notification template.",
        "typeName": "IVirtualAccountNotificationTemplate.ICreate"
      },
      "responseBody": {
        "description": "Created notification template object.",
        "typeName": "IVirtualAccountNotificationTemplate"
      },
      "path": "/virtualAccount/notificationTemplates",
      "method": "post"
    },
    {
      "specification": "Modifies an existing notification template by ID. Updates atomic properties such as title, body, format, language, or enabled status. Uses the 'virtual_account_notification_templates' Prisma table, enforcing version and uniqueness constraints. Used for changing notification message templates without deleting or duplicating records. Key for maintaining up-to-date contents for various notification events.",
      "description": "This API operation updates an existing notification template by the specified unique ID. It references the 'virtual_account_notification_templates' table and changes properties such as title, notification channel, template body, language, or version based on admin input.\n\nSecurity/Permissions: Only authorized admins may modify templates, and every modification must be audited in admin activity logs for compliance. Validation: The operation must check that the new values do not duplicate an existing template on unique constraints (e.g., template_code/channel_type/language/version). Any update triggers an updated_at timestamp for the template record.\n\nRelated APIs: template creation, deletion, notification event creation using updated template.",
      "summary": "Update a notification template (virtual_account_notification_templates).",
      "parameters": [
        {
          "name": "id",
          "description": "Target notification template's ID.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Update information for the notification template.",
        "typeName": "IVirtualAccountNotificationTemplate.IUpdate"
      },
      "responseBody": {
        "description": "Updated notification template object.",
        "typeName": "IVirtualAccountNotificationTemplate"
      },
      "path": "/virtualAccount/notificationTemplates/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes a notification template by unique ID, removing it from future event usage but not erasing notification history. Performed against the 'virtual_account_notification_templates' Prisma table, enforcing integrity: templates cannot be deleted if in use by live notifications, otherwise the record is soft/hard deleted.",
      "description": "This API operation deletes a notification template identified by its unique ID from the 'virtual_account_notification_templates' table. Before deletion, checks are performed to ensure the template is not referenced by any active/pending notification events, upholding referential integrity and preventing accidental loss of critical templates.\n\nSecurity/Permissions: Only admins with sufficient authority may perform deletion, and all deletions are logged via admin activity logs. Validation: Attempts to delete in-use templates result in an error; otherwise, the record is (soft) deleted and not available for new notifications.\n\nRelated APIs: listing templates, creating new templates, updating and auditing template usage.",
      "summary": "Delete a notification template (virtual_account_notification_templates).",
      "parameters": [
        {
          "name": "id",
          "description": "Target notification template's ID.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Deleted notification template object or confirmation.",
        "typeName": "IVirtualAccountNotificationTemplate"
      },
      "path": "/virtualAccount/notificationTemplates/{id}",
      "method": "delete"
    },
    {
      "specification": "Retrieves a list of notification channels with filtering and searching support, for admin UX and channel management. Operates on the 'virtual_account_notification_channels' Prisma table, allowing admins to see current status, type, display name, and configuration of channels (e.g., kakao, email). Used in dashboards and notifications configuration.",
      "description": "This API operation lists notification channels with support for filtering (by channel type, status) and search for admin dashboard/configuration. Pulls from the 'virtual_account_notification_channels' table, including basic channel info, display name, whether it's active, and settings.\n\nSecurity: Authenticated admin only. Validation: Accepts paging/search/filter params. Does not expose credential value fields; only shows safe configuration details. Used to manage/add/edit available notification channels for notifications and template linkage. Error handling for access and malformed query included.",
      "summary": "List notification channels (virtual_account_notification_channels).",
      "parameters": [],
      "requestBody": {
        "description": "Request params for channel listing, including filters/search/sort.",
        "typeName": "IVirtualAccountNotificationChannel.IRequest"
      },
      "responseBody": {
        "description": "Paginated list of notification channels.",
        "typeName": "IPageIVirtualAccountNotificationChannel"
      },
      "path": "/virtualAccount/notificationChannels",
      "method": "patch"
    },
    {
      "specification": "Retrieves a notification channel by unique ID, exposing information needed for admin configuration and usage in notifications. Uses the 'virtual_account_notification_channels' Prisma table, returning atomic channel detail and safe metadata without exposing secrets. Used for managing and editing channels.",
      "description": "This API operation retrieves detailed notification channel information by its unique ID from the 'virtual_account_notification_channels' table. Includes properties such as channel type, display name, active status, and configuration details needed by admin users for notification setup and diagnosis.\n\nSecurity: Admin login required. Only safe configuration details (not plaintext credentials/secrets) are exposed so as not to compromise channel security. Validation includes UUID format and existence. Errors are returned on not-found or invalid access.\n\nRelated: channel list, add channel, update channel.",
      "summary": "Get a notification channel by ID (virtual_account_notification_channels).",
      "parameters": [
        {
          "name": "id",
          "description": "Target notification channel's ID.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Notification channel object.",
        "typeName": "IVirtualAccountNotificationChannel"
      },
      "path": "/virtualAccount/notificationChannels/{id}",
      "method": "get"
    },
    {
      "specification": "Adds a new notification channel, such as KakaoTalk, email, SMS, or others, to the notification infrastructure. Operates on the 'virtual_account_notification_channels' Prisma table, enabling admin users to configure new physical or logical channels for use in notification events and templates.",
      "description": "This API operation creates a new notification channel, inserting a row into 'virtual_account_notification_channels' with configuration info (channel_type, display_name, active flag, and settings). Used to expand system support for new messaging channels.\n\nSecurity: Admin-only with permission to add notification channels. Validation: Channel type must be unique, settings must pass integration/credentials checks, channel status is set active/inactive as per admin input. All changes are audit-logged. Error responses for duplicates or validation failures are included.\n\nRelated APIs: channel listing, channel update, deletion, and template management.",
      "summary": "Create a new notification channel (virtual_account_notification_channels).",
      "parameters": [],
      "requestBody": {
        "description": "Creation info of the notification channel.",
        "typeName": "IVirtualAccountNotificationChannel.ICreate"
      },
      "responseBody": {
        "description": "Created notification channel object.",
        "typeName": "IVirtualAccountNotificationChannel"
      },
      "path": "/virtualAccount/notificationChannels",
      "method": "post"
    },
    {
      "specification": "Updates notification channel information by unique ID for logical or physical attributes (e.g., display name, status, configuration/settings). Operates on the 'virtual_account_notification_channels' Prisma table, enforcing unique channel type. Used for admin management of notification infra and troubleshooting.",
      "description": "This API operation updates an existing notification channel by unique ID, modifying fields such as display name, active status, or settings_json in the 'virtual_account_notification_channels' table.\n\nSecurity: Admin-only with sufficient roles/permissions to edit notification infra. All changes are audit logged for compliance. Input validation for e.g. new display name, updated channel settings; rejects changes that would violate unique or safety requirements.\n\nRelated APIs: channel creation, deletion, channel listing.",
      "summary": "Update a notification channel (virtual_account_notification_channels).",
      "parameters": [
        {
          "name": "id",
          "description": "Target notification channel's ID.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Update information for the notification channel.",
        "typeName": "IVirtualAccountNotificationChannel.IUpdate"
      },
      "responseBody": {
        "description": "Updated notification channel object.",
        "typeName": "IVirtualAccountNotificationChannel"
      },
      "path": "/virtualAccount/notificationChannels/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes a notification channel from the system by unique ID, removing it from channel listing and preventing future notification use. Operates against the 'virtual_account_notification_channels' Prisma table. Before deletion, ensures the channel is not actively used by live notifications. Used for hygiene in admin dashboard.",
      "description": "This API operation deletes a notification channel identified by unique ID from the 'virtual_account_notification_channels' table. Validation ensures the channel is not currently referenced in pending/active notifications or templates. If safe, the record is deleted (usually soft-disabled or removed).\n\nSecurity: Only admins with the requisite authority may delete channels; action is always audit logged. Error handling: Fails gracefully if channel in use, with appropriate message. Related: listing, add, update notification channel.",
      "summary": "Delete a notification channel (virtual_account_notification_channels).",
      "parameters": [
        {
          "name": "id",
          "description": "Target notification channel's ID.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Deleted notification channel object or confirmation.",
        "typeName": "IVirtualAccountNotificationChannel"
      },
      "path": "/virtualAccount/notificationChannels/{id}",
      "method": "delete"
    },
    {
      "specification": "Lists notification event logs with filtering, search, and paging support, typically for administrators to review alert/delivery histories and troubleshooting. Operates on the 'virtual_account_notification_event_logs' Prisma table, supporting rich queries by status, time, notification, etc.",
      "description": "This API operation returns a paginated, filtered list of notification event logs from the 'virtual_account_notification_event_logs' table. Used by administrators for notification tracing, troubleshooting, audit, and dashboard statistics.\n\nSecurity: Admin login required. Input validation includes paging, sorting, filter (status, period, notification, etc). No notification message secrets are returned, only safe log status/detail and audit information. Used with event and template review workflows. Error handling for query errors and permission validation is included.",
      "summary": "List notification event logs (virtual_account_notification_event_logs).",
      "parameters": [],
      "requestBody": {
        "description": "Request params for notification event log listing, including filters/search/sort.",
        "typeName": "IVirtualAccountNotificationEventLog.IRequest"
      },
      "responseBody": {
        "description": "Paginated list of notification event logs.",
        "typeName": "IPageIVirtualAccountNotificationEventLog"
      },
      "path": "/virtualAccount/notificationEventLogs",
      "method": "patch"
    },
    {
      "specification": "Fetches a notification event log by unique ID, shows full audit details for troubleshooting or review. This operation uses the 'virtual_account_notification_event_logs' Prisma table, returning atomic event log record for review.",
      "description": "This API operation retrieves a single notification event log detail, identified by unique ID, from the 'virtual_account_notification_event_logs' table. Shows information about delivery status, event detail, and log time for auditing or investigation.\n\nSecurity: Admin access required. Validation includes UUID and record existence checks. Returns error if log does not exist or if unauthorized. Used with troubleshooting and enterprise logging features. Related: event log listing, notification event review.",
      "summary": "Get a notification event log by ID (virtual_account_notification_event_logs).",
      "parameters": [
        {
          "name": "id",
          "description": "Target notification event log's ID.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Notification event log object.",
        "typeName": "IVirtualAccountNotificationEventLog"
      },
      "path": "/virtualAccount/notificationEventLogs/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new notification event log for a notification delivery attempt. This is for explicit event-logging by administrators or system processes. Targets the 'virtual_account_notification_event_logs' Prisma table and allows audit logging with status and optional detail.",
      "description": "This API operation inserts a new event log row into the 'virtual_account_notification_event_logs' table. Used for manually or programmatically logging notification delivery attempts or status (such as sent, failed, bounced, retried) by the admin system.\n\nSecurity: Admin or system process with notification event log permission required. All logs stored atomically with required fields. Validation checks for actual notification event FK and standardized status values. Results are visible in log listing and detail APIs. Related: event log list, notification event review.",
      "summary": "Create a notification event log (virtual_account_notification_event_logs).",
      "parameters": [],
      "requestBody": {
        "description": "Creation info of the notification event log.",
        "typeName": "IVirtualAccountNotificationEventLog.ICreate"
      },
      "responseBody": {
        "description": "Created notification event log object.",
        "typeName": "IVirtualAccountNotificationEventLog"
      },
      "path": "/virtualAccount/notificationEventLogs",
      "method": "post"
    },
    {
      "specification": "Modifies an existing notification event log by unique ID, allowing to update status, detail, or other audit fields. Operates on 'virtual_account_notification_event_logs' table. Used for post-hoc correction or additional info annotation by admins.",
      "description": "This API operation updates a notification event log by unique ID in 'virtual_account_notification_event_logs'. Used for admin-side audit log correction, annotation of delivery attempt details, or status rectification.\n\nSecurity: Admin access required. Validation includes UUID, existence, and allowed status transitions. Results visible on subsequent API calls and audit review. Related: listing, event creation, event review APIs.",
      "summary": "Update a notification event log (virtual_account_notification_event_logs).",
      "parameters": [
        {
          "name": "id",
          "description": "Target notification event log's ID.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Update information for the notification event log.",
        "typeName": "IVirtualAccountNotificationEventLog.IUpdate"
      },
      "responseBody": {
        "description": "Updated notification event log object.",
        "typeName": "IVirtualAccountNotificationEventLog"
      },
      "path": "/virtualAccount/notificationEventLogs/{id}",
      "method": "put"
    },
    {
      "specification": "Implements DELETE operation for deleting a notification event log by id, associated with the virtual_account_notification_event_logs table. This API removes a single notification event log resource based on its unique identifier. Ensures auditability and proper cleanup of per-notification event logs, strictly tied to atomic notification audit records (no cascading deletes to notification events themselves). Should be used for admin dashboard or log review clean-up operations. Path parameter 'id' is required, uniquely identifying the log to be deleted. Access control required for admin roles only.",
      "description": "This operation deletes a notification event log entry from the virtual_account_notification_event_logs table, identified by its unique log ID. This log table implements the audit and event tracking requirements for notification delivery attempts (see ERD and requirements: per-attempt audit and troubleshooting is critical for operations). Deleting a log is an administrative action—allowed only for roles with notification log management permissions.\n\nThe operation requires the path parameter 'id', matching the log's primary key. Deletion is permanent and does not cascade to the parent notification event or template. If the entry does not exist, a 404 must be returned. All deletion requests should be logged in the admin activity log for traceability. Any unauthorized or failed attempt should return a 403 or 500 error as appropriate.\n\nThe response confirms deletion. No content is returned on success (HTTP 204), and all attempts are audited for compliance. Related to endpoints for GET/PUT on the same resource. Soft delete is not implemented; record is physically removed.",
      "summary": "Delete a notification event log by ID (virtual_account_notification_event_logs)",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the notification event log to delete",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": null,
      "path": "/virtualAccount/notificationEventLogs/{id}",
      "method": "delete"
    },
    {
      "specification": "Implements PATCH operation on the virtual_account_audit_logs entity to retrieve a filtered, paginated list of audit logs with complex search, date range, and filter parameters. Used for dashboard, admin, and compliance query/reporting.",
      "description": "Retrieves a list of audit logs from the virtual_account_audit_logs table, with support for pagination, keyword/date filtering, actor/target filtering, and sorting. The audit logs table implements system-wide action tracking for admin, customer, and system actions (see requirements and 07_virtual_account_security.md). This endpoint is essential for audit, compliance, and dashboard analysis.\n\nThe endpoint accepts a JSON request body specifying filter criteria: actor ID/type, event type, date ranges, target type, and keyword search. Paginated response includes relevant logs (with actor, event, target, timestamp, and description). Access restricted to authorized admin/compliance roles. Results may be sorted by date or event type. All access to this endpoint is itself audited.\n\nThe response is a page of audit logs with pagination metadata. 403 returned for unauthorized access. 422 for invalid filter parameters. Related endpoints: GET/PUT/DELETE single log, and PATCH with different filters.",
      "summary": "Retrieve filtered, paginated list of audit logs (virtual_account_audit_logs)",
      "parameters": [],
      "requestBody": {
        "description": "Filter and search criteria for paginated audit log retrieval",
        "typeName": "IVirtualAccountAuditLog.IRequest"
      },
      "responseBody": {
        "description": "Paginated list of audit logs matching the search parameters",
        "typeName": "IPageIVirtualAccountAuditLog"
      },
      "path": "/virtualAccount/auditLogs",
      "method": "patch"
    },
    {
      "specification": "Implements GET operation for retrieving a specific audit log by its ID (virtual_account_audit_logs). Used for compliance and detail view in admin dashboard.",
      "description": "Fetches a single audit log record from the virtual_account_audit_logs table using the provided audit log ID. The audit log entity is used for tracking all sensitive actions and changes in the system, as required for compliance and forensic audit (see requirements and 07_virtual_account_security.md).\n\nPath parameter 'id' is required and must match the audit log primary key. The response includes all properties of the audit log entity (actor, event type, timestamp, description, etc). Endpoint is access controlled for admin/compliance/audit roles. 404 is returned if no matching log is found. 403 returned for insufficient permissions. Related endpoints: PATCH for list, PUT/DELETE for the same log.",
      "summary": "Get a specific audit log by ID (virtual_account_audit_logs)",
      "parameters": [
        {
          "name": "id",
          "description": "Audit log entry ID to retrieve",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Audit log entry with all details",
        "typeName": "IVirtualAccountAuditLog"
      },
      "path": "/virtualAccount/auditLogs/{id}",
      "method": "get"
    },
    {
      "specification": "Implements POST operation for creating a new audit log entry in virtual_account_audit_logs. Used by system components to record actions/events for compliance and admin monitoring.",
      "description": "Creates a new audit log entry in virtual_account_audit_logs to record an administrative, user, or system action. This is used extensively for security, compliance, and traceability (see requirements and 07_virtual_account_security.md). The request body must provide all necessary fields such as actor_id/type, event_type, target_type/id, description, and occurred_at.\n\nSuccessful creation returns the created audit log object. Errors (validation, lack of permission) are reported as 422/403. Only authorized system components and admin users can invoke this endpoint. All write actions are themselves logged to ensure complete traceability. Related endpoints: PATCH/GET/PUT/DELETE for listing and updating audit logs.",
      "summary": "Create a new audit log (virtual_account_audit_logs)",
      "parameters": [],
      "requestBody": {
        "description": "Audit log creation payload",
        "typeName": "IVirtualAccountAuditLog.ICreate"
      },
      "responseBody": {
        "description": "Created audit log entry",
        "typeName": "IVirtualAccountAuditLog"
      },
      "path": "/virtualAccount/auditLogs",
      "method": "post"
    },
    {
      "specification": "Implements PUT operation for updating an existing audit log entry in virtual_account_audit_logs. Allows administrative correction or metadata enrichment of audit records for compliance.",
      "description": "Updates a single audit log entry in the virtual_account_audit_logs table, identified by its unique ID (path parameter). The payload allows updating certain mutable properties (such as description, result, or meta fields as permitted by policy), but primary audit identifiers (actor, event_type, occurred_at) must remain immutable for compliance integrity. This endpoint is admin-only and subject to careful use (all updates must themselves be logged).\n\nIf entry not found, returns 404. If update not permitted, returns 403. Successfully updating returns the new audit log object. Related endpoints: PATCH for list, GET/DELETE for the same log.",
      "summary": "Update an existing audit log entry by ID (virtual_account_audit_logs)",
      "parameters": [
        {
          "name": "id",
          "description": "Audit log entry ID to update",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Update payload for audit log entry",
        "typeName": "IVirtualAccountAuditLog.IUpdate"
      },
      "responseBody": {
        "description": "Updated audit log entry",
        "typeName": "IVirtualAccountAuditLog"
      },
      "path": "/virtualAccount/auditLogs/{id}",
      "method": "put"
    },
    {
      "specification": "Implements DELETE operation for removing a single audit log entry by ID (virtual_account_audit_logs). Used for authorized admin clean-up and log rotation.",
      "description": "Deletes a single audit log entry from virtual_account_audit_logs, identified by its unique ID. This entity is used for system-wide action/audit-trail as required by requirements and 07_virtual_account_security.md. Only authorized admin or compliance users may delete logs; all deletions are themselves audit logged.\n\nLog deletion is permanent and should never cascade to other entities. If the log does not exist, a 404 is returned. A successful deletion returns HTTP 204 (no content). Permission errors return 403. Related endpoints: PATCH/GET/PUT for the same log, and audit/admin action logging.",
      "summary": "Delete an audit log entry by ID (virtual_account_audit_logs)",
      "parameters": [
        {
          "name": "id",
          "description": "Audit log entry ID to delete",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": null,
      "path": "/virtualAccount/auditLogs/{id}",
      "method": "delete"
    },
    {
      "specification": "Implements PATCH operation to list security logs (virtual_account_security_logs) with support for filtering, date range, sorting, and pagination. Serves admin dashboard and audit/compliance queries.",
      "description": "Retrieves a list of security logs from the virtual_account_security_logs table, supporting paginated results, multi-field filtering (event_type, actor, resource), date range, and sorting. This entity implements system/integration/user security incident tracking as required across requirements (07_virtual_account_security.md, admin dashboard, notification logs).\n\nThe request body defines filter criteria and pagination (date, actor_id, actor_type, event_type, resource_type, resource_id, keyword). The endpoint is access-controlled for authorized admin/compliance users. 403 for permission denied, 422 for invalid filter specs. Results in response include full log details and pagination metadata. Related endpoints: GET/PUT/DELETE single log entry.",
      "summary": "List and search security logs (virtual_account_security_logs)",
      "parameters": [],
      "requestBody": {
        "description": "Filtering and pagination criteria for security log retrieval",
        "typeName": "IVirtualAccountSecurityLog.IRequest"
      },
      "responseBody": {
        "description": "Page of security log entries matching filters",
        "typeName": "IPageIVirtualAccountSecurityLog"
      },
      "path": "/virtualAccount/securityLogs",
      "method": "patch"
    },
    {
      "specification": "Implements GET operation to retrieve a specific security log entry by ID (virtual_account_security_logs). For detail/audit view by admins/compliance.",
      "description": "Fetches a single security log entry from the virtual_account_security_logs table by unique ID. Used in detail view for admin/compliance dashboards.\n\nPath parameter 'id' must match a unique security log. Returns all details (event_type, actor info, resource, timestamp, etc). 404 returned if entry is missing. Strictly access-controlled to admin/compliance users. Related endpoints: PATCH (list), PUT/DELETE for same entity.",
      "summary": "Get a specific security log by ID (virtual_account_security_logs)",
      "parameters": [
        {
          "name": "id",
          "description": "Security log entry ID to retrieve",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Security log entry with all properties",
        "typeName": "IVirtualAccountSecurityLog"
      },
      "path": "/virtualAccount/securityLogs/{id}",
      "method": "get"
    },
    {
      "specification": "Implements POST operation for creating a new security log entry (virtual_account_security_logs) for all tracked incidents: login failure, 2fa, api, unauthorized access, etc. Used by system components and admin activity.",
      "description": "Creates a new security log entry in the virtual_account_security_logs table to record a system or user security event, based on requirements for audit/functions in 07_virtual_account_security.md. The request body must specify all required fields: actor, event_type, resource, detail, and occurred_at. Used by admin users and system security modules.\n\nWrite errors (validation/permission) result in 422/403. Success returns the created log with all fields. All insertions are themselves audited in the admin action log. Related endpoints: PATCH (list), GET/PUT/DELETE single log.",
      "summary": "Create a new security log entry (virtual_account_security_logs)",
      "parameters": [],
      "requestBody": {
        "description": "Security log creation details",
        "typeName": "IVirtualAccountSecurityLog.ICreate"
      },
      "responseBody": {
        "description": "Created security log entry",
        "typeName": "IVirtualAccountSecurityLog"
      },
      "path": "/virtualAccount/securityLogs",
      "method": "post"
    },
    {
      "specification": "Implements PUT operation for updating a specific security log entry by ID (virtual_account_security_logs). Allows administrative correction of details/metadata where policy permits.",
      "description": "Updates an existing security log entry in the virtual_account_security_logs table, identified by its unique ID. Only permitted fields (e.g., detail, description, result) may be updated as per security policy. action_type, occurred_at, actor_id/type, and event_type must NOT be mutable for compliance integrity.\n\nEntry not found returns 404. Permission error returns 403. Update success returns new log object. All update actions are themselves recorded in admin action log. Related endpoints: PATCH (list), GET/DELETE for the same log entry.",
      "summary": "Update a security log entry by ID (virtual_account_security_logs)",
      "parameters": [
        {
          "name": "id",
          "description": "Security log ID to update",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields to update in security log entry",
        "typeName": "IVirtualAccountSecurityLog.IUpdate"
      },
      "responseBody": {
        "description": "Updated security log entry",
        "typeName": "IVirtualAccountSecurityLog"
      },
      "path": "/virtualAccount/securityLogs/{id}",
      "method": "put"
    },
    {
      "specification": "Implements DELETE operation to remove a single security log entry by unique ID from virtual_account_security_logs. Used for compliance cleanup and admin log rotation.",
      "description": "Deletes a single security log entry from the virtual_account_security_logs table. Used for security event and incident log audit clean-up, per compliance/policy. Admin or compliance roles only permitted; all deletions logged in admin activities.\n\nDeletion is hard and does not affect other logs. 404 is returned if the ID is missing. HTTP 204 on success, 403 if permission denied. Related endpoints: PATCH (list), GET/PUT for single log.",
      "summary": "Delete a security log entry by ID (virtual_account_security_logs)",
      "parameters": [
        {
          "name": "id",
          "description": "Security log ID to delete",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": null,
      "path": "/virtualAccount/securityLogs/{id}",
      "method": "delete"
    },
    {
      "specification": "Implements PATCH operation to retrieve external system definitions with search, status filter, pagination, and sorting from the virtual_account_external_systems table. Used in admin/backoffice system integration management.",
      "description": "Fetches a paginated, filterable list of external system definitions (ERP, MALL, BANK/PG) from the virtual_account_external_systems table. Supports filtering by type, name, enabled status, and keyword; implements requirements for integration management and admin dashboard as described in specifications section 4.2/4.3/4.5. Only includes atomic entity data, no joined external results.\n\nAdmin-only access with strong permission controls. Returns paged list including system details (id, type, name, api_base_url, enabled, created/updated_at). Related endpoints: POST/PUT/DELETE/GET single integration. 403 for unauthorized, 422 for invalid filters.",
      "summary": "List/search/filter external systems (virtual_account_external_systems)",
      "parameters": [],
      "requestBody": {
        "description": "Request filter and pagination for external system listing",
        "typeName": "IVirtualAccountExternalSystem.IRequest"
      },
      "responseBody": {
        "description": "Page of external system definitions",
        "typeName": "IPageIVirtualAccountExternalSystem"
      },
      "path": "/virtualAccount/externalSystems",
      "method": "patch"
    },
    {
      "specification": "This operation retrieves a specific external system configuration by its unique identifier. It provides all configuration, connection, and status data for a given integration target. This is based on the 'virtual_account_external_systems' Prisma table, which represents ERP, Mall, Bank, or PG external system registrations for integration and audit. Used when admins want to view/edit test a single system, see settings, or audit a system's details.",
      "description": "This API allows administrators to retrieve the complete details for a single external integration system by its ID. The endpoint returns information including the type (ERP, MALL, BANK, PG), the display name, API base URL, enabled status, and timestamps for creation and last update. These details are critical for testing connectivity, verifying credentials, or preparing updates.\n\nSecurity is enforced (only privileged admins or super_admin can access it), and all queries are subject to role-based access control as defined in the requirements. Data returned matches the normalized structure outlined in schema—no sensitive secrets, only non-secret meta and status/config. The endpoint supports integration with other API calls for editing, enabling/disabling, or deleting the system record.\n\nIf the ID is invalid or the user does not have permission, appropriate error codes are returned (404 for not found, 403 for insufficient privilege, 401 for missing authentication, 500 for DB issues).",
      "summary": "Get a single external system configuration by ID (virtual_account_external_systems table).",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the external system to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Full details of external system configuration.",
        "typeName": "IVirtualAccountExternalSystems"
      },
      "path": "/virtualAccount/externalSystems/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new external system registration used for ERP, Mall, Bank, or PG integrations. Maps directly to the 'virtual_account_external_systems' Prisma table. Guarantees a single row per system, normalizing configuration data and enabling external event logging, API integration, and admin management.",
      "description": "This endpoint allows administrators to register new external system integrations (such as an ERP, e-commerce platform, bank, or payment gateway) into the platform. All required fields—system_type (one of: ERP, MALL, BANK, PG), name, api_base_url, enabled (boolean), and initial timestamp—must be provided. Business rules are applied for system_type/name uniqueness (see @@unique([system_type, name]) in schema), and URLs/config are validated for correctness.\n\nSecurity is enforced (admin/super_admin role only), and the operation is fully audited (triggers creation event in both audit and admin logs). Validation ensures no duplicate system registration and prevents insertion of incomplete or inconsistent data. Related logs and future integration event logs reference this newly created system by ID.\n\nAPI returns the created external system row (excluding any sensitive keys/secrets). Returns HTTP errors for validation failures, duplicates, permission errors, or unexpected issues (400, 409, 401/403, 500, respectively).",
      "summary": "Register a new external system configuration for integration (virtual_account_external_systems table).",
      "parameters": [],
      "requestBody": {
        "description": "Details for the new external system to register.",
        "typeName": "IVirtualAccountExternalSystems.ICreate"
      },
      "responseBody": {
        "description": "Created external system row.",
        "typeName": "IVirtualAccountExternalSystems"
      },
      "path": "/virtualAccount/externalSystems",
      "method": "post"
    },
    {
      "specification": "Updates a specific external system configuration in the 'virtual_account_external_systems' table. Used to modify system settings or metadata for ERP, Mall, Bank, or PG integrations. Requires valid UUID, privileges, and validated payload. Enforces data integrity and schema constraints as per Prisma definition.",
      "description": "This API modifies the settings or properties of an already-registered external system. Admins can edit fields such as the display name, API base URL, enabled status, or update timestamps. Unique constraints (type/name), correct URL format, and boolean flags are enforced by business logic and the underlying database model.\n\nSecurity: Only privileged admin roles may perform this update; audit logs/notices are triggered upon modification for compliance. This operation is used as part of the admin's dashboard integration management. It is not permitted to change primary keys or to insert duplicates; unique constraints are checked before and after the update.\n\nErrors are returned for nonexistent IDs (404), invalid payloads or conflicts (400/409), insufficient privileges (403), or unexpected failures (500). The response returns the new state of the external system (with updated fields).",
      "summary": "Update configuration for an external system (virtual_account_external_systems table).",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the external system to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Update data for the external system configuration.",
        "typeName": "IVirtualAccountExternalSystems.IUpdate"
      },
      "responseBody": {
        "description": "Updated external system row.",
        "typeName": "IVirtualAccountExternalSystems"
      },
      "path": "/virtualAccount/externalSystems/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes an external system registration from the system, removing its configuration and breaking references from integration logs, syncs, etc. Directly operates on 'virtual_account_external_systems' Prisma table. Only allows delete if no critical links are present; referential integrity and business logic enforced.",
      "description": "This API allows an administrator or super_admin to completely remove an external system configuration (ERP, Mall, Bank, PG) by its unique ID. Before deletion, integrity checks are performed: cannot delete a system referenced by existing non-archived integration logs or current sync processes. If allowed, all integration and sync events may be soft-linked (referenced as deleted system) or cascaded as per policy. The operation is fully audited (admin action log, audit record).\n\nSecurity policies: Only privileged admins may delete. Errors are returned for non-existent system, system in use (409), privilege failure (403), or other server errors (500). A successful response is a confirmation of deletion.",
      "summary": "Delete external system configuration (virtual_account_external_systems table).",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the external system to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Confirmation of deletion (usually deleted ID or status).",
        "typeName": "IVirtualAccountExternalSystems.IDeleteResult"
      },
      "path": "/virtualAccount/externalSystems/{id}",
      "method": "delete"
    },
    {
      "specification": "Retrieves a page of external integration event logs, supporting search, filtering, and pagination (PATCH operation with criteria in request body), based on the 'virtual_account_external_integration_logs' Prisma table. Used for admin review, troubleshooting, or audit of ERP, Mall, Bank, or PG system interactions.",
      "description": "This endpoint lets administrators retrieve a filtered and paginated list of external integration log events—each entry records API call events or data exchanges with external systems. The operation supports search by external_system_id, event_type, success/fail, and date range, with pagination (page/size) and sorted descent by time.\n\nUses request body for complex search conditions, as filtering involves non-trivial logic. Returned data includes integration event details (event_type, request and response payload, success flag, error, and timestamp) but omits sensitive data/secrets. Useful for troubleshooting, system audit, and compliance analysis. Security is based on RBAC roles defined in the requirements; only admins with appropriate privileges can view logs.\n\nErrors are returned for failed permission (403), invalid filters (400), or server/database issues (500).",
      "summary": "List or search external integration logs with filters/pagination (virtual_account_external_integration_logs).",
      "parameters": [],
      "requestBody": {
        "description": "Criteria for searching/listing integration logs.",
        "typeName": "IVirtualAccountExternalIntegrationLogs.IRequest"
      },
      "responseBody": {
        "description": "Paginated list of integration logs matching criteria.",
        "typeName": "IPageIVirtualAccountExternalIntegrationLogs"
      },
      "path": "/virtualAccount/externalIntegrationLogs",
      "method": "patch"
    },
    {
      "specification": "Retrieves a single external integration log event by its unique ID—located in the 'virtual_account_external_integration_logs' Prisma table. Used for per-event detail inspection, troubleshooting failed calls, or event audit.",
      "description": "This API retrieves one detailed record for a specific external integration event log, identified by ID. Typical data returned includes which external system, the event type (SYNC, PUSH, FAIL, etc), request data, response, error status/message, and timestamp. Crucial for debugging issues with ERP/Mall/Bank/PG integrations, and for compliance review of event outcomes.\n\nSecurity: Only privileged admin/super_admin actors are authorized for detail access. Direct links to referenced external system are included if present. Permissions, RBAC, and masking/sanitization of potentially sensitive fields are enforced as per requirements. If the log entry does not exist, a 404 error occurs; if access is denied, a 403 error. Audit log is written for access.\n\nReturns the normalized log entry as per the Prisma schema (no computed/denormalized aggregates).",
      "summary": "Get details of a single integration event log by ID (virtual_account_external_integration_logs table).",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the integration log event to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Full event log detail for the requested external integration event.",
        "typeName": "IVirtualAccountExternalIntegrationLogs"
      },
      "path": "/virtualAccount/externalIntegrationLogs/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new event log row recording an integration attempt or result to an external system (ERP, Mall, Bank, or PG). Added to the 'virtual_account_external_integration_logs' Prisma table. Used as part of async or synchronous processing pipelines for admin, external API, or automated service jobs.",
      "description": "This endpoint lets automated services, worker jobs, or authorized admins log new integration events as they occur—such as a sync to ERP, a webhook to Mall/PG, or a push to an external bank API. Each log records the target system, event type, request/response bodies, result (success/failure), error, and timestamps. Only meta (no secrets) are stored in request/response.\n\nSecurity: Auth is enforced; only system/automation users or properly privileged admins can insert logs. All business validations check referenced system's existence (by UUID), controlled event_type, and correct JSON formatting/limits. Operation is fully auditable and referenced by troubleshooting tools. Duplicates or inconsistent/incomplete postings result in HTTP errors.\n\nReturns newly created log row. Errors thrown for invalid system, payload, privilege, or unexpected faults (400/401/403/500).",
      "summary": "Create a new external integration event log (virtual_account_external_integration_logs table).",
      "parameters": [],
      "requestBody": {
        "description": "Data describing the new integration event log.",
        "typeName": "IVirtualAccountExternalIntegrationLogs.ICreate"
      },
      "responseBody": {
        "description": "Created integration log entry.",
        "typeName": "IVirtualAccountExternalIntegrationLogs"
      },
      "path": "/virtualAccount/externalIntegrationLogs",
      "method": "post"
    },
    {
      "specification": "Updates an event log for an external integration attempt (virtual_account_external_integration_logs table). Rarely used except by automated systems or for audit correction. Used for patching metadata (result, error, etc), but never to insert or delete an event.",
      "description": "This operation lets admin, automation jobs, or log processors update a previously created external integration log event, usually to record actual outcome (marking retried, resolved, error-cleared, etc) or to patch incorrect data. Only non-key fields (result, error, timestamps) can be updated; the linked system, event type, or event data cannot be replaced for integrity reasons. All changes are audited.\n\nSecurity: Only privileged actors (admin/super_admin) or authorized automation can update logs. Business validations enforce logical state changes (cannot update immutable fields, must conform to event life cycle). If no log found, returns 404. If invalid patch or privilege, returns 400/403.\n\nReturns updated event log row. Never allows deletion or tampering with event origin/major metadata.",
      "summary": "Update an external integration log event (virtual_account_external_integration_logs table).",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the integration log event to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Patch data for the log entry (may only include certain updatable fields).",
        "typeName": "IVirtualAccountExternalIntegrationLogs.IUpdate"
      },
      "responseBody": {
        "description": "Updated integration log entry.",
        "typeName": "IVirtualAccountExternalIntegrationLogs"
      },
      "path": "/virtualAccount/externalIntegrationLogs/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes a single external integration log entry from the 'virtual_account_external_integration_logs' Prisma table. Used for cleanup, GDPR/data retention compliance, or admin audit action.",
      "description": "This API allows privileged admins or system automation to permanently remove a single integration log record, provided retention and reference policies are respected. The record is deleted by primary key. Business validation ensures logs required for compliance cannot be deleted until their retention/archiving period has passed. All deletions are audited in admin and audit logs. Deletion is logical if required by policy (i.e., status marking instead of physical erase).\n\nSecurity: Only super_admin or well-privileged admin roles can remove log records. Attempt to delete non-existent logs, in-use compliance records, or without permission will result in 404, 409, or 403 respectively. Returns confirmation payload (deleted ID/status).\n\nSuccessful deletion breaks linkage to dashboards/searches immediately, but remains auditable if required. Failure cases yield relevant errors.\n",
      "summary": "Delete external integration event log (virtual_account_external_integration_logs table).",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the integration log event to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Confirmation payload of deletion (usually deleted ID/status).",
        "typeName": "IVirtualAccountExternalIntegrationLogs.IDeleteResult"
      },
      "path": "/virtualAccount/externalIntegrationLogs/{id}",
      "method": "delete"
    },
    {
      "specification": "Retrieves a paginated, filterable list of ERP types (supported ERP vendors) in the platform. Based on the 'virtual_account_erp_types' table. Used for searching ERP types for new integrations or for admin display/statistics.",
      "description": "This PATCH endpoint provides admins or automation jobs with filtered, sorted, and paginated ERP type records. Filters include code, display_name, created_at range, and other search conditions. Used in the admin dashboard to select or manage ERP integrations, or to analyze partner coverage. Pagination and search pattern (like/trigram) are supported, returning a page of ERP type objects with total/count.\n\nSecurity: Only authorized admins can query this data. Validation errors or over-restrictive filters (zero results) are handled gracefully. Data returned matches the normalized business entity model.\n\nReturns page of ERP types. HTTP errors on misconfiguration or server error. RBAC enforced for access.",
      "summary": "List/search ERP types (virtual_account_erp_types table).",
      "parameters": [],
      "requestBody": {
        "description": "Criteria and pagination settings for ERP type search.",
        "typeName": "IVirtualAccountErpTypes.IRequest"
      },
      "responseBody": {
        "description": "Paginated ERP type list matching search criteria.",
        "typeName": "IPageIVirtualAccountErpTypes"
      },
      "path": "/virtualAccount/erpTypes",
      "method": "patch"
    },
    {
      "specification": "Retrieves a single ERP type entity, by primary key, from the 'virtual_account_erp_types' table. Used to find details for configuring or auditing ERP integration types.",
      "description": "This endpoint returns one row—the full details for a particular ERP type (e.g., DUZON, SAP)—matching the unique ID (UUID). Data includes: code, display_name, and creation date. Used in admin dashboards, configuration UIs, integration managers, or audit/reporting tools for partner info reference. If ERP type is not found, a 404 error is returned.\n\nSecurity: Only admin roles (RBAC enforced) may access this endpoint. No secrets/meta beyond what is stored in the schema. The returned object matches normalized 3NF definition of erp_types.\n\nAudit log is generated with every access, for compliance with policy.",
      "summary": "Get details for a single ERP type (virtual_account_erp_types table).",
      "parameters": [
        {
          "name": "id",
          "description": "UUID of the ERP type row to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Full ERP type record.",
        "typeName": "IVirtualAccountErpTypes"
      },
      "path": "/virtualAccount/erpTypes/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new ERP type (vendor/partner) registration in the 'virtual_account_erp_types' table. Used for onboarding new ERP vendors for integration purposes, or for admin-enabled expansion of supported partner types.",
      "description": "This API lets an admin register a new ERP partner type (e.g., new commercial ERP vendor, custom implementation, etc). Fields required include the code (unique short), display_name (for UI), and creation timestamp is automatic. The database enforces uniqueness of code, normalized attributes, and referential integrity to any linked erp syncs.\n\nSecurity: Only admins or super_admins can insert ERP types. Validation errors (duplicate code or empty values) will return 400/409. All additions are logged (admin/audit log) for traceability. The new ERP type object is returned on success.\n\nErrors for privilege, value, or server faults—401/403, 400/409, 500, respectively.",
      "summary": "Register a new ERP vendor/type (virtual_account_erp_types table).",
      "parameters": [],
      "requestBody": {
        "description": "Details of the ERP type to register.",
        "typeName": "IVirtualAccountErpTypes.ICreate"
      },
      "responseBody": {
        "description": "Created ERP type row.",
        "typeName": "IVirtualAccountErpTypes"
      },
      "path": "/virtualAccount/erpTypes",
      "method": "post"
    },
    {
      "specification": "Update an ERP type (virtual_account_erp_types) by its unique identifier. Supports administrative updates to ERP platform metadata such as display name or update dates, ensuring the list of ERP types used for external integration remains current, in line with the ERP integration requirements. Relies on strict RBAC authorization; only privileged admins may invoke this endpoint. Validates that the ERP type exists before update. Updates are audit-logged. Returns the updated ERP type entity upon success.",
      "description": "This endpoint updates properties of an existing ERP type, as recorded in the `virtual_account_erp_types` table, which catalogs ERP vendors integrated with the virtual account platform. This operation enables administrators to correct display names, update metadata after new partnerships, and maintain up-to-date ERP options for outbound sync and logging. All update actions are validated for RBAC scope; only authorized administrators may perform this operation. Input data is thoroughly validated against ERP type constraints (e.g., unique code, non-null display name). Each update is audit-logged to fulfill compliance and reporting standards described in the administrative dashboard and external integration requirements. If the entity is not found, a 404 error is returned. This API is closely related to the ERP type creation and listing endpoints, which together provide full CRUD lifecycle management.",
      "summary": "Update an ERP type record in virtual_account_erp_types by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier of the ERP type to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields to update for the ERP type.",
        "typeName": "IVirtualAccountErpType.IUpdate"
      },
      "responseBody": {
        "description": "The updated ERP type entity.",
        "typeName": "IVirtualAccountErpType"
      },
      "path": "/virtualAccount/erpTypes/{id}",
      "method": "put"
    },
    {
      "specification": "Delete an ERP type (virtual_account_erp_types) entity by its unique identifier. Primarily used by system administrators to remove obsolete or invalid ERP vendor types, ensuring that only valid options are present for integration and synchronization. The operation enforces strict permission checking in accordance with RBAC. Checks for referential integrity before deletion, e.g., that no erp sync records remain linked. Deleted ERP types are audit-logged for compliance records.",
      "description": "This endpoint deletes an ERP type entry from the `virtual_account_erp_types` table, controlling which ERP platforms are recognized for integration activities. Deletion requests are restricted to super-admins or privileged roles, following strict RBAC controls as established in requirements and Prisma schema documentation. Before deletion, the system checks for the existence of related ERP sync history to ensure data integrity (enforcing referential checks). If dependencies exist, the operation is rejected with an appropriate error code. Each deletion is strictly audit-logged in the admin action logs. This endpoint is complementary to other ERP type lifecycle endpoints (create, list, update) and helps keep the registry of acceptable ERP platforms accurate and compliant.",
      "summary": "Delete an ERP type record in virtual_account_erp_types by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier of the ERP type to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Deletion result status or deleted entity information.",
        "typeName": "IVirtualAccountErpType.IDeleteResult"
      },
      "path": "/virtualAccount/erpTypes/{id}",
      "method": "delete"
    },
    {
      "specification": "Retrieve a list of ERP sync logs (virtual_account_erp_syncs) with advanced filtering, pagination, and sorting. Used to monitor and review all synchronization events with ERP platforms (DUZON, SAP, etc), providing visibility into outbound payloads, results, error statuses, and integration metadata. This endpoint is essential for admin dashboard views and audit scenarios. Only accessible by authorized admin roles; filters include ERP type, result status, external system, and date range.",
      "description": "This endpoint efficiently lists all ERP sync transmission events from the `virtual_account_erp_syncs` table, satisfying dashboard and audit needs to review historical integrations with ERP systems. The PATCH method accepts a complex filter/search body that allows paging, filtering by ERP type, result status, time range, external system reference, and free text search on payload. Results are used in monitoring panels, failure troubleshooting, and export dashboards. Endpoint implements pagination and ordering; large sets are returned in chunks for efficiency. Security protections include RBAC (only admins/super-admins may access) and input validation to prevent injection or excess data exposure. Dependent with creation (POST), view (GET), update (PUT), and delete endpoints for full CRUD lifecycle over ERP sync logs.",
      "summary": "List ERP sync logs with filtering and pagination from virtual_account_erp_syncs.",
      "parameters": [],
      "requestBody": {
        "description": "Search/filter parameters for ERP sync retrieval.",
        "typeName": "IVirtualAccountErpSync.IRequest"
      },
      "responseBody": {
        "description": "A paged list of ERP sync log entries and paging metadata.",
        "typeName": "IPageIVirtualAccountErpSync"
      },
      "path": "/virtualAccount/erpSyncs",
      "method": "patch"
    },
    {
      "specification": "Retrieve the details of a specific ERP sync transmission log (virtual_account_erp_syncs), identified by its unique sync log ID. Primarily used by admin dashboard or troubleshooting tools to inspect full payload, error messages, timing, and metadata for a given ERP integration transaction. RBAC applied for data access; only admins may query. Used as drill-down from list endpoint to show full event details.",
      "description": "This endpoint fetches the full details of a single ERP sync log record from the `virtual_account_erp_syncs` table by ID. The ERP sync entity documents all outbound data pushes to ERP platforms, including result, payload, error info, involved ERP type, and associated external system. It is essential for admins performing error analysis, audits, or reconciliation of integration history. Permission checks and input validation are enforced for security and data consistency. Related endpoints include listing ERP sync events, creating a new sync record, and deletion. If the requested sync entry doesn't exist, a 404 error code is returned. The response includes all atomic event data needed for audit and system reports.",
      "summary": "Get the details for a specific ERP sync log in virtual_account_erp_syncs by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique ID of the ERP sync log to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "The detailed ERP sync log entity.",
        "typeName": "IVirtualAccountErpSync"
      },
      "path": "/virtualAccount/erpSyncs/{id}",
      "method": "get"
    },
    {
      "specification": "Create a new ERP sync log entry in virtual_account_erp_syncs for tracking outbound data sent to ERP platforms. Used whenever the system transmits a data payload (deposit, account, etc) to a partner ERP such as DUZON or SAP, fulfilling audit, troubleshooting, and integration monitoring requirements. Enforces data integrity, valid ERP type/external system references, and RBAC. Entry is audit-logged for compliance.",
      "description": "This endpoint adds a new ERP sync transmission record into the `virtual_account_erp_syncs` table. Each entry documents a single event where data (payload) is pushed to a supported ERP system. The operation is used to satisfy requirements for tracing all integration activity, for reporting, auditing, and error handling. Incoming request is validated: ERP type and external system must exist and be enabled. On successful creation, the new entity is returned. Permission controls ensure only admins/super-admins can invoke this endpoint. All ERP sync events are tightly integrated with external integration error-logging and ERP type lifecycle endpoints, forming the complete ERP integration management API.",
      "summary": "Create a new ERP sync log entry for outbound ERP integration event.",
      "parameters": [],
      "requestBody": {
        "description": "Basic info and outbound payload for the ERP sync log entry.",
        "typeName": "IVirtualAccountErpSync.ICreate"
      },
      "responseBody": {
        "description": "The newly created ERP sync log entity.",
        "typeName": "IVirtualAccountErpSync"
      },
      "path": "/virtualAccount/erpSyncs",
      "method": "post"
    },
    {
      "specification": "Update properties of an existing ERP sync transmission log entity in virtual_account_erp_syncs. Supports administrative correction or status change on integration logs (e.g., correcting result, payload after manual verification). RBAC ensures only privileged users can update. Each modification is strictly audit-logged. 404 returned if entity not found. Returns updated entity.",
      "description": "This endpoint updates an existing ERP sync event in the `virtual_account_erp_syncs` table. It is used when admins need to correct or supplement outbound payloads or status attributes (for example, marking a failed sync as resolved following manual intervention). All updates are RBAC-protected, audit-logged, and validated for correct referencing of ERP type/system and input structure. Supports integration with dashboard and reporting modules. 404 error returned if sync event with specified ID does not exist. Related to ERP sync event creation, listing, and detailed read endpoints.",
      "summary": "Update an ERP sync log entry in virtual_account_erp_syncs by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique ID of the ERP sync log to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields to update for the ERP sync log entry.",
        "typeName": "IVirtualAccountErpSync.IUpdate"
      },
      "responseBody": {
        "description": "The updated ERP sync log entry.",
        "typeName": "IVirtualAccountErpSync"
      },
      "path": "/virtualAccount/erpSyncs/{id}",
      "method": "put"
    },
    {
      "specification": "Delete an existing ERP sync log record in virtual_account_erp_syncs, identified by its log ID. Allows admin users to remove erroneous or obsolete ERP sync history. Enforces referential integrity and audit logging: cannot delete if referenced by external downstream logs. RBAC controls ensure only privileged users can delete. Returns result of operation.",
      "description": "This endpoint deletes a specific ERP sync event record from the `virtual_account_erp_syncs` table. It is intended for use by admins in cleaning up redundant, test, or recovery sync logs. Deletion is checked for referential integrity (e.g., that the record is not referenced by dependent external integration logs). Permission checks and audit logging are mandatory; deletion is tracked for compliance purposes. If the entity is not found, a 404 error is returned. This operation is related to other ERP sync log CRUD endpoints.",
      "summary": "Delete an ERP sync log record from virtual_account_erp_syncs by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique ID of the ERP sync log to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Result of the deletion operation.",
        "typeName": "IVirtualAccountErpSync.IDeleteResult"
      },
      "path": "/virtualAccount/erpSyncs/{id}",
      "method": "delete"
    },
    {
      "specification": "Retrieve a list of mall sync logs (virtual_account_mall_syncs) with flexible filtering, search, pagination, and sorting options. Enables admins to monitor and review all outbound mall integration events, such as webhook/API pushes to external mall systems (Cafe24, 고도몰). Only authorized admin roles can invoke; filters include external system, order ID, result status, and date range. Core to dashboard and reporting features.",
      "description": "This endpoint retrieves an efficient, paginated list of mall sync events from the `virtual_account_mall_syncs` table. It enables admins to view the transmission history of all mall integration pushes, supporting their duties in monitoring external status updates and troubleshooting issues. Flexible search options include order ID, target mall, status, and time range. Pagination/ordering is supported for large result sets. Input validation ensures consistency; output includes paging metadata for UI or Excel export. Security protections such as RBAC limit exposure only to authorized roles. Endpoint is designed to work in tandem with mall sync detail (GET), creation (POST), update (PUT), and deletion endpoints.",
      "summary": "List mall sync log entries in virtual_account_mall_syncs with searching and pagination.",
      "parameters": [],
      "requestBody": {
        "description": "Filter and pagination query for mall sync log retrieval.",
        "typeName": "IVirtualAccountMallSync.IRequest"
      },
      "responseBody": {
        "description": "Paged list of mall sync log entries and pagination details.",
        "typeName": "IPageIVirtualAccountMallSync"
      },
      "path": "/virtualAccount/mallSyncs",
      "method": "patch"
    },
    {
      "specification": "Retrieve a specific mall sync log record from virtual_account_mall_syncs by its unique ID. Used by admin dashboards and error investigation UX for drilling down into individual transmission events to external mall systems. RBAC enforced; returns detailed log data.",
      "description": "This endpoint returns the full details for a specific mall sync event in the `virtual_account_mall_syncs` table. Typically used to drill down from a UI listing (patch endpoint) or to review the full payload, result status, error message, and metadata for an individual event. Access permissions are checked to ensure only admins or super-admins with the correct role can review these logs. Not found returns a 404 error. Output structure is designed to supply all technical and business details required by the dashboard and support tickets.",
      "summary": "Get the details for a specific mall sync log in virtual_account_mall_syncs by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier of the mall sync log to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "The detailed mall sync log entry.",
        "typeName": "IVirtualAccountMallSync"
      },
      "path": "/virtualAccount/mallSyncs/{id}",
      "method": "get"
    },
    {
      "specification": "Create a new outbound mall sync log record in virtual_account_mall_syncs, documenting a transmission of data to an external mall system (such as Cafe24 or 고도몰). Used by the integration pipeline or by admins to track push/webhook activity for order or status synchronizations. All created rows support audit, troubleshooting, and reporting needs. Input fields are validated for referential integrity (must reference valid external_system_id and order_id). RBAC required for access.",
      "description": "This endpoint creates a new record in the `virtual_account_mall_syncs` table, documenting an outbound integration event with a mall (e.g., Cafe24, 고도몰). The operation is essential for end-to-end tracing of all interactions with mall platforms, useful for admin dashboards and integration troubleshooting. Required input includes external_system_id (referencing the mall), order_id, the payload sent, and expected result. All requests are strictly permission-checked (RBAC enforced) and validated for field consistency. The new entity and its metadata are returned for further processing/display. This endpoint supports the reporting, notification, and troubleshooting requirements outlined in integration documentation and admin dashboard features.",
      "summary": "Create a new mall sync log entry for mall integration event.",
      "parameters": [],
      "requestBody": {
        "description": "Details and payload of new mall sync log.",
        "typeName": "IVirtualAccountMallSync.ICreate"
      },
      "responseBody": {
        "description": "The newly created mall sync log entry.",
        "typeName": "IVirtualAccountMallSync"
      },
      "path": "/virtualAccount/mallSyncs",
      "method": "post"
    },
    {
      "specification": "Update a mall sync log record in virtual_account_mall_syncs by its ID. Enables admins to correct metadata, update status/result, or revise payload/context for specific mall transmission events. Edits are strictly audit-logged and permissions are checked per RBAC. Normal edit restrictions: only admins and only for eligible records (not deleted/archived).",
      "description": "This endpoint allows administrative users to update a specific mall sync log entry in the `virtual_account_mall_syncs` table. Updates may include correcting metadata (fixing result_status, error message), revising payload for troubleshooting, or updating contextual data about the mall push event. Each operation is protected by RBAC, audit-logged, and validated for allowed fields and referential integrity. Edits are only permitted for active/non-archived records. A not-found or lock-violation error is returned if update request is not allowed. Returns updated mall sync entity on success. The endpoint complements POST (create), PATCH (list), GET (details), and DELETE (remove) operations for full CRUD cycle on mall sync logs.",
      "summary": "Update a mall sync log entry in virtual_account_mall_syncs by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier of the mall sync log to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Editable fields for the mall sync log entry.",
        "typeName": "IVirtualAccountMallSync.IUpdate"
      },
      "responseBody": {
        "description": "The updated mall sync log entry.",
        "typeName": "IVirtualAccountMallSync"
      },
      "path": "/virtualAccount/mallSyncs/{id}",
      "method": "put"
    },
    {
      "specification": "Delete a specific mall sync log record in virtual_account_mall_syncs by its unique ID. Used by admins to clean up, troubleshoot, or remove redundant mall integration sync records. Referential constraints are checked prior to deletion (no downstream dependencies). Permission (RBAC) and audit logging enforced. Returns operation result or info about the deleted record.",
      "description": "This endpoint deletes an individual mall sync log row from the `virtual_account_mall_syncs` table, supporting admin-led cleanup, troubleshooting, and test data removal. Before deletion, the system checks referential integrity to avoid breaking any downstream logs or analysis. Only admin or super-admin users with granted RBAC rights can delete. All deletes are audit-logged for compliance. Related endpoints in the mall sync log domain include POST (create), PATCH (list), GET (details), PUT (update). Not found returns a 404 error. Returns operation result or deleted entity metadata on successful completion.",
      "summary": "Delete a mall sync log entry in virtual_account_mall_syncs by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier of the mall sync log to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Result of the deletion operation or deleted entity info.",
        "typeName": "IVirtualAccountMallSync.IDeleteResult"
      },
      "path": "/virtualAccount/mallSyncs/{id}",
      "method": "delete"
    },
    {
      "specification": "This operation retrieves a paginated, filtered list of admin dashboard settings records from the \"virtual_account_dashboard_settings\" table, which stores per-admin dashboard UI and personalization preferences (such as favorite filters, default landing tabs, notification toggles, etc). It enables administrators to browse and search all dashboard configuration records (useful for support, compliance, and superadmin features). Returns an array of settings objects along with pagination metadata. This endpoint references the Prisma schema model 'virtual_account_dashboard_settings'.",
      "description": "This endpoint supports listing and filtering all administrative dashboard settings entries in the virtual account system. It directly queries the `virtual_account_dashboard_settings` table, as described in the Prisma schema, which contains JSON settings, timestamps, and the associated admin. Access control and filtering should be enforced so only permitted roles can search, and fields such as filter state, preferred columns, and notification preferences are returned as part of the \"settings_json\" field.\n\nSecurity considerations: Only admins or super-admins with dashboard management permissions should access this endpoint. Returned data should not leak sensitive configuration elements. Input validation must allow filtering by admin, by creation/update date ranges, and enable full pagination and sorting (for export/history auditing use-cases).\n\nExamples of business logic include returning only settings for active admins, restricting deleted or test accounts, and ensuring the settings reflect real dashboard use.\n\nThis operation also provides tracing for when settings were last updated, referencing `created_at` and `updated_at` as indexed in the schema. Error handling should provide consistent pagination errors and filter validation messages as per OpenAPI best practices.",
      "summary": "List and filter all Admin dashboard settings (virtual_account_dashboard_settings table).",
      "parameters": [],
      "requestBody": {
        "description": "Parameters for searching, filtering, and paginating admin dashboard settings records.",
        "typeName": "IVirtualAccountDashboardSettings.IRequest"
      },
      "responseBody": {
        "description": "Paginated list of dashboard settings records and metadata.",
        "typeName": "IPageIVirtualAccountDashboardSettings"
      },
      "path": "/virtualAccount/dashboardSettings",
      "method": "patch"
    },
    {
      "specification": "This operation retrieves a single admin dashboard settings record by its unique identifier from the \"virtual_account_dashboard_settings\" table. It enables detailed inspection/editing of per-admin dashboard personalization in the virtual account management system. Returns all fields, especially the settings_json, along with admin identification. This references the Prisma schema model 'virtual_account_dashboard_settings'.",
      "description": "Given a unique dashboard setting id, this endpoint returns the full record from the `virtual_account_dashboard_settings` table. It includes all personalized admin dashboard preferences, stored as a JSON blob, along with creation and update timestamps.\n\nThe operation ensures only permitted roles (e.g., the owning admin, superadmin, or users with audit/view privileges) can access the data, and does not expose sensitive or internal-only options included in the settings blob.\n\nBusiness logic includes validating the id, handling non-existent or unauthorized-access attempts, and logging the access for audit purposes. This facilitates help desk operations, settings troubleshooting, and security audits.\n\nReferences Prisma schema table docs for field meanings and normalization, ensuring no denormalized configuration is leaked.",
      "summary": "Get one Admin dashboard setting record (virtual_account_dashboard_settings table).",
      "parameters": [
        {
          "name": "id",
          "description": "Admin dashboard settings record UUID (primary key of virtual_account_dashboard_settings).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Full admin dashboard setting record, including settings JSON blob and metadata.",
        "typeName": "IVirtualAccountDashboardSettings"
      },
      "path": "/virtualAccount/dashboardSettings/{id}",
      "method": "get"
    },
    {
      "specification": "This operation creates a new admin dashboard settings record for a given admin user in the \"virtual_account_dashboard_settings\" table. It is used to initialize personalization (such as filters, notification toggles, UI layout) for new admin accounts, storing configuration as a JSONB field. Returns the newly created record with all metadata. References the Prisma schema model 'virtual_account_dashboard_settings'.",
      "description": "This endpoint allows the creation of a dashboard configuration/settings record for a specific administrator. The payload includes the target admin UUID and a validated JSON settings blob, which encodes preferences like default filters, column selections, and notification rules. The system sets creation and update timestamps atomically in the database.\n\nValidation: Only one dashboard settings record per admin should exist (see unique constraint in Prisma schema); attempts to create duplicates must return a 409 error. Only users with the correct privilege may create or initialize dashboard settings.\n\nAudit requirements include logging who performed the creation, linking the record to the admin, and ensuring that no sensitive or system-internal config is injectible from the client. Errors are returned if invalid admin IDs or malformed JSON are provided.\n\nAll fields correspond to those described in the Prisma schema for 'virtual_account_dashboard_settings'.",
      "summary": "Create a new Admin dashboard settings record (virtual_account_dashboard_settings table).",
      "parameters": [],
      "requestBody": {
        "description": "Admin UUID and initial dashboard settings JSON blob.",
        "typeName": "IVirtualAccountDashboardSettings.ICreate"
      },
      "responseBody": {
        "description": "The created admin dashboard setting record.",
        "typeName": "IVirtualAccountDashboardSettings"
      },
      "path": "/virtualAccount/dashboardSettings",
      "method": "post"
    },
    {
      "specification": "This operation updates the settings and personalization of an existing admin dashboard settings record in the \"virtual_account_dashboard_settings\" table, identified by its unique UUID. Used to change admin dashboard configuration, layout, filters, etc. Returns the updated record. References 'virtual_account_dashboard_settings' in Prisma schema.",
      "description": "This endpoint allows for updating the UI/dashboard personalization for a specific admin by modifying the existing record in the `virtual_account_dashboard_settings` table, identified by UUID. The payload includes the up-to-date JSON settings, which may change view filters, notification preferences, columns, etc.\n\nAccess control must ensure that only the owner or properly privileged admin can update settings. All fields must be validated according to the schema (JSON blob, timestamps, and admin linkage), and an error should be returned for non-existent records.\n\nThe relationship and singularity are enforced: only one settings record per admin. Update locking and last-write-wins strategy should be considered to avoid concurrent modification problems. The endpoint updates the `updated_at` timestamp accordingly.\n\nLogs are written as per compliance requirements for audit/tracing.",
      "summary": "Update an existing Admin dashboard settings record (virtual_account_dashboard_settings table).",
      "parameters": [
        {
          "name": "id",
          "description": "Admin dashboard settings record UUID (primary key).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Updated dashboard settings JSON blob and relevant fields.",
        "typeName": "IVirtualAccountDashboardSettings.IUpdate"
      },
      "responseBody": {
        "description": "The updated admin dashboard settings record.",
        "typeName": "IVirtualAccountDashboardSettings"
      },
      "path": "/virtualAccount/dashboardSettings/{id}",
      "method": "put"
    },
    {
      "specification": "This operation deletes an admin dashboard settings record by UUID from the \"virtual_account_dashboard_settings\" table. Used to remove dashboard personalizations during offboarding or by admin request. It returns a confirmation (or null on success). References 'virtual_account_dashboard_settings' model in the Prisma schema.",
      "description": "This endpoint deletes the specified dashboard settings record from the database, fully removing dashboard personalization for the targeted admin. It validates that the resource exists and the requester is authorized (owner, superadmin, or privileged admin).\n\nAudit logging/tracing must be performed as per compliance. Nonexistent/unauthorized-id errors must return 404/403, not accidentally expose existence/absence. On success, a confirmation or deleted record info is returned, but personalization is irrecoverable thereafter. This operation is referenced by the Prisma schema docs for full table and column meaning.",
      "summary": "Delete an Admin dashboard settings record (virtual_account_dashboard_settings table).",
      "parameters": [
        {
          "name": "id",
          "description": "UUID (primary key) of the admin dashboard settings record to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Confirmation of deletion (could be null or deleted record info).",
        "typeName": "IVirtualAccountDashboardSettings.IDeleteResult"
      },
      "path": "/virtualAccount/dashboardSettings/{id}",
      "method": "delete"
    },
    {
      "specification": "This operation retrieves a paginated and filtered list of Excel export logs performed by admins from the \"virtual_account_excel_exports\" table, providing a history of what data was exported, when, by whom, with what filter. Used for compliance, admin tracing, and support feature in the dashboard. This references the Prisma schema model 'virtual_account_excel_exports'.",
      "description": "Lists and filters all admin-triggered Excel export events by querying the `virtual_account_excel_exports` table according to provided search/filter/pagination parameters. Allows filtering exports by admin, period, type, and success status, for visibility on data exports in the virtual account system. Supports pagination, sorting, and detailed filter conditions for export event history.\n\nSecurity: Only privileged roles (e.g., superadmin or export-managers) should access this endpoint. Audit considerations for viewing logs should apply, and only non-sensitive export metadata is returned (does NOT include file contents, only file path URI and meta; see Prisma schema).\n\nRequest and response structure aligns fully with OpenAPI, referencing the schema's field docs for filterability, traceability, and normalization. Hard errors (e.g., invalid filters) return validation errors. Intended for use in export activity audit pages and support.",
      "summary": "List and filter admin Excel export logs (virtual_account_excel_exports table).",
      "parameters": [],
      "requestBody": {
        "description": "Filtering and pagination parameters for Excel export log listing.",
        "typeName": "IVirtualAccountExcelExports.IRequest"
      },
      "responseBody": {
        "description": "Paginated list of Excel export logs and filter/sort metadata.",
        "typeName": "IPageIVirtualAccountExcelExports"
      },
      "path": "/virtualAccount/excelExports",
      "method": "patch"
    },
    {
      "specification": "This operation retrieves the details of a single Excel export event from the \"virtual_account_excel_exports\" table, identified by its unique UUID. Typically used to verify export event, display export file details, or troubleshoot admin export issues. Returns full event log record, referencing the Prisma schema model 'virtual_account_excel_exports'.",
      "description": "Given a unique Excel export log identifier (UUID), this endpoint returns the entire Excel export metadata record from the `virtual_account_excel_exports` table, including admin info, export type, filter state, timestamps, outcome, and file path. DOES NOT return file content (only file URI and meta, as per Prisma schema normalization).\n\nAccess is controlled by role-based permissions—requester must be the exporting admin, or a privileged (superadmin) user. Input validation ensures proper UUID structure, and 404 is returned if not found or not permitted.\n\nRecord structure and all fields correspond exactly to documentation in the Prisma schema. Used in support/export audit screens.",
      "summary": "Get one admin Excel export log record (virtual_account_excel_exports table).",
      "parameters": [
        {
          "name": "id",
          "description": "Excel export event log UUID (primary key of virtual_account_excel_exports).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Full Excel export event log record, with admin, filter, metadata, and file URI.",
        "typeName": "IVirtualAccountExcelExports"
      },
      "path": "/virtualAccount/excelExports/{id}",
      "method": "get"
    },
    {
      "specification": "This operation creates a new Excel export event log in the \"virtual_account_excel_exports\" table, recording that an admin has exported some data set. Used to track export auditing, compliance, and reporting of export/download activity. Returns the created log record referencing the Prisma schema model 'virtual_account_excel_exports'.",
      "description": "Allows the system or an admin user to record (log) a new Excel export event by inserting a new event log into the `virtual_account_excel_exports` table. The payload includes admin ID, export type, filters, timestamp, file location, and outcome. Ensures that only correct roles can create export logs (e.g., after an actual export/download occurs). On success, returns the created log entry.\n\nData fields are validated and correspond to Prisma schema for this table—no file content is stored, only file path and metadata. Errors occur for invalid types/fields, duplicated or invalid events, or unauthorized admin attempts. References documentation and schema field meanings for API alignment.",
      "summary": "Create a new admin Excel export event log (virtual_account_excel_exports table).",
      "parameters": [],
      "requestBody": {
        "description": "Admin ID, export type, filter JSON, file location, and outcome.",
        "typeName": "IVirtualAccountExcelExports.ICreate"
      },
      "responseBody": {
        "description": "Created Excel export event log record.",
        "typeName": "IVirtualAccountExcelExports"
      },
      "path": "/virtualAccount/excelExports",
      "method": "post"
    },
    {
      "specification": "This operation updates an existing Excel export event log in the \"virtual_account_excel_exports\" table, by UUID. Used only for managing metadata corrections, file status updates, or appending final file path after background export task completed. Returns the updated record. This references the Prisma schema model 'virtual_account_excel_exports'.",
      "description": "Updates a specific Excel export log in the `virtual_account_excel_exports` table (identified by UUID) with new metadata, such as status, file path correction, timestamps, or related filter info. Normal business flow: invoked after a background export task completes and file path is finalized.\n\nOnly privileged roles (the exporting admin, or superadmin) should be able to update this log. Request payload must conform to the correct update schema, as described in Prisma docs. Business logic ensures that file content is not injected or stored—only path and meta fields may be updated. History and audit log of updates must be maintained outside this core event (for compliance).\n\nRecord is returned as per OpenAPI response-body conventions, or 404 if no record found/authorized.",
      "summary": "Update an existing admin Excel export log entry (virtual_account_excel_exports table).",
      "parameters": [
        {
          "name": "id",
          "description": "Excel export event log UUID (primary key of virtual_account_excel_exports).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields to update in the Excel export log (file URI, status, meta-fields, etc).",
        "typeName": "IVirtualAccountExcelExports.IUpdate"
      },
      "responseBody": {
        "description": "Updated Excel export event log record.",
        "typeName": "IVirtualAccountExcelExports"
      },
      "path": "/virtualAccount/excelExports/{id}",
      "method": "put"
    },
    {
      "specification": "This operation deletes an Excel export event log record by UUID in the \"virtual_account_excel_exports\" table. Used only for compliance-related or admin-requested deletion of export audit logs. Returns deleted record or confirmation. References the Prisma schema model 'virtual_account_excel_exports'.",
      "description": "Deletes an Excel export audit log record from the `virtual_account_excel_exports` table, identified by its UUID. Used rarely, for administrative removal/scrubbing of export histories as per the requirements of compliance, privacy, or offboarding policies. Ensures appropriate permissions on delete, with error handling for non-existent or unauthorized record IDs.\n\nReturns a confirmation (could be deleted record, usually confirmation/null on success). All field meanings and behaviors as described in the Prisma schema. Deletion is irreversible and requires full audit log to be written elsewhere, especially for compliance-sensitive records such as data exports.",
      "summary": "Delete an admin Excel export event log (virtual_account_excel_exports table).",
      "parameters": [
        {
          "name": "id",
          "description": "Excel export event log UUID (primary key) to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Confirmation of deletion (deleted record info or null).",
        "typeName": "IVirtualAccountExcelExports.IDeleteResult"
      },
      "path": "/virtualAccount/excelExports/{id}",
      "method": "delete"
    },
    {
      "specification": "This operation retrieves a paginated, filterable list of admin alerts (warnings, exceptional events) from the \"virtual_account_admin_alerts\" table. Used for dashboard abnormality warnings, security events, external integration failures, and more. Returns all necessary alert metadata for dashboard display and troubleshooting, referencing Prisma schema model 'virtual_account_admin_alerts'.",
      "description": "Lists and retrieves all admin alert records (warnings, exceptional events, abnormality signals) from the `virtual_account_admin_alerts` table, supporting search, filter, pagination, and sorting. Allows filtering by alert type, admin, time, and status to troubleshoot and audit dashboard anomalies or urgent notifications. Data model is referenced from Prisma schema—fields include alert type, context JSON, notification/capture times, clearable flag, and so on.\n\nBusiness logic ensures only privileged roles view alerts. Security note: Alerts may contain metadata about system status, errors, and sensitive dashboard events, so output must be appropriately filtered and not leak sensitive system context to unauthorized users. Intended for dashboard abnormal condition displays, external integration error histories, and incident support workflows.",
      "summary": "List and filter dashboard admin alert records (virtual_account_admin_alerts table).",
      "parameters": [],
      "requestBody": {
        "description": "Search and filter parameters for admin alerts paging/listing.",
        "typeName": "IVirtualAccountAdminAlerts.IRequest"
      },
      "responseBody": {
        "description": "Paginated list of admin alert records with filter and sort metadata.",
        "typeName": "IPageIVirtualAccountAdminAlerts"
      },
      "path": "/virtualAccount/adminAlerts",
      "method": "patch"
    },
    {
      "specification": "This operation retrieves a single admin alert record by UUID from the \"virtual_account_admin_alerts\" table. Used for viewing exceptional event metadata, troubleshooting alert context, and assessing dashboard abnormality notices. Returns the full alert record as described in the Prisma schema.",
      "description": "Retrieves a specific abnormal event or admin alert record, given its UUID, from the `virtual_account_admin_alerts` table. The full alert record is returned, including alert type, context JSON, status flags, notification and clearance times, and assigned admin (if any). Field-level behavior and meanings are referenced from the Prisma schema docs.\n\nAccess control ensures only authorized roles may access alert data. Business logic validates UUIDs, handles missing/not authorized/cleared states, and ensures correct visibility of internal details (some context may be redacted for privacy/security). This endpoint is essential for in-depth troubleshooting of dashboard and system alerts in admin UX.",
      "summary": "Get one admin alert record (virtual_account_admin_alerts table).",
      "parameters": [
        {
          "name": "id",
          "description": "Admin alert record UUID (primary key of virtual_account_admin_alerts table).",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Full admin alert record, including alert type, context, and timestamps.",
        "typeName": "IVirtualAccountAdminAlerts"
      },
      "path": "/virtualAccount/adminAlerts/{id}",
      "method": "get"
    },
    {
      "specification": "This operation creates a new admin alert in the system. It supports tracking all critical alerts—such as exception notifications, mass mismatches, or API errors—raised for administrators. The operation stores an atomic record per alert event, referencing the administrator (if applicable), alert context as JSON, type, notification time, clearable status, and any eventual cleared status. This endpoint is required to support the alert system detailed in the Admin Dashboard specification (schema: virtual_account_admin_alerts). This operation strictly adheres to 3NF and does not handle bulk/aggregate alerts; each row is an individual event.",
      "description": "This API operation creates a new admin alert record, typically from backend monitoring or detection logic. Examples include mass mismatch detection, external API failures, or security/scaling warnings. The alert will be associated with a specific admin if targeted, or left open/global otherwise. The alert type (such as 'MASS_MISMATCH' or 'SECURITY_WARNING') must be provided, as well as contextual detail in JSON format—this might include involved virtual account IDs, error payloads, or anomaly metrics.\n\nThe notified_at timestamp records when the alert was generated. The clearable flag controls whether the UI allows an admin to mark this alert as resolved. Alerts are not auto-deleted—clearing status is tracked separately via the cleared_at field.\n\nPermissions: Only users with proper admin or super admin role (see RBAC requirements) may invoke this endpoint. All insertions are tracked in the admin activity log. Validation includes schema and actor authentication.\n\nOn success, returns the full admin alert record. On conflict or error, standardized error responses (422, 403, 409, 500) with details are produced.",
      "summary": "Create a new admin alert (virtual_account_admin_alerts table)",
      "parameters": [],
      "requestBody": {
        "description": "Admin alert event creation info (type, context, target admin, etc)",
        "typeName": "virtual_account_admin_alerts.ICreate"
      },
      "responseBody": {
        "description": "The newly created admin alert record",
        "typeName": "virtual_account_admin_alerts"
      },
      "path": "/virtualAccount/adminAlerts",
      "method": "post"
    },
    {
      "specification": "This operation updates an existing admin alert by its primary key ID. It supports updating alert details—most commonly clearing or marking alerts as resolved, updating context in response to secondary events, or administratively correcting alert metadata. This endpoint fulfills the requirement for marking alerts as read or updating alert context in the Admin Dashboard (schema: virtual_account_admin_alerts).",
      "description": "This patch operation allows the client (typically an admin or super admin) to update an admin alert's status by its ID. Permitted modifications include changing the clearable flag, setting the cleared_at timestamp to mark as resolved, and possibly updating the alert context.\n\nThe operation enforces RBAC: only admins with proper privileges can update alerts. It verifies that the alert exists and is not already cleared if the request is to mark as resolved. All changes are logged in the admin activity log for compliance. Input validation ensures compliance with schema and business rules.\n\nResponses: On success, returns the updated alert record. Errors include 404 if not found, 409 for state conflict, 403 for permission, or 422 for request validation errors.",
      "summary": "Update an existing admin alert by ID (virtual_account_admin_alerts table)",
      "parameters": [
        {
          "name": "id",
          "description": "Target admin alert's ID",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Alert update data (e.g., clear status, updated context)",
        "typeName": "virtual_account_admin_alerts.IUpdate"
      },
      "responseBody": {
        "description": "Updated admin alert record",
        "typeName": "virtual_account_admin_alerts"
      },
      "path": "/virtualAccount/adminAlerts/{id}",
      "method": "put"
    },
    {
      "specification": "This operation deletes (permanently removes) an admin alert from the database, by its primary key ID. This fulfills the need for administrative cleanup, final resolution, or policy-based alert removal, as required in the Admin Dashboard. Uses the virtual_account_admin_alerts table.",
      "description": "This delete operation marks an admin alert identified by its ID as deleted. Only users with explicit admin or super admin privileges can perform deletions. The operation verifies that the target alert exists, then removes it from the database. Business logic requires logging this action in the admin activity log, and confirmation that the alert is not an active or unresolved system alert before deletion.\n\nFor compliance/audit, the operation checks associations and logs the deleted alert metadata as needed. Any error (missing ID, already deleted, not found, or RBAC violation) triggers standardized error codes (404, 409, 403, 500).\n\nOn success, returns a confirmation or the deleted alert data.",
      "summary": "Delete an admin alert by ID (virtual_account_admin_alerts table)",
      "parameters": [
        {
          "name": "id",
          "description": "ID of alert to delete",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Confirmation of deletion or deleted alert information",
        "typeName": "virtual_account_admin_alerts"
      },
      "path": "/virtualAccount/adminAlerts/{id}",
      "method": "delete"
    },
    {
      "specification": "This operation searches and filters admin activity logs based on complex criteria (actor/admin, type, date, result, etc). Implements the Admin Dashboard history-audit/traceability requirement (schema: virtual_account_admin_activity_logs). Results are paginated, sortable, and can include search by type, entity, or result.",
      "description": "This operation enables authorized admin users to search the full activity log, filtering by actor, event type, date/time, target entity, result, or free-text search on the meta JSON/context fields. Typical use cases include forensic investigations, export for audit reporting, or tracking recent admin actions (such as bulk exports, permission changes, alert operations, etc).\n\nThe request body must specify search criteria (actor, type, entity, range, etc) and pagination parameters (offset/limit or page/size). Sorting is supported by timestamp or other available columns. This endpoint is RBAC-protected (admin/super admin only) and all reads are themselves logged for compliance.\n\nReturns: A paginated list of activity log records. Errors are produced on invalid queries or permission problems.\n\nRelated APIs: Use POST for new activity, GET for details, PUT for update. For Excel export, a different API should be used.",
      "summary": "List/search admin activity logs (virtual_account_admin_activity_logs table)",
      "parameters": [],
      "requestBody": {
        "description": "Search/pagination/sort info for listing admin activity logs",
        "typeName": "virtual_account_admin_activity_logs.IRequest"
      },
      "responseBody": {
        "description": "Paginated activity log records",
        "typeName": "IPagevirtual_account_admin_activity_logs"
      },
      "path": "/virtualAccount/adminActivityLogs",
      "method": "patch"
    },
    {
      "specification": "This operation retrieves the full details of a single admin activity log by its ID. Used on detail view, forensic trace, or direct log referencing for audit compliance. Uses the virtual_account_admin_activity_logs table.",
      "description": "Returns the complete record of a single admin activity log, given its UUID. Accessible only to authorized admin and super admin users according to RBAC policy. The returned record includes all columns (action type, entity, target, result, IP, context, timestamp).\n\nIf the activity log does not exist, an error is returned (404). Access is tracked in audit logs for compliance. Input validation ensures UUID and access constraints.\n\nUse this together with PATCH (list/search logs), POST/PUT (logs creation/update), and DELETE (for removal, if allowed by policy).",
      "summary": "Get a single admin activity log detail by ID (virtual_account_admin_activity_logs table)",
      "parameters": [
        {
          "name": "id",
          "description": "Admin activity log record ID (UUID)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Requested admin activity log record",
        "typeName": "virtual_account_admin_activity_logs"
      },
      "path": "/virtualAccount/adminActivityLogs/{id}",
      "method": "get"
    },
    {
      "specification": "This operation creates a new admin activity log entry, recording administrator actions for full audit-tracing and compliance. Fulfills the audit logging requirements for sensitive admin operations (schema: virtual_account_admin_activity_logs).",
      "description": "This operation logs a single admin action, such as an Excel export, permission or role change, notification policy update, dashboard settings change, or other sensitive/critical admin event. The input must provide all atomic fields: action type, affected entity, optional target entity ID, result, IP address, meta/context JSON, and timestamp. The operation assigns the originated admin (actor) and writes a normalized log row.\n\nOnly system-internal or privileged user agents should invoke this API directly (it is usually called by backend services during admin operations). Success returns the stored log record; errors return validation (422), RBAC (403), or system (500) codes. All fields are validated and RBAC is enforced as in requirements.\n\nShould be used together with PATCH/GET/PUT/DELETE for a full audit trail lifecycle.",
      "summary": "Create a new admin activity log entry (virtual_account_admin_activity_logs table)",
      "parameters": [],
      "requestBody": {
        "description": "New admin activity log event info (action, result, context, etc)",
        "typeName": "virtual_account_admin_activity_logs.ICreate"
      },
      "responseBody": {
        "description": "The newly created admin activity log record",
        "typeName": "virtual_account_admin_activity_logs"
      },
      "path": "/virtualAccount/adminActivityLogs",
      "method": "post"
    },
    {
      "specification": "This operation updates an existing admin activity log by its ID. Used for post-event context refinement or error correction (rare in standard audit scenarios; allowed for correcting context/meta/errors only, not for business logic suppression). Uses the virtual_account_admin_activity_logs table.",
      "description": "This operation updates context, result status, or metadata of an existing admin activity log record (identified by ID). Typical use: after an initial insert, an error or detail must be corrected (e.g., post-facto error code, result, or meta/context correction). Only allowed for admins/super admins with direct audit privilege; RBAC and audit handling strictly enforced.\n\nThe request body specifies updatable fields (meta JSON, result, etc). Non-modifiable fields are protected as per business rules (e.g., action_type, occurred_at are immutable by default). Success returns the updated record; errors include 404 (not found), 409 (immutable/invalid update), 403 (forbidden), and 422 (validation). All changes are appended to the audit log per compliance policy.\n\nUse together with PATCH (search), GET (detail), POST (create), DELETE (if permitted).",
      "summary": "Update an admin activity log by ID (virtual_account_admin_activity_logs table)",
      "parameters": [
        {
          "name": "id",
          "description": "Target admin activity log record ID (UUID)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Update data for admin activity log (meta/result corrections only)",
        "typeName": "virtual_account_admin_activity_logs.IUpdate"
      },
      "responseBody": {
        "description": "Updated admin activity log record",
        "typeName": "virtual_account_admin_activity_logs"
      },
      "path": "/virtualAccount/adminActivityLogs/{id}",
      "method": "put"
    },
    {
      "specification": "This operation deletes an admin activity log by its ID. Implements data cleaning or legal redaction if required by policy—generally disabled unless in special audit/policy scenarios. Uses the virtual_account_admin_activity_logs table.",
      "description": "This operation removes/disables an admin activity log record by its UUID. Usually used for legal redaction, right-to-be-forgotten, or strict policy cleanups. Only allowed by super admin or with specialized audit privileges per RBAC. Deletion is tracked in a separate redaction log for compliance.\n\nChecks that the record exists and can be deleted under policy. Returns deleted record or confirmation. Errors on not found, RBAC denial, or business policy violations.\n\nPaired with POST/PUT/GET/PATCH for log record lifecycle handling.",
      "summary": "Delete an admin activity log by ID (virtual_account_admin_activity_logs table)",
      "parameters": [
        {
          "name": "id",
          "description": "Target admin activity log record ID (UUID)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Confirmation/deleted admin activity log record",
        "typeName": "virtual_account_admin_activity_logs"
      },
      "path": "/virtualAccount/adminActivityLogs/{id}",
      "method": "delete"
    },
    {
      "specification": "This operation searches and filters system settings, supporting admin dashboard, configuration export, or diagnostics. Uses the virtual_account_system_settings table.",
      "description": "This operation lists and filters system settings, supporting filtered queries based on domain, setting_key, value, or description. Used in the admin dashboard for config retrieval, security review, or export. The request body specifies search and pagination/sorting info.\n\nRBAC restricts to admin and super admin only. Results may be exported (linked Excel export API). All query activity is tracked in logs for compliance. Use GET for single record detail, POST for creation, PUT for updates.",
      "summary": "List/filter system settings (virtual_account_system_settings table)",
      "parameters": [],
      "requestBody": {
        "description": "Search and pagination info for system settings list",
        "typeName": "virtual_account_system_settings.IRequest"
      },
      "responseBody": {
        "description": "Paginated system settings records",
        "typeName": "IPagevirtual_account_system_settings"
      },
      "path": "/virtualAccount/systemSettings",
      "method": "patch"
    },
    {
      "specification": "This operation retrieves a single system settings record by its primary key (ID). Used for admin dashboard config inspection or detail view. Uses the virtual_account_system_settings table.",
      "description": "Returns a single system settings record, given its ID. Restricted to admins and super admins. Returns all system setting columns (domain, setting_key, value, description, etc). Logs query for audit purposes. 404 if not found, 403 on permission, 500 for internal errors.\n\nUse PATCH for lists/query, POST for creation, PUT for update, DELETE for deletion if enabled by policy.",
      "summary": "Get a system settings record by ID (virtual_account_system_settings table)",
      "parameters": [
        {
          "name": "id",
          "description": "System setting primary key (UUID)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "The requested system settings record",
        "typeName": "virtual_account_system_settings"
      },
      "path": "/virtualAccount/systemSettings/{id}",
      "method": "get"
    },
    {
      "specification": "This operation creates a system settings record. Used by admin super user to register new operational, infra/security/config settings in the system as described in admin/infra/security requirements. Uses the virtual_account_system_settings table.",
      "description": "This operation allows a privileged admin or super admin to create a new system configuration or setting. The request body specifies the domain (feature/area), unique setting_key, value, and description. Validation rules enforce uniqueness of (domain, setting_key) per schema, and type/value compliance.\n\nPermissions: RBAC restricted to super admin or allowed admin users only. The action is fully logged for security tracking purposes. On success, responds with the created setting entry. Returns 422 for validation, 403 for forbidden, 409 for conflict, 500 for system errors. Use together with PATCH (list), GET (detail), PUT (update), and DELETE (if allowed).",
      "summary": "Create a new system setting (virtual_account_system_settings table)",
      "parameters": [],
      "requestBody": {
        "description": "System setting creation info (domain, key, value, description, etc)",
        "typeName": "virtual_account_system_settings.ICreate"
      },
      "responseBody": {
        "description": "The newly created system setting record",
        "typeName": "virtual_account_system_settings"
      },
      "path": "/virtualAccount/systemSettings",
      "method": "post"
    },
    {
      "specification": "This operation updates a system settings record by its primary key. Used to edit the value, description, or other modifiable columns. Uses the virtual_account_system_settings table.",
      "description": "Updates an existing system setting entry identified by its UUID. Permitted updates: value, description, possibly other descriptive columns. The (domain, setting_key) pair is not modifiable. Only allowed for super admins or allowed configuration admins under RBAC. Every update is fully logged for replay/investigation/audit purposes.\n\nValidation ensures type, constraint (not already deleted/disabled), and all reference checks. Returns updated record on success, 404 for not found, 409 on constraint violation, 403 for RBAC, or 422 for request errors. Use together with PATCH (list), GET (detail), POST (create), and DELETE (if permitted).",
      "summary": "Update a system setting by ID (virtual_account_system_settings table)",
      "parameters": [
        {
          "name": "id",
          "description": "Target system setting record ID (UUID)",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Update info for system setting (new value, description, etc)",
        "typeName": "virtual_account_system_settings.IUpdate"
      },
      "responseBody": {
        "description": "Updated system settings record",
        "typeName": "virtual_account_system_settings"
      },
      "path": "/virtualAccount/systemSettings/{id}",
      "method": "put"
    },
    {
      "specification": "Implements deletion of a single system settings record in the 'virtual_account_system_settings' table. Supports full removal based on unique settings ID, for system-level configuration management. Designed for privileged admin usage only. Ensures all settings changes are strictly auditable and irreversible. PK constraint enforced by Prisma. Used for disabling or purging obsolete or sensitive configuration values. 3NF—removes only atomic system config records, never aggregate or related entities.",
      "description": "This endpoint deletes a specific system configuration record from 'virtual_account_system_settings'. \n\nThe primary purpose is to allow administrators to remove obsolete, revoked, or incorrect system settings. It enforces strict privilege requirements—only system, infra, or security admins can call this API. Deletion is tracked in audit logs as per security policy requirements in the requirements reports (see 권한·감사·보안).\n\nRelationally, this operates exclusively on the configuration row identified by 'id' PK in the table. There are no cascading deletes to other entities—child references (if any) are not deleted. Business logic ensures non-recoverable operations are logged. Deletion requests are verified for orphan creation (should not break config dependencies).\n\nIf an invalid/nonexistent ID is provided, the API returns 404. If deleted, no further queries for this 'id' should succeed. On error, a permission or internal error code is returned as specified in the OpenAPI standard for this service domain.",
      "summary": "Delete a system settings record by its ID from 'virtual_account_system_settings' table.",
      "parameters": [
        {
          "name": "id",
          "description": "Primary key ID of the system settings record to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Operation result - typically empty on success, with status; error if record not found or permission denied.",
        "typeName": "IVirtualAccountSystemSettings.IDeleteResult"
      },
      "path": "/virtualAccount/systemSettings/{id}",
      "method": "delete"
    },
    {
      "specification": "Implements paginated, filterable listing/search of all OAuth2 client credential entries in the 'virtual_account_oauth_clients' table. Returns application/json. Useful for admin UI or integration listing. Supports filters by client_id, provider_name, enabled, integration_type. Pagination (page/size) and sorting supported for dashboard and admin screens. Designed to be RBAC-controlled.",
      "description": "This endpoint retrieves a paginated and filterable list of OAuth2 client credentials registered in the 'virtual_account_oauth_clients' table. \n\nCore use case: admin dashboard or system operator screens for credential registry management, audit, and rollover. Search parameters allow precise lookup by client_id, provider, status, and integration_type. Returns essential credential metadata, never secrets. Results are paged in accordance with frontend requirements; large result sets are split for performance/UX logic. Designed for RBAC admin use only.\n\nQuerying this API does not reveal any sensitive material—only identifiers and metadata. If unauthorized or insufficient privileges, the API returns a 403 error. Follows all PII/security logging rules in the security spec. Error responses follow OpenAPI best practices.",
      "summary": "List/filter/search OAuth2 client registry entries from 'virtual_account_oauth_clients'.",
      "parameters": [],
      "requestBody": {
        "description": "Filter and pagination/query options for listing OAuth2 clients (client_id, provider_name, integration_type, enabled, page/size, sort).",
        "typeName": "IVirtualAccountOAuthClients.IRequest"
      },
      "responseBody": {
        "description": "Paged result set with client configurations (no secret values); metadata only.",
        "typeName": "IPageIVirtualAccountOAuthClients"
      },
      "path": "/virtualAccount/oauthClients",
      "method": "patch"
    },
    {
      "specification": "Implements retrieval (by PK) of a single OAuth2 client credential record from 'virtual_account_oauth_clients' table for admin inspection, validation, or integration configuration. Supports privilege checks. Prisma guarantees unique UUID selector.",
      "description": "This endpoint fetches the details of a single OAuth2 client record from 'virtual_account_oauth_clients'. \n\nIntended for system administrators, credential rotators, or integration maintainers, the core use is to inspect client_id, integration_type, provider_name, enable/disable status, and registration meta. Does not reveal secrets. Rooted in RBAC enforcement—as per security requirements documentation, improper access is forbidden.\n\nThe operation performs a direct PK lookup using the 'id' parameter. If record exists, its data is returned (fast path). Otherwise, returns 404. All access is logged for compliance. No side effects, and never changes any data. Follows security, audit, and error design outlined in requirements/Prisma schema.",
      "summary": "Get detailed info for a single OAuth2 client from 'virtual_account_oauth_clients'.",
      "parameters": [
        {
          "name": "id",
          "description": "The PK UUID of the OAuth2 client credential to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Metadata/details of the OAuth2 client record (never contains secrets).",
        "typeName": "IVirtualAccountOAuthClients"
      },
      "path": "/virtualAccount/oauthClients/{id}",
      "method": "get"
    },
    {
      "specification": "Creates a new OAuth2 client registry entry (credential metadata) in 'virtual_account_oauth_clients'. Used for onboarding new ERP, PG, Mall, or Bank integration tokens/identifiers. Requires all meta except secrets (handled externally). Strictly RBAC-controlled, only platform/integration admins allowed.",
      "description": "This endpoint creates a new OAuth2 client credential entry in 'virtual_account_oauth_clients'.\n\nThe API expects all required metadata in the request body (client_id, provider_name, integration_type, enabled). Sensitive secrets/tokens are NOT stored in this table and must be handled separately (per security design). After creation, the returned record includes metadata, not secret. \n\nBusiness rules: unique client_id enforced, 'enabled' flag honored, all events audited (see 보안정책/권한관리). Violations (dup client_id) return 409. On success, the created credential's metadata is returned. Applies full privilege checks as relevant to this domain (RBAC: only admins).",
      "summary": "Create a new OAuth2 client registry entry in 'virtual_account_oauth_clients'.",
      "parameters": [],
      "requestBody": {
        "description": "Payload for new OAuth2 client credential record, including client_id, enabled, provider, integration_type.",
        "typeName": "IVirtualAccountOAuthClients.ICreate"
      },
      "responseBody": {
        "description": "OAuth2 client credential metadata for newly created record (excluding secrets).",
        "typeName": "IVirtualAccountOAuthClients"
      },
      "path": "/virtualAccount/oauthClients",
      "method": "post"
    },
    {
      "specification": "Updates an existing OAuth2 client credential's metadata by PK from 'virtual_account_oauth_clients'. Used to alter client status, provider, or integration configuration for secure external API integration. Does not handle or return credential secrets. Strong RBAC enforcement to update only by admin roles.",
      "description": "This endpoint updates an existing OAuth2 client credential metadata in 'virtual_account_oauth_clients' identified by its UUID. \n\nUsed for credential rollover, enabling/disabling integrations, editing provider or configuration meta. Sensitive tokens are never stored or returned—this API covers metadata fields only. PK constraint on 'id' parameter is enforced by Prisma for strict integrity. Business rules: only enabled admins with RBAC update permission can call this API. Audit log is recorded.\n\nIf record does not exist (404) or is immutable (locked), errors are returned. On success, the modified credential metadata is returned.",
      "summary": "Update the metadata for a specific OAuth2 client in 'virtual_account_oauth_clients'.",
      "parameters": [
        {
          "name": "id",
          "description": "PK UUID of OAuth2 client credential to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Partial or full update info for OAuth2 client (metadata fields only).",
        "typeName": "IVirtualAccountOAuthClients.IUpdate"
      },
      "responseBody": {
        "description": "Updated OAuth2 client credential metadata (no secrets).",
        "typeName": "IVirtualAccountOAuthClients"
      },
      "path": "/virtualAccount/oauthClients/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes an OAuth2 client credential record by PK from 'virtual_account_oauth_clients'. For admin use only, per security policy. Used for revocation/rotation and decommissioning of credentials for ERP, Mall, Bank, or PG external APIs. All operations are audited and only metadata records are deleted (never secret values).",
      "description": "This endpoint deletes a specific OAuth2 client credential's metadata from 'virtual_account_oauth_clients'.\n\nIntended for admin-only use—removes credential registry for a given client app/integration. Typical use cases: de-provisioning, credential rollover, external integration cutover. Deletion is non-recoverable and is always audited as per the security and compliance requirements. Deletes only the metadata row and never includes any secrets or child records in other tables. Fails with 404 if record is not found.\n\nStrictly RBAC-governed. Permission or missing resource errors follow OpenAPI error design.",
      "summary": "Delete an OAuth2 client credential registry record by ID from 'virtual_account_oauth_clients'.",
      "parameters": [
        {
          "name": "id",
          "description": "PK UUID of OAuth2 client credential to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Operation result - typically empty on success or error if not found or unauthorized.",
        "typeName": "IVirtualAccountOAuthClients.IDeleteResult"
      },
      "path": "/virtualAccount/oauthClients/{id}",
      "method": "delete"
    },
    {
      "specification": "Lists/searches HMAC API key records in 'virtual_account_hmac_keys' table. Implements HMAC credential registry admin feature for security and external integration policies. Supports filter/pagination by external_system, key_label, enabled, and sorts. No secret values ever returned. Admin/RBAC required.",
      "description": "This endpoint provides paged and filterable listing for HMAC credential metadata from 'virtual_account_hmac_keys'.\n\nCore use: dashboard/key registry management, key lifecycle tracking, audit, and security dashboard. Filtering by external_system and enabled state is supported, as is pagination and sort. No secret values stored or returned here per security requirements—only meta and status. Only visible to platform/system admins. Unauthorized access returns 403. Paged result for high-volume registries.",
      "summary": "List/search HMAC key registry entries from 'virtual_account_hmac_keys'.",
      "parameters": [],
      "requestBody": {
        "description": "Query options for HMAC key registry (external_system, key_label, enabled, page/size, sort).",
        "typeName": "IVirtualAccountHmacKeys.IRequest"
      },
      "responseBody": {
        "description": "Paged result with HMAC key registry (no secrets, only metadata).",
        "typeName": "IPageIVirtualAccountHmacKeys"
      },
      "path": "/virtualAccount/hmacKeys",
      "method": "patch"
    },
    {
      "specification": "Retrieves a specific HMAC key metadata record by ID from 'virtual_account_hmac_keys' for inspection/audit. Used for dashboard/key explorer access, key rotation prep. Key secrets never exposed. Only visible to credential admins/RBAC roles.",
      "description": "Fetches the metadata for a single HMAC API key from 'virtual_account_hmac_keys'.\n\nUsed by key registry explorers, admin portal, or integration automation editors. Reveals meta fields, status, usage info only; never returns cryptographic secret. Relies on Prisma PK for selection; RBAC-permissioned admin only. Returns 404 if not found, or 403 for unauthorized. Full event is audit-logged. No update or secret revealed.\n\nSupports only PK query (no composite key/lookup by label).",
      "summary": "Get metadata/details for a single HMAC key from 'virtual_account_hmac_keys'.",
      "parameters": [
        {
          "name": "id",
          "description": "UUID PK of the HMAC key to retrieve.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Details/metadata for the HMAC key (never contains secrets).",
        "typeName": "IVirtualAccountHmacKeys"
      },
      "path": "/virtualAccount/hmacKeys/{id}",
      "method": "get"
    },
    {
      "specification": "Creates new HMAC key registry metadata in 'virtual_account_hmac_keys'. For onboarding new HMAC keys for ERP, Mall, Bank/PG integration. Handles only meta, never secrets. RBAC admin only. PK uniqueness enforced. Used during security credential onboarding, key rotation planning, or vendor migration. All events audit-logged for compliance.",
      "description": "Creates a new HMAC key registry entry in 'virtual_account_hmac_keys'.\n\nUsed by security/integration admins to onboard a new external API integration credential. All required field data provided in request body: external_system, key_label, enabled, expiration dates, etc. No cryptographic secrets handled by this API (secrets managed in runtime/vault). PK/label uniqueness enforced. Full privilege and admin role checks apply. All events and changes are recorded for IT compliance (per requirements & 보안 정책). \n\nOn duplicate label/external_system, returns 409. Returns created record's metadata on success.",
      "summary": "Register a new HMAC key meta entry in 'virtual_account_hmac_keys'.",
      "parameters": [],
      "requestBody": {
        "description": "Meta for creating an HMAC key record (external_system, key_label, status, etc.).",
        "typeName": "IVirtualAccountHmacKeys.ICreate"
      },
      "responseBody": {
        "description": "Created HMAC key metadata (excludes secrets).",
        "typeName": "IVirtualAccountHmacKeys"
      },
      "path": "/virtualAccount/hmacKeys",
      "method": "post"
    },
    {
      "specification": "Updates metadata for a single HMAC key by PK from 'virtual_account_hmac_keys'. Used for key lifecycle management, disabling, updating label, or annotating rotation. Secret never handled/returned. Admin-only per RBAC. All actions are audit-logged. Must not enable/disable keys that affect system stability without checks.",
      "description": "Updates an HMAC key registry record's metadata identified by PK UUID. \n\nUsed by security/integration admins to update status (enable/disable), rotate timestamp, or label for a key. PK uniqueness enforced. Changing meta may affect integration/automation—business logic should prevent accidental disabling of in-use keys. All changes are audit-logged. RBAC enforced strictly for write access.\n\nNo secret key material is ever returned or accepted. Fully follows admin security and compliance policy. Fails with 404 if key not found. Returns updated record's metadata on success.",
      "summary": "Update metadata for a single HMAC key in 'virtual_account_hmac_keys'.",
      "parameters": [
        {
          "name": "id",
          "description": "UUID PK of HMAC key to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "Fields for updating HMAC key metadata (status/label/etc, never secrets).",
        "typeName": "IVirtualAccountHmacKeys.IUpdate"
      },
      "responseBody": {
        "description": "Updated HMAC key registry metadata (no secrets).",
        "typeName": "IVirtualAccountHmacKeys"
      },
      "path": "/virtualAccount/hmacKeys/{id}",
      "method": "put"
    },
    {
      "specification": "Deletes a single HMAC key registry metadata record by PK UUID from 'virtual_account_hmac_keys'. Used for credential revocation lifecycle and deletion. PK uniqueness enforced. Never handles or reveals secrets. RBAC-controlled, admin access only.",
      "description": "Deletes a metadata row for an HMAC credential key from 'virtual_account_hmac_keys' table, by PK. \n\nPrimary use: revoke, remove, or prune expired or unused external integration credentials. Never deletes or reveals secrets. Operation is irreversible and events are always audit-logged for compliance. Only RBAC-enforced admins can execute; errors returned for missing/not found keys (404), or privilege denied (403). \n\nSuccessful call returns empty or basic result. External resource cleanup is handled by separate process (if needed).",
      "summary": "Delete metadata for HMAC key by PK from 'virtual_account_hmac_keys'.",
      "parameters": [
        {
          "name": "id",
          "description": "PK UUID of HMAC key to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Operation result - empty or error information only; never returns key material.",
        "typeName": "IVirtualAccountHmacKeys.IDeleteResult"
      },
      "path": "/virtualAccount/hmacKeys/{id}",
      "method": "delete"
    },
    {
      "specification": "Implements read-only, paginatable dashboard reporting endpoint for denormalized/materialized/cached system stats from the 'virtual_account_materialized_stats' table. Used solely for performance-optimized dashboard/analytics views. No updates allowed to this table by API. Dashboard stats provide key metrics: number of accounts, failed deposits, recent notification delivery, etc. Relies on ETL jobs or batch refresh, never direct user edits. Admin or dashboard RBAC required.",
      "description": "This endpoint exposes performance and dashboard stats as cached/denormalized records from 'virtual_account_materialized_stats'.\n\nSupports query, pagination, filter by stat_key/as_of, etc., for admin/dashboard context (never writable by API). Data is used to rapidly populate graphs, tables, and KPIs for UI, management consoles, and scheduled analytics jobs. Read-only for all users. RBAC/permission-controlled. Unauthenticated requests return 403. If query is empty, returns current paginated default dashboard.\n\nNever reveals business-sensitive raw details—only aggregates and dashboard values per best practice. Errors use OpenAPI error semantics (never reveals table or query structure).",
      "summary": "Get paged list of dashboard/reporting stats from 'virtual_account_materialized_stats'.",
      "parameters": [],
      "requestBody": {
        "description": "Query params for dashboard stats (stat_key, as_of, page/size, sort).",
        "typeName": "IVirtualAccountMaterializedStats.IRequest"
      },
      "responseBody": {
        "description": "Paged dashboard metrics/statistics data from materialized stats cache/reporting table.",
        "typeName": "IPageIVirtualAccountMaterializedStats"
      },
      "path": "/virtualAccount/materializedStats",
      "method": "patch"
    },
    {
      "specification": "This operation retrieves a single materialized statistics snapshot by its unique identifier (id). The request will return detailed information about the specified materialized stat row, including the stat key, current value, and snapshot timestamp. This API is read-only and is used to support dashboard drill-downs or detailed stat auditing in the virtual account system admin interface. Links directly to the virtual_account_materialized_stats DB table (which stores read-only, denormalized reporting aggregates or caches used for dashboards, analytics, or performance optimization).",
      "description": "Retrieves the details of a specific materialized statistics record using its unique ID.\n\nThis endpoint provides direct access to the denormalized, materialized stat snapshot row in the database. It is primarily used for dashboard analytics, admin audits, or system health checks by referencing the stat ID from performance charts, alerts, or reporting drilldowns. This ensures that details of the stat, such as the metric key (e.g., 'active_accounts', 'fail_deposit_count'), value, and snapshot timestamp, can be reviewed or verified directly by administrators.\n\nOnly users with appropriate read permissions to system metrics are allowed access; sensitive or performance stats may require additional security controls. If the stat ID does not exist or has expired/been purged, a 404 Not Found error will be returned. Referenced by admin dashboard for stat drill-downs; no modification of the stat occurs with this endpoint.",
      "summary": "Get details of a single virtual_account_materialized_stats record by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "Unique identifier for the materialized stats record to fetch.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Materialized stats record with key, value, and timestamp.",
        "typeName": "virtual_account_materialized_stats"
      },
      "path": "/virtualAccount/materializedStats/{id}",
      "method": "get"
    },
    {
      "specification": "This operation creates a new record in the virtual_account_materialized_stats table. It is used by batch jobs, admin tools, or other system automation to insert new stat snapshots (e.g., after ETL processing or dashboard stats refresh). The request body contains the metric key, value, and timestamp. Creation is strictly audit-logged and permissioned, as typical application code should not write to materialized stats directly; only trusted system or admin operations should use this endpoint. Relates to the virtual_account_materialized_stats DB table for dashboard/reporting cache insertion.",
      "description": "Creates a new materialized statistics snapshot record in the system for reporting or analytics purposes.\n\nThis endpoint is typically used by system automation (e.g., ETL batch job, scheduled stats calculation), or by super administrators, to insert the latest stat value snapshot after bulk processing. It records the stat key, value (as string), and the as_of timestamp, making it available for fast dashboard rendering and reporting. Creation events are audit-logged, and only highly privileged users or system accounts should call this operation. On success, returns the complete created materialized stats row.",
      "summary": "Create a new virtual_account_materialized_stats record (stat snapshot).",
      "parameters": [],
      "requestBody": {
        "description": "Materialized stat entry data to create (key, value, timestamp).",
        "typeName": "virtual_account_materialized_stats.ICreate"
      },
      "responseBody": {
        "description": "Created materialized stats record with all fields.",
        "typeName": "virtual_account_materialized_stats"
      },
      "path": "/virtualAccount/materializedStats",
      "method": "post"
    },
    {
      "specification": "This operation updates an existing row from the virtual_account_materialized_stats table by its ID. Permits modifying the stat key, value, or as_of timestamp for a cached/reporting stat. The request body provides the new values. This operation is permitted only for system maintenance or privileged admin repair tasks; typical usage is rare as materialized stats are generally immutable. Used for correcting reporting errors or system metric rollbacks. Linked directly to the virtual_account_materialized_stats DB table.",
      "description": "Updates a materialized statistics record with the specified ID in the system. Only the stat_key, stat_value, or as_of timestamp can be changed.\n\nThis endpoint is restricted to highly privileged administrative and system automation contexts. It allows correcting a mistake or rolling back reporting metrics in exceptional situations. All update operations are fully audit-logged to meet compliance and accuracy requirements. If the record does not exist, a 404 Not Found error will result. Normally, dashboard/stat usage does not require updates except for manual corrections.",
      "summary": "Update an existing virtual_account_materialized_stats record by ID.",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the materialized stats record to update.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "description": "New stat values to update (stat_key, stat_value, as_of)",
        "typeName": "virtual_account_materialized_stats.IUpdate"
      },
      "responseBody": {
        "description": "Updated materialized stats record with all relevant fields.",
        "typeName": "virtual_account_materialized_stats"
      },
      "path": "/virtualAccount/materializedStats/{id}",
      "method": "put"
    },
    {
      "specification": "This operation deletes a materialized stats row by its unique ID from the virtual_account_materialized_stats table. It is used only for system maintenance, cleanup, or exceptional admin actions (e.g., purging obsolete stat snapshots or reclaiming storage). Typical usage is rare, and most stat data is managed by system jobs. The operation requires high-level privileges and must be audit-logged to prevent accidental reporting loss. References the virtual_account_materialized_stats table, enforces strict access and validation against critical/active stats.",
      "description": "Deletes an existing materialized statistics row from the stats snapshots table by its unique ID.\n\nThis endpoint is called only by privileged system automation or administrators (e.g., when cleaning up old/retired stat keys, or if stale/corrupt data needs to be forcibly removed). Access is strictly permissioned, and all deletion events are audit-logged. If the record does not exist or is protected as an immutable snapshot, a 404 or 403 error will be returned as appropriate. Used for rare dashboard/performance maintenance cases only.",
      "summary": "Delete a virtual_account_materialized_stats record by ID (system/admin use only).",
      "parameters": [
        {
          "name": "id",
          "description": "ID of the materialized stats record to delete.",
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": null,
      "responseBody": {
        "description": "Success (record deleted, or confirmation of operation).",
        "typeName": "virtual_account_materialized_stats.IDeleteResponse"
      },
      "path": "/virtualAccount/materializedStats/{id}",
      "method": "delete"
    }
  ],
  "components": {
    "schemas": {
      "IVirtualAccountCustomer.IRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "고객명(검색어, 부분일치 필터, optional). 고객 리스트 및 대시보드 등에서 조건 검색할 때 사용."
          },
          "phone": {
            "type": "string",
            "description": "고객 전화번호(검색, optional)."
          },
          "email": {
            "type": "string",
            "description": "이메일 주소(검색, optional)."
          },
          "registered_from": {
            "type": "string",
            "format": "date-time",
            "description": "등록일 검색 시작(ISO8601)."
          },
          "registered_to": {
            "type": "string",
            "format": "date-time",
            "description": "등록일 검색 종료(ISO8601)."
          },
          "deleted": {
            "type": "boolean",
            "description": "삭제된 고객 포함 여부. true일 경우 소프트 삭제된 고객도 포함."
          },
          "page": {
            "type": "integer",
            "description": "페이지 번호(1부터). 기본값은 1."
          },
          "limit": {
            "type": "integer",
            "description": "페이지당 최대 건수. 기본값은 20 또는 환경설정."
          }
        },
        "description": "가상계좌 고객 목록 조회/검색/필터/페이징 조건 DTO. 이름, 연락처, 등록일 구간, 삭제 상태 등 다양한 조건으로 필터링하며, 관리자 대시보드, 고객 관리, 엑셀 내보내기 등 복합 조건 API에 사용.",
        "required": []
      },
      "IPageIVirtualAccountCustomer": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountCustomer"
            },
            "description": "페이지별 고객 요약 정보 배열. 각 원소는 IVirtualAccountCustomer 타입."
          }
        },
        "description": "고객 리스트 조회 시 페이징 결과 래퍼. pagination(페이지정보), data(고객 배열)로 구성되며, 대시보드, 검색 화면 등에서 사용.",
        "required": [
          "pagination",
          "data"
        ]
      },
      "IVirtualAccountCustomer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "고객 고유 식별자. Prisma virtual_account_customers.id 컬럼 기준."
          },
          "name": {
            "type": "string",
            "description": "고객명. 회원 실명 입력, 기본 KYC 요구조건."
          },
          "phone": {
            "type": "string",
            "description": "고객 연락처(핸드폰번호). 중복 없이 유일하도록 보장. 인증 및 알림 목적 필수."
          },
          "email": {
            "type": "string",
            "description": "고객 이메일. 중복 없음. 로그인, 알림, 비밀번호 재설정, 2FA 연계."
          },
          "registered_at": {
            "type": "string",
            "format": "date-time",
            "description": "고객 등록일시. ISO8601. 서비스 시작 시점 및 감사로그용."
          },
          "deleted_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "description": "삭제(탈퇴) 시각. 미삭제시 null."
          }
        },
        "description": "가상계좌 시스템의 고객 리스트/상세의 표준 반환 타입입니다. 이름, 연락처, 이메일, 등록일자, 삭제여부(soft delete) 정보만 포함.",
        "required": [
          "id",
          "name",
          "phone",
          "email",
          "registered_at"
        ]
      },
      "IVirtualAccountCustomer.ICreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "신규 고객명. 필수 입력."
          },
          "phone": {
            "type": "string",
            "description": "핸드폰/연락처(유일)."
          },
          "email": {
            "type": "string",
            "description": "고객 이메일(유일)."
          }
        },
        "required": [
          "name",
          "phone",
          "email"
        ],
        "description": "고객 신규 등록 시 입력데이터 DTO. 이름, 연락처, 이메일 필수."
      },
      "IVirtualAccountCustomer.IUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "수정할 이름. 생략 시 기존 유지."
          },
          "phone": {
            "type": "string",
            "description": "연락처 수정(중복불가 check)."
          },
          "email": {
            "type": "string",
            "description": "이메일 수정(중복불가 check)."
          }
        },
        "description": "고객 프로필(이름, 핸드폰, 이메일) 일부/전체 수정 요청 DTO. 등록일 등 변경 불가.",
        "required": []
      },
      "IVirtualAccountAdmin.IRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "관리자 계정명(검색)."
          },
          "email": {
            "type": "string",
            "description": "이메일(검색)."
          },
          "from_date": {
            "type": "string",
            "format": "date-time",
            "description": "계정 생성일(조회 시작)."
          },
          "to_date": {
            "type": "string",
            "format": "date-time",
            "description": "계정 생성일(조회 종료)."
          },
          "locked": {
            "type": "boolean",
            "description": "Lockout/잠금 여부."
          },
          "page": {
            "type": "integer",
            "description": "페이지 번호."
          },
          "limit": {
            "type": "integer",
            "description": "페이지당 수."
          }
        },
        "description": "관리자 계정 리스트/검색 필터 DTO. 계정명, 이메일, 기간, 잠금여부, 페이징 포함.",
        "required": []
      },
      "IPageIVirtualAccountAdmin": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountAdmin"
            }
          }
        },
        "description": "관리자 계정 리스트의 페이징 결과 DTO. admin 리스트화면, 검색 등.",
        "required": [
          "pagination",
          "data"
        ]
      },
      "IVirtualAccountAdmin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string",
            "description": "로그인 계정명(고유)."
          },
          "email": {
            "type": "string",
            "description": "관리자 이메일(고유, 알림/리포트 전송에도 사용)."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "등록일."
          },
          "last_login_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "description": "마지막 로그인 시각."
          },
          "locked_until": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "description": "계정 잠금 만료 일시."
          }
        },
        "description": "관리자 정보 상세 오브젝트. 민감정보(비번해시)는 포함하지 않음. RBAC관리, 감사로그, 대시보드 주체 등에서 사용.",
        "required": [
          "id",
          "username",
          "email",
          "created_at"
        ]
      },
      "IVirtualAccountAdmin.ICreate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "새 관리자 아이디(중복X)."
          },
          "password": {
            "type": "string",
            "description": "비밀번호(평문DTO)."
          },
          "email": {
            "type": "string",
            "description": "관리자 이메일(고유)."
          }
        },
        "required": [
          "username",
          "password",
          "email"
        ],
        "description": "관리자 계정 생성용 요청 DTO. 비번은 평문수신, 저장은 해시/암호화 적용."
      },
      "IVirtualAccountAdmin.IUpdate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "관리자명 변경시."
          },
          "email": {
            "type": "string",
            "description": "이메일 변경."
          },
          "locked_until": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "description": "잠금 해제/설정시."
          }
        },
        "description": "관리자 정보 일부 수정 요청 DTO. 패스워드 변경은 별도 엔드포인트 운영 권장.",
        "required": []
      },
      "IVirtualAccountSuperAdmin.IRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "슈퍼관리자 계정명 필터."
          },
          "from_date": {
            "type": "string",
            "format": "date-time",
            "description": "등록(생성)일 기준 조회 시작."
          },
          "to_date": {
            "type": "string",
            "format": "date-time",
            "description": "등록(생성)일 기준 조회 종료."
          },
          "page": {
            "type": "integer",
            "description": "페이지 번호."
          },
          "limit": {
            "type": "integer",
            "description": "페이지당 행 수."
          }
        },
        "description": "슈퍼관리자 리스트, 관리 필터/페이징 DTO. 계정명, 기간 등 filter.",
        "required": []
      },
      "IPageIVirtualAccountSuperAdmin": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountSuperAdmin"
            }
          }
        },
        "description": "슈퍼관리자 리스트(페이징). data: 계정 배열, pagination: 페이징 메타.",
        "required": [
          "pagination",
          "data"
        ]
      },
      "IVirtualAccountPgProvider.IRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "PG사명(검색)."
          },
          "code": {
            "type": "string",
            "description": "PG코드(필터)."
          },
          "page": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          }
        },
        "description": "가상계좌 PG 시스템 (KG, TOSS 등) 리스트/검색/페이징 요청 DTO.",
        "required": []
      },
      "IPageIVirtualAccountPgProvider": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountPgProvider"
            }
          }
        },
        "description": "PG사 마스터 리스트(페이징). data: PG 배열, pagination 포함.",
        "required": [
          "pagination",
          "data"
        ]
      },
      "IVirtualAccountPgProvider": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "PG사 명칭."
          },
          "code": {
            "type": "string",
            "description": "PG코드."
          },
          "api_endpoint": {
            "type": "string",
            "description": "API 엔드포인트(URL)."
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "PG사 마스터 엔터티. 명칭,코드,API엔드 포인트 등 연동용 속성. 발급/연동 마스터 관리에 사용.",
        "required": [
          "id",
          "name",
          "code",
          "api_endpoint",
          "created_at",
          "updated_at"
        ]
      },
      "IVirtualAccountPgProvider.ICreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "PG사명."
          },
          "code": {
            "type": "string",
            "description": "PG사 코드(유일값)."
          },
          "api_endpoint": {
            "type": "string",
            "description": "연동용 API endpoint URI."
          }
        },
        "required": [
          "name",
          "code",
          "api_endpoint"
        ],
        "description": "PG사 신규 등록 DTO. 코드, 명칭, 엔드포인트 필수."
      },
      "IVirtualAccountPgProvider.IUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "명칭 수정."
          },
          "api_endpoint": {
            "type": "string",
            "description": "엔드포인트URI수정."
          }
        },
        "description": "PG사 마스터 정보 부분/전체 수정용 DTO. 코드 등 일부 속성 불변.",
        "required": []
      },
      "IVirtualAccountVirtualAccount.IRequest": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "고객 ID(필터)"
          },
          "status": {
            "type": "string",
            "description": "계좌 상태(예: ACTIVE, EXPIRED 등)"
          },
          "bank_id": {
            "type": "string",
            "format": "uuid",
            "description": "은행(필터)"
          },
          "pg_provider_id": {
            "type": "string",
            "format": "uuid",
            "description": "PG사(필터)"
          },
          "account_number": {
            "type": "string",
            "description": "계좌번호 일치검색"
          },
          "expire_from": {
            "type": "string",
            "format": "date-time",
            "description": "만료일 검색 시작일"
          },
          "expire_to": {
            "type": "string",
            "format": "date-time",
            "description": "만료일 검색 종료일"
          },
          "page": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          }
        },
        "description": "가상계좌 목록 조회, 필터링/페이징 요청 DTO.",
        "required": []
      },
      "IPageIVirtualAccountVirtualAccount": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountVirtualAccount"
            }
          }
        },
        "description": "가상계좌 페이징 리스트 응답. 대시보드 등에서 사용.",
        "required": [
          "pagination",
          "data"
        ]
      },
      "IVirtualAccountVirtualAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "customer_id": {
            "type": "string",
            "format": "uuid"
          },
          "bank_id": {
            "type": "string",
            "format": "uuid"
          },
          "pg_provider_id": {
            "type": "string",
            "format": "uuid"
          },
          "account_number": {
            "type": "string"
          },
          "expire_at": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "holder_name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "description": "가상계좌 정보 단일 오브젝트. 계좌번호, 만료일, 계좌상태, 소유자 등. admin/고객/연동/감사 화면에서 사용.",
        "required": [
          "id",
          "customer_id",
          "bank_id",
          "pg_provider_id",
          "account_number",
          "expire_at",
          "status",
          "holder_name",
          "created_at",
          "updated_at"
        ]
      },
      "IVirtualAccountVirtualAccount.ICreate": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "발급 대상 고객 PK"
          },
          "bank_id": {
            "type": "string",
            "format": "uuid"
          },
          "pg_provider_id": {
            "type": "string",
            "format": "uuid"
          },
          "account_number": {
            "type": "string"
          },
          "expire_at": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "holder_name": {
            "type": "string"
          }
        },
        "required": [
          "customer_id",
          "bank_id",
          "pg_provider_id",
          "account_number",
          "expire_at",
          "status",
          "holder_name"
        ],
        "description": "가상계좌 신규 발급/생성 요청 DTO. 사용자/은행/PG정보 등 필수 입력."
      },
      "IVirtualAccountVirtualAccount.IUpdate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "expire_at": {
            "type": "string",
            "format": "date-time"
          },
          "holder_name": {
            "type": "string"
          }
        },
        "description": "가상계좌 정보(상태, 만료일 등) 수정 DTO. 소유고객, 계좌번호 등 일부 필드 수정 불가.",
        "required": []
      },
      "IVirtualAccountAccountStatusLog.IRequest": {
        "type": "object",
        "properties": {
          "virtual_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "가상계좌 ID(필터)"
          },
          "admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "관리자 ID(필터)"
          },
          "from_status": {
            "type": "string"
          },
          "to_status": {
            "type": "string"
          },
          "from_date": {
            "type": "string",
            "format": "date-time"
          },
          "to_date": {
            "type": "string",
            "format": "date-time"
          },
          "page": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          }
        },
        "description": "가상계좌 상태변경 이력(로그) 조회 필터/페이징용 DTO.",
        "required": []
      },
      "IPageIVirtualAccountAccountStatusLog": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountAccountStatusLog"
            }
          }
        },
        "description": "가상계좌 상태로그 페이징/검색 응답형 DTO.",
        "required": [
          "pagination",
          "data"
        ]
      },
      "IVirtualAccountNotification.ICreate": {
        "type": "object",
        "properties": {
          "notification_template_id": {
            "type": "string",
            "format": "uuid"
          },
          "notification_channel_id": {
            "type": "string",
            "format": "uuid"
          },
          "event_type": {
            "type": "string"
          },
          "recipient_id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string"
          },
          "requested_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "알림 신규 등록용 DTO. 템플릿, 채널, 이벤트타입, 수신자 필수. 요청시각 미입력시 서버기준 자동.",
        "required": [
          "notification_template_id",
          "notification_channel_id",
          "event_type",
          "recipient_id",
          "status",
          "requested_at"
        ]
      },
      "IVirtualAccountNotification.IUpdate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "sent_at": {
            "type": "string",
            "format": "date-time"
          },
          "delivered_at": {
            "type": "string",
            "format": "date-time"
          },
          "notification_template_id": {
            "type": "string",
            "format": "uuid"
          },
          "notification_channel_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "description": "알림 상태, 템플릿/채널/시각 등 일부 정보 변경용 DTO. allowed fields만 수정됨.",
        "required": []
      },
      "IVirtualAccountNotificationTemplate.IRequest": {
        "type": "object",
        "properties": {
          "template_code": {
            "type": "string"
          },
          "channel_type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "language_code": {
            "type": "string"
          },
          "version": {
            "type": "integer"
          }
        },
        "description": "알림 템플릿 목록 검색/필터/페이징 DTO.",
        "required": []
      },
      "IPageIVirtualAccountNotificationTemplate": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountNotificationTemplate"
            }
          }
        },
        "description": "알림 템플릿 리스트/페이지네이션 응답 컨테이너.",
        "required": [
          "pagination",
          "data"
        ]
      },
      "IVirtualAccountNotificationTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "template_code": {
            "type": "string"
          },
          "channel_type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "body_format": {
            "type": "string"
          },
          "body_template": {
            "type": "string"
          },
          "language_code": {
            "type": "string"
          },
          "version": {
            "type": "integer"
          },
          "is_active": {
            "type": "boolean"
          }
        },
        "description": "알림 템플릿 단건 객체. 템플릿별 버전, 채널, 포맷, 활성여부 등 포함.",
        "required": []
      },
      "IVirtualAccountNotificationTemplate.ICreate": {
        "type": "object",
        "properties": {
          "template_code": {
            "type": "string"
          },
          "channel_type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "body_format": {
            "type": "string"
          },
          "body_template": {
            "type": "string"
          },
          "language_code": {
            "type": "string"
          },
          "version": {
            "type": "integer"
          },
          "is_active": {
            "type": "boolean"
          }
        },
        "required": [
          "template_code",
          "channel_type",
          "title",
          "body_format",
          "body_template",
          "language_code",
          "version",
          "is_active"
        ],
        "description": "알림 템플릿 신규 등록 DTO. 버전 및 각 채널/언어별 템플릿 특성 표현 가능."
      },
      "IVirtualAccountNotificationTemplate.IUpdate": {
        "type": "object",
        "properties": {
          "template_code": {
            "type": "string"
          },
          "channel_type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "body_format": {
            "type": "string"
          },
          "body_template": {
            "type": "string"
          },
          "language_code": {
            "type": "string"
          },
          "version": {
            "type": "integer"
          },
          "is_active": {
            "type": "boolean"
          }
        },
        "description": "알림 템플릿 속성 중 일부만 패치/PATCH 수정할 때 사용하는 DTO.",
        "required": []
      },
      "IVirtualAccountNotificationChannel.IRequest": {
        "type": "object",
        "properties": {
          "channel_type": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          }
        },
        "description": "알림 채널(카카오,메일,SMS 등) 리스트/검색/페이징요청 DTO.",
        "required": []
      },
      "IPageIVirtualAccountNotificationChannel": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountNotificationChannel"
            }
          }
        },
        "description": "알림 채널 목록의 표준 페이징 응답 타입.",
        "required": []
      },
      "IVirtualAccountNotificationChannel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "channel_type": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "settings_json": {
            "type": "string"
          }
        },
        "description": "알림 채널(카카오/메일/SMS 등) 정보 단건. 채널 특성, 활성화 상태, 채널 별 설정JSON 등 포함.",
        "required": []
      },
      "IVirtualAccountNotificationChannel.ICreate": {
        "type": "object",
        "properties": {
          "channel_type": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "settings_json": {
            "type": "string"
          }
        },
        "required": [
          "channel_type",
          "display_name",
          "is_active",
          "settings_json"
        ],
        "description": "알림 채널(카카오톡, 이메일 등) 신규 생성용 DTO. 채널특성, 설정 값 포함."
      },
      "IVirtualAccountNotificationChannel.IUpdate": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "settings_json": {
            "type": "string"
          }
        },
        "description": "알림 채널 일부 속성 패치/수정용 DTO. channel_type(구분)는 immutable.",
        "required": []
      },
      "IVirtualAccountNotificationEventLog.IRequest": {
        "type": "object",
        "properties": {
          "notification_id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string"
          },
          "logged_from": {
            "type": "string",
            "format": "date-time"
          },
          "logged_to": {
            "type": "string",
            "format": "date-time"
          },
          "page": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          }
        },
        "description": "알림 이벤트로그(발송시도, 실패 등) 검색/페이징DTO.",
        "required": []
      },
      "IPageIVirtualAccountNotificationEventLog": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountNotificationEventLog"
            }
          }
        },
        "description": "알림 이벤트 로그 목록 페이지 DTO.",
        "required": [
          "pagination",
          "data"
        ]
      },
      "IVirtualAccountNotificationEventLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "notification_id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "logged_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "알림 이벤트로그 단건. status, 상세(에러/trace), 기록시각 등 포함.",
        "required": []
      },
      "IVirtualAccountNotificationEventLog.ICreate": {
        "type": "object",
        "properties": {
          "notification_id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "logged_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "notification_id",
          "status",
          "logged_at"
        ],
        "description": "알림 이벤트 로그 신규 등록 DTO. status, desc, 발생시각 포함."
      },
      "IVirtualAccountNotificationEventLog.IUpdate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          }
        },
        "description": "알림 이벤트로그 일부 속성 patch용 DTO.",
        "required": []
      },
      "IVirtualAccountAuditLog.IRequest": {
        "type": "object",
        "properties": {
          "actor_id": {
            "type": "string",
            "format": "uuid"
          },
          "event_type": {
            "type": "string"
          },
          "target_type": {
            "type": "string"
          },
          "from_date": {
            "type": "string",
            "format": "date-time"
          },
          "to_date": {
            "type": "string",
            "format": "date-time"
          },
          "page": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          }
        },
        "description": "감사로그 리스트(행위자, 이벤트타입, 타깃, 기간 등) 조건과 페이징 구조. 보안, 대시보드, 내역 검색 필터 DTO.",
        "required": []
      },
      "IPageIVirtualAccountAuditLog": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountAuditLog"
            }
          }
        },
        "description": "감사로그(virtual_account_audit_logs) 리스트 표준 페이징 응답 구조.",
        "required": [
          "pagination",
          "data"
        ]
      },
      "IVirtualAccountAuditLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "actor_id": {
            "type": "string",
            "format": "uuid"
          },
          "actor_type": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "target_type": {
            "type": "string"
          },
          "target_id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string"
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "감사로그 단건 엔터티. 관리자, 고객, 시스템 행위의 감사/추적 목적.",
        "required": []
      },
      "IVirtualAccountAuditLog.ICreate": {
        "type": "object",
        "properties": {
          "actor_id": {
            "type": "string",
            "format": "uuid"
          },
          "actor_type": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "target_type": {
            "type": "string"
          },
          "target_id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string"
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "감사로그 신규 생성DTO. 행위자, 이벤트, 목표 등 필수. 감사이벤트 등록에만 사용.",
        "required": [
          "actor_id",
          "actor_type",
          "event_type",
          "target_type",
          "occurred_at"
        ]
      },
      "IVirtualAccountAuditLog.IUpdate": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          }
        },
        "description": "감사로그 설명/결과 등 일부 속성 patch용 DTO. 대부분 사후행위 보정이나 에러코드 추가시만 사용.",
        "required": []
      },
      "IVirtualAccountSecurityLog.IRequest": {
        "type": "object",
        "properties": {
          "actor_id": {
            "type": "string",
            "format": "uuid"
          },
          "actor_type": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "resource_type": {
            "type": "string"
          },
          "resource_id": {
            "type": "string"
          },
          "from_date": {
            "type": "string",
            "format": "date-time"
          },
          "to_date": {
            "type": "string",
            "format": "date-time"
          },
          "page": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          }
        },
        "description": "보안로그 리스트(시스템/관리자/고객별 행위 이벤트 등) 검색, 기간, 페이징 필터 DTO. 대시보드/포렌식 검색 등에 활용.",
        "required": []
      },
      "IVirtualAccountSuperAdmin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "슈퍼관리자 고유 식별자.\n\nPrisma 스키마 'virtual_account_super_admins.id' 컬럼에 해당하며, 시스템 내 슈퍼관리자를 고유하게 식별합니다. UUID 포맷으로 제공되며, 모든 슈퍼관리자 엔티티의 기본 키입니다."
          },
          "username": {
            "type": "string",
            "description": "로그인용 슈퍼관리자 계정명.\n\nPrisma 스키마 'virtual_account_super_admins.username' 컬럼에 해당하며, 루트 인증 목적으로 필요한 사용자 이름이며, 반드시 시스템 내 유일값이어야 합니다."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "계정 생성 시각을 나타내는 필드. 예시: '2025-06-01T13:00:00+09:00'.\n\n감사로그, 계정 모니터링 및 시스템 정책/보안 관점에서 중요합니다."
          }
        },
        "required": [
          "id",
          "username",
          "created_at"
        ],
        "description": "슈퍼관리자(최상위 관리자) 정보 오브젝트로, 시스템 설정/운영, 관리자 권한 관리 및 감사 정책 변경 등 전체 플랫폼 운영에 가장 높은 권한을 갖는 계정 정보입니다.\n\nPrisma 스키마의 virtual_account_super_admins 테이블을 기준으로 정의되며, username(계정명), created_at(생성시각) 등 핵심 식별정보만 포함하고 암호화된 비밀번호 등 민감정보는 절대 포함하지 않습니다.\n\n관리자 등급 구분(일반/슈퍼) 구현, 감사로그 접근, 긴급정책 관리 등에 활용됩니다."
      },
      "IVirtualAccountSuperAdmin.ICreate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "등록할 슈퍼관리자 ID(계정명). 유일성과 포맷 규칙을 따라야 하며, Prisma 테이블에서 username에 매핑됩니다.\n\n예시: 'supermaster2025'. 관리 및 감사 용도로 사용됨."
          },
          "password": {
            "type": "string",
            "description": "등록할 관리자 비밀번호(평문 수신, 저장은 해시 처리). 업무에서 입력시만 수집, 저장 시 반드시 해시화되어야 하며, Prisma에는 password_hash 형태로 저장됨."
          }
        },
        "required": [
          "username",
          "password"
        ],
        "description": "슈퍼관리자 신규 등록 요청 시 사용되는 DTO이며, username(계정명)과 비밀번호만을 입력받아, 생성 후 비밀번호는 즉시 해시 처리되어 저장/활용됩니다.\n\nPrisma 스키마의 virtual_account_super_admins 테이블 생성 컨벤션과 일치하며, 관리자 추가/온보딩 프로세스에서 사용됩니다."
      },
      "IVirtualAccountSuperAdmin.IUpdate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "관리자명(변경시). 유일성 검사가 동반됨. Prisma의 username 컬럼에 해당합니다."
          },
          "password": {
            "type": "string",
            "description": "비밀번호 수정용 필드(평문 전달, 저장은 해시화 처리). 비밀번호 변경 요청 시에만 입력합니다."
          }
        },
        "required": [],
        "description": "슈퍼관리자 정보 수정(계정명, 비밀번호) 시 사용되는 DTO로, 변경 가능한 필드만 포함하며 모든 항목은 선택적으로 처리됩니다.\n\nPrisma 스키마의 virtual_account_super_admins 수정 정책에 준함."
      },
      "IOperationResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "조작(생성/수정/삭제 등) 성공 여부. API 응답 처리의 표준적 성공/실패 플래그입니다."
          },
          "message": {
            "type": "string",
            "description": "성공 또는 오류 코멘트.\n\n응답 메시지는 사용자의 작업 결과(정상 처리, 인증 오류, 유효성 실패 등)를 명확히 안내하며, 화면에 바로 표출 가능합니다."
          }
        },
        "required": [
          "success"
        ],
        "description": "업무 API 조작 결과(성공/실패, 메시지 등)를 표준적으로 반환하는 오브젝트 타입입니다.\n\nCRUD, 정책적 DELETE 등에서 성공 여부와 부가 설명을 한 번에 전달할 때 사용합니다."
      },
      "IVirtualAccountRole.IRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "롤명의 필터링/검색 키워드.\n\nPrisma 'virtual_account_roles.name' 컬럼에 매핑되며, RBAC 권한조회/설정 화면 등에서 사용합니다."
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "요청 페이지 넘버.\n\n기본값은 1이고, 페이징 구현 시 필요합니다."
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "페이지 당 데이터 건수.\n\n표준값은 100 또는 API 기본 설정 적용(변경 가능)."
          }
        },
        "required": [],
        "description": "역할(RBAC Role) 목록 조회 시 검색/필터 용도로 사용되는 파라미터 DTO.\n\nPrisma virtual_account_roles 테이블 컬럼과 연계하여, 이름, 페이징 등 관리화면에서 필수로 활용됩니다."
      },
      "IPageIVirtualAccountRole": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountRole"
            },
            "description": "현 페이지의 역할 목록"
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "역할(RBAC Role) 목록의 페이징 결과 오브젝트. IPage<T> 패턴을 따르며, pagination(페이징정보) 및 data(역할 목록 배열)로 구성됩니다.\n\n실제 조회시 페이지별 데이터와 전체/총건수 및 페이지 정보가 함께 리턴됩니다."
      },
      "IVirtualAccountRole": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "역할(롤) 고유 식별자.\n\nPrisma 'virtual_account_roles.id' 컬럼. RBAC에서 각 관리자/슈퍼관리자에게 부여되는 유일한 롤 식별용."
          },
          "name": {
            "type": "string",
            "description": "롤명.\n\n실제 업무 기능(ADMIN, SUPER_ADMIN, AUDITOR 등) RBAC 이름과 일치."
          },
          "description": {
            "type": "string",
            "description": "롤 상세 설명.\n\n권한 범위, 할당 가능 관리자 레벨, 주요 기능 등을 관리자 화면에 표기."
          }
        },
        "required": [
          "id",
          "name",
          "description"
        ],
        "description": "가상계좌 시스템 내 RBAC(역할기반 권한관리) 역할 엔티티 오브젝트로, Prisma virtual_account_roles 테이블을 기반으로 하며 name, description 등 롤 식별과 설명 필드를 갖습니다.\n\n역할별 권한 맵핑 및 관리자 RBAC 로직에서 활용합니다."
      },
      "IVirtualAccountRole.ICreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "RBAC 역할명. 신규 롤 등록시 유일성이 보장되어야 하며, Prisma 'virtual_account_roles.name' 컬럼에 세팅됩니다."
          },
          "description": {
            "type": "string",
            "description": "롤 상세 설명.\n\n업무 도메인상 이 역할의 영역과 허용 가능한 작업을 구체적으로 작성."
          }
        },
        "required": [
          "name",
          "description"
        ],
        "description": "RBAC 롤 신규 등록 시 사용하는 DTO로, name(역할명)과 description(설명)만 기입하며, 기타 식별자는 자동 할당됩니다.\n\n퍼미션 맵핑 및 시스템 권한 정책 수립 시 활용."
      },
      "IVirtualAccountRole.IUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "변경할 RBAC 역할명(옵션). Prisma 'virtual_account_roles.name' 컬럼 수정용."
          },
          "description": {
            "type": "string",
            "description": "변경할 롤 설명(옵션). Prisma 'virtual_account_roles.description' 필드 업데이트용."
          }
        },
        "required": [],
        "description": "RBAC 역할 정보(롤명/설명 등) 수정 시 사용하는 DTO로, 변경 가능한 항목만 포함되며, 부분 업데이트를 지원합니다."
      },
      "IVirtualAccountPermission.IRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "퍼미션 코드(코드명) 필터링/검색에 사용. Prisma 'virtual_account_permissions.code' 컬럼 활용."
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "페이지 넘버(페이징 쿼리용). 기본값 1."
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "한 페이지당 데이터 건수. 기본값 100 또는 환경설정값 적용."
          }
        },
        "required": [],
        "description": "RBAC 퍼미션(권한) 목록을 검색/필터/페이징할 때 사용하는 파라미터 오브젝트로, Prisma virtual_account_permissions 테이블 검색에 연동됩니다."
      },
      "IPageIVirtualAccountPermission": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountPermission"
            },
            "description": "현 페이지 퍼미션(권한) 목록 배열"
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "퍼미션(권한) 리스트의 페이징 응답 포맷으로, pagination(페이지 정보) 및 data(권한 배열)로 구성됩니다."
      },
      "IVirtualAccountPermission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "권한(퍼미션) 고유 식별자. Prisma 'virtual_account_permissions.id' 컬럼에 매핑."
          },
          "code": {
            "type": "string",
            "description": "퍼미션 코드명. RBAC 권한 관리에서 권리, 기능 명칭 및 접근 키. Prisma 'virtual_account_permissions.code' 와 일치."
          },
          "description": {
            "type": "string",
            "description": "퍼미션 상세 설명. 실제 권리의 업무적 의미, 제한 조건, 활용처 등."
          }
        },
        "required": [
          "id",
          "code",
          "description"
        ],
        "description": "가상계좌 RBAC 퍼미션(권한) 엔티티 오브젝트로, Prisma 'virtual_account_permissions' 테이블에 정의된 권한 코드, 설명 등이 포함됩니다. RBAC 정책, 관리자 권한 화면 등에서 기준 정보로 사용."
      },
      "IPage.IPagination": {
        "type": "object",
        "properties": {
          "current": {
            "type": "integer",
            "format": "uint32",
            "description": "현재 페이지 번호."
          },
          "limit": {
            "type": "integer",
            "format": "uint32",
            "description": "페이지 당 최대 수(표준 100)."
          },
          "records": {
            "type": "integer",
            "format": "uint32",
            "description": "전체 데이터 기준 총 레코드 수."
          },
          "pages": {
            "type": "integer",
            "format": "uint32",
            "description": "전체 페이지 수(총 레코드수/limit 올림)."
          }
        },
        "description": "표준 페이지네이션 정보 오브젝트 타입. 대량 데이터의 리스트/검색 화면 등에서 공용 사용.",
        "required": []
      },
      "IVirtualAccountPermission.ICreate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "권한 코드. Prisma 스키마의 'code' 컬럼을 참조합니다.\n\nRBAC 체계에서 각 권한의 고유 식별자로 사용되며, 예시: 'VIEW_DASHBOARD'. 모든 권한 유형은 중복 없이 최소 한 번 이상 할당되어야 하며, 시스템 정책 및 메뉴 접근 결정 기준이 됩니다."
          },
          "description": {
            "type": "string",
            "description": "권한 설명. Prisma 스키마 'description' 컬럼 주석 내용을 참고합니다.\n\n비즈니스/기능적 용도를 자연어로 명시하며, 예시: '관리자 대시보드 접근 권한'. RBAC 매핑 및 관리자 화면 구성에서 활용됩니다."
          }
        },
        "required": [
          "code",
          "description"
        ],
        "description": "권한(RBAC Permission) 엔티티 생성용 요청 스키마입니다.\n\nPrisma 스키마의 virtual_account_permissions 테이블 구조와 컬럼 주석을 바탕으로, 신규 권한 코드와 설명을 등록할 때 사용합니다. RBAC 체계의 세분화된 액션/권한 관리에 쓰이며, 코드 중복, 필수값 확인 등 유효성 정책을 반드시 준수해야 합니다."
      },
      "IVirtualAccountPermission.IUpdate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "권한 코드. Prisma 스키마의 'code' 컬럼을 참조합니다.\n\n권한 코드의 변경(수정 시)에 사용되며, 중복될 수 없고 시스템 내 일관성 유지를 보장해야 합니다."
          },
          "description": {
            "type": "string",
            "description": "권한 설명. Prisma 스키마의 'description' 컬럼 내용을 반영합니다.\n\n권한의 비즈니스 목적과 실제 사용처를 상세하게 기술해야 합니다."
          }
        },
        "required": [],
        "description": "권한(RBAC Permission) 수정 요청 스키마입니다.\n\nvirtual_account_permissions 테이블의 특정 권한 코드나 설명을 갱신할 때 사용합니다. 모든 변경은 히스토리에 남겨야 하며, 비즈니스 및 보안 정책상 필수 필드는 없음(부분 수정 허용)."
      },
      "IVirtualAccountRolePermission.IRequest": {
        "type": "object",
        "properties": {
          "role_id": {
            "type": "string",
            "format": "uuid",
            "description": "역할의 고유 식별자(UUID). Prisma 스키마 virtual_account_role_permissions.role_id와 매핑.\n\n특정 역할에 대한 권한 매핑 검색 등에 사용됩니다."
          },
          "permission_id": {
            "type": "string",
            "format": "uuid",
            "description": "권한의 고유 식별자(UUID). Prisma 스키마 virtual_account_role_permissions.permission_id와 연결되어, 해당 권한을 가진 역할 매핑 조회에 활용됩니다."
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "페이지 번호. 페이징 질의 및 응답에서 현재 페이지 값을 지정합니다.\n\n기본값: 1"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "페이지당 조회할 최대 행(레코드) 수.\n\n기본값: 20"
          }
        },
        "description": "역할-권한 매핑 목록 요청(검색, 필터, 페이징) 조건 객체입니다.\n\nvirtual_account_role_permissions 테이블의 다대다(N:M) 구조에 따라, 특정 역할/권한 기준 검색에 사용되며, 페이징 처리 값도 포함합니다.",
        "required": []
      },
      "IPageIVirtualAccountRolePermission": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountRolePermission"
            },
            "description": "권한-역할 매핑 요약 목록입니다.\n\n각 원소는 IVirtualAccountRolePermission 타입의 객체입니다."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "역할-권한 매핑 페이지네이션 응답입니다.\n\n페이징 정보와 IVirtualAccountRolePermission 목록을 묶어 반환합니다. admin UI나 통계, 보안 정책 조회에 활용됩니다."
      },
      "IVirtualAccountRolePermission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "프라이머리 키. Prisma 'virtual_account_role_permissions.id'에 해당하며, 각 역할-권한 연결 고유 row 식별자입니다."
          },
          "role_id": {
            "type": "string",
            "format": "uuid",
            "description": "역할의 UUID(FK). Prisma의 virtual_account_roles.id와 연결되며, 매핑 관계 확인용입니다."
          },
          "permission_id": {
            "type": "string",
            "format": "uuid",
            "description": "권한의 UUID(FK). Prisma의 virtual_account_permissions.id와 연결. RBAC 정책 조회에 필수."
          },
          "role": {
            "type": "object",
            "description": "연결된 역할 엔티티(간략 요약).",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            },
            "required": []
          },
          "permission": {
            "type": "object",
            "description": "연결된 권한 엔티티(간략).",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "code": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            },
            "required": []
          }
        },
        "required": [
          "id",
          "role_id",
          "permission_id"
        ],
        "description": "역할-권한 매핑 엔티티 스키마입니다.\n\nvirtual_account_role_permissions 테이블 한 row. 배정된 역할/권한 및 서머리 정보 포함(간략 role/permission 객체 형태)."
      },
      "IVirtualAccountRolePermission.ICreate": {
        "type": "object",
        "properties": {
          "role_id": {
            "type": "string",
            "format": "uuid",
            "description": "부여할 역할의 UUID. virtual_account_roles.id와 매핑.\n\n실제 연결될 역할 선택 시 사용되고, N:M 관계이므로 필수값입니다."
          },
          "permission_id": {
            "type": "string",
            "format": "uuid",
            "description": "연결할 권한의 UUID. virtual_account_permissions.id와 연결됩니다.\n\nRBAC 정책 상 동적 할당/회수에 대응합니다."
          }
        },
        "required": [
          "role_id",
          "permission_id"
        ],
        "description": "역할-권한 매핑 추가 요청 스키마입니다.\n\nvirtual_account_role_permissions 테이블에 신규 연결 추가 시 사용합니다. N:M 관계로 매핑테이블 row를 직접 생성합니다."
      },
      "IVirtualAccountRolePermission.IUpdate": {
        "type": "object",
        "properties": {
          "role_id": {
            "type": "string",
            "format": "uuid",
            "description": "수정대상 역할 UUID(필요시 변경)."
          },
          "permission_id": {
            "type": "string",
            "format": "uuid",
            "description": "수정대상 권한 UUID(필요시 변경)."
          }
        },
        "required": [],
        "description": "역할-권한 매핑 수정 요청 스키마입니다.\n\nvirtual_account_role_permissions 테이블의 특정 매핑 row의 역할/권한 연결자 변경, 오류시 재정렬 등 목적. 전체 컬럼 필수는 아니며 부분 갱신 중점."
      },
      "IVirtualAccountBank.IRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "은행 이름. Prisma 스키마 virtual_account_banks.name 컬럼 주석을 기반으로 함.\n\n검색 및 리스트 필터 시 부분검색 지원합니다."
          },
          "code": {
            "type": "string",
            "description": "은행 코드. virtual_account_banks.code 컬럼을 참조.\n\n외부 연동 또는 사내 조회 및 코드 매칭에 활용."
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "현재 페이지(1부터 시작)."
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "페이지당 건수. 기본값: 20"
          }
        },
        "description": "은행 목록 조회/검색/필터 조건용 파라미터 스키마입니다.\n\nvirtual_account_banks 엔티티의 리스트, 대시보드, 설정 등 다양한 리스트 화면 리스트 필터 조건에 활용됩니다.",
        "required": []
      },
      "IPageIVirtualAccountBank": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountBank"
            },
            "description": "은행 개체 요약 정보의 배열.\n\n각 원소는 IVirtualAccountBank 타입."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "은행 목록 조회(페이징) 응답 타입입니다.\n\nvirtual_account_banks 테이블 기준, pagination+summary용 배열 데이터 구조를 반환합니다."
      },
      "IVirtualAccountBank": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "프라이머리 키(UUID). virtual_account_banks.id 컬럼."
          },
          "name": {
            "type": "string",
            "description": "은행명. virtual_account_banks.name 컬럼. UI·대시보드 표출 및 계좌발급, 검색 등에서 사용됩니다."
          },
          "code": {
            "type": "string",
            "description": "은행 API 코드. virtual_account_banks.code 컬럼. PG·연동된 외부 API와 매핑, 중복 불가."
          },
          "logo_url": {
            "oneOf": [
              {
                "type": "string",
                "description": "은행 로고/이미지 URL. virtual_account_banks.logo_url 컬럼.\n\nUX/브랜딩 요소로만 활용. DB에서는 8만자까지 URI 허용."
              },
              {
                "type": "null"
              }
            ],
            "description": "은행 로고/이미지 URL. virtual_account_banks.logo_url 컬럼.\n\nUX/브랜딩 요소로만 활용. DB에서는 8만자까지 URI 허용."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "은행 정보 등록 일시. virtual_account_banks.created_at 컬럼. 온보딩/사용 현황 통계에 활용."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "은행 정보 최종 수정 시간. virtual_account_banks.updated_at 컬럼."
          }
        },
        "required": [
          "id",
          "name",
          "code",
          "created_at",
          "updated_at"
        ],
        "description": "은행 마스터 테이블 개체 응답 타입입니다.\n\nvirtual_account_banks 엔티티 정보(정규화 컬럼, FK 배열 없음). 온보딩/발급/외부 연동 API와 직접 매핑."
      },
      "IVirtualAccountBank.ICreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "신규 등록할 은행명. virtual_account_banks.name 컬럼 기준.\n\n관리자 대시보드 입력 시 필수."
          },
          "code": {
            "type": "string",
            "description": "고유 은행코드. virtual_account_banks.code 컬럼. 외부 API 연동 기준 중복 금지.\n\n예: '004', '011', 'TOSS' 등."
          },
          "logo_url": {
            "oneOf": [
              {
                "type": "string",
                "description": "(선택) 은행 로고 이미지 URL. UI·표시·UX 목적, virtual_account_banks.logo_url 기준 8만자 허용."
              },
              {
                "type": "null"
              }
            ],
            "description": "(선택) 은행 로고 이미지 URL. UI·표시·UX 목적, virtual_account_banks.logo_url 기준 8만자 허용."
          }
        },
        "required": [
          "name",
          "code"
        ],
        "description": "은행 마스터 정보 신규등록(생성)용 요청 스키마입니다.\n\nvirtual_account_banks 테이블에 은행을 추가 등록 시 활용. 이름, 코드 필수, 로고 URL 선택 입력."
      },
      "IVirtualAccountBank.IUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "수정할 은행명. virtual_account_banks.name 컬럼 기준."
          },
          "logo_url": {
            "oneOf": [
              {
                "type": "string",
                "description": "(선택) 은행 로고 이미지 URL. virtual_account_banks.logo_url 컬럼 사용, null 가능."
              },
              {
                "type": "null"
              }
            ],
            "description": "(선택) 은행 로고 이미지 URL. virtual_account_banks.logo_url 컬럼 사용, null 가능."
          }
        },
        "required": [],
        "description": "은행 마스터 정보 일부 필드 수정용 요청 스키마입니다.\n\n은행명, 로고 등 일부 데이터에 대한 패치·수정에 사용. 코드 등 unique 컬럼은 수정 불가, 부분 갱신 중심."
      },
      "IVirtualAccountAccountStatusLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "계좌 상태 변경 로그의 고유 식별자입니다.\n\nPrisma virtual_account_account_status_logs.id 컬럼의 설명에 따름."
          },
          "virtual_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "상태 변경 대상 가상계좌의 고유 ID입니다.\n\nvirtual_account_virtual_accounts.id를 참조하여 계좌별 상태 이력 관리 목적입니다."
          },
          "admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "이 상태 변경을 수행한 관리자(admin)의 고유 ID입니다.\n\nvirtual_account_admins.id 관계이며, 추적 및 감사 목적입니다."
          },
          "from_status": {
            "type": "string",
            "description": "변경 전 상태입니다. 예: 'ACTIVE'\n\n가상계좌의 기존 상태를 기록합니다. Prisma 정의 참조."
          },
          "to_status": {
            "type": "string",
            "description": "변경 후 상태입니다. 예: 'EXPIRED'\n\n가상계좌의 변경된 상태를 기록합니다. Prisma 정의 참조."
          },
          "reason": {
            "type": "string",
            "description": "상태 전환 사유(관리자/시스템 입력). 예: '만료 처리', '수동 종료'.\n\n상태 변경의 명확한 추적 및 로그 목적."
          },
          "changed_at": {
            "type": "string",
            "format": "date-time",
            "description": "상태가 변경된 시각. ISO8601 표준 형식.\n\nvirtual_account_account_status_logs.changed_at 컬럼 참조. 시스템 시간 기준으로 기록됩니다."
          }
        },
        "required": [
          "id",
          "virtual_account_id",
          "admin_id",
          "from_status",
          "to_status",
          "reason",
          "changed_at"
        ],
        "description": "가상계좌 상태 변경 이력을 나타냅니다.\n\n이는 가상계좌의 상태 전환(예: 활성→만료 등)을 추적하는 엔터티로, 시스템 감사 및 리포트 기능에서 활용됩니다. 각 이력은 계좌별, 담당자별로 명확히 구분되며, 규정 준수를 위해 별도 관리됩니다.\n\nPrisma virtual_account_account_status_logs 테이블의 스키마 및 설명에 직접 매핑됩니다."
      },
      "IVirtualAccountAccountStatusLog.ICreate": {
        "type": "object",
        "properties": {
          "virtual_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "상태 변경 대상 가상계좌의 고유 ID입니다.\n\nvirtual_account_virtual_accounts.id를 참조합니다."
          },
          "admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "이 상태 변경을 수행하는 관리자(admin)의 고유 ID입니다.\n\nvirtual_account_admins.id 관계입니다."
          },
          "from_status": {
            "type": "string",
            "description": "변경 전 상태. 예: 'ACTIVE' 등.\n\nPrisma 정의의 가상계좌 상태값을 입력합니다."
          },
          "to_status": {
            "type": "string",
            "description": "변경 후 상태. 예: 'EXPIRED' 등."
          },
          "reason": {
            "type": "string",
            "description": "상태 변경 사유. 관리자/시스템이 입력합니다."
          },
          "changed_at": {
            "type": "string",
            "format": "date-time",
            "description": "상태 변경 시각. 기본적으로 시스템 생성시 입력, 필요시 수동 지정."
          }
        },
        "required": [
          "virtual_account_id",
          "admin_id",
          "from_status",
          "to_status",
          "reason",
          "changed_at"
        ],
        "description": "가상계좌 상태 변경 이력(ICreate)은 새로운 상태 로그 라인 추가를 위한 입력 데이터입니다.\n\n상태 변경을 API 또는 행정처리로 기록할 때 사용되며, 기존 상태/바뀐 상태, 사유, 시점, 관련 관리자 등 관계를 모두 지정해야 합니다. 가상계좌 감사 및 변경관리를 위해 필수입니다."
      },
      "IVirtualAccountAccountStatusLogs.IUpdate": {
        "type": "object",
        "properties": {
          "from_status": {
            "type": "string",
            "description": "수정할 경우 사용되는 변경 전 상태값(정상적으로 사용 빈도 낮음).\n\n일반적으로 초기값이 맞을 경우 생략 가능."
          },
          "to_status": {
            "type": "string",
            "description": "변경 후 상태값 신규 지정.\n\n일부 이력정정/재입력시 활용."
          },
          "reason": {
            "type": "string",
            "description": "상태 변경 이력의 수정 사유 혹은 설명(감사 추적 목적)."
          },
          "admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "수정 처리자를 별도로 지정 가능. 미지정시 기존 기록 유지."
          },
          "changed_at": {
            "type": "string",
            "format": "date-time",
            "description": "수정되는 상태 변경 시점. 특별 정정이 필요한 경우 명시."
          }
        },
        "required": [],
        "description": "상태 변경 이력 레코드의 부분/전체 수정용 인터페이스입니다.\n\n상태,사유,관리자 지정 값 중 일부 또는 전체를 변경할 수 있습니다. 트랜잭션 및 감사지원 용도로 사용됩니다."
      },
      "IVirtualAccountAccountStatusLogs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "상태 변경 이력 고유 식별자."
          },
          "virtual_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "연결된 가상계좌 ID."
          },
          "admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "상태 변경 담당 관리자 ID."
          },
          "from_status": {
            "type": "string",
            "description": "변경 전 상태."
          },
          "to_status": {
            "type": "string",
            "description": "변경 후 상태."
          },
          "reason": {
            "type": "string",
            "description": "상태 변경 사유/주석."
          },
          "changed_at": {
            "type": "string",
            "format": "date-time",
            "description": "상태 변경 시각."
          }
        },
        "required": [
          "id",
          "virtual_account_id",
          "admin_id",
          "from_status",
          "to_status",
          "reason",
          "changed_at"
        ],
        "description": "상태 변경 이력 엔터티(virtual_account_account_status_logs)의 전체 필드를 포함합니다.\n\n계좌/관리자/변경시각별 상태 변동을 완전히 추적 가능하게 합니다. 상세 감사 및 상태 흐름 구조도 표현에 사용됩니다."
      },
      "IVirtualAccountAccountStatusLogs.IDeleteResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "삭제 처리 성공 여부 플래그. true인 경우 정상적으로 삭제된 것임."
          },
          "deletedId": {
            "type": "string",
            "format": "uuid",
            "description": "정상 삭제된 상태 이력 레코드의 고유 ID."
          },
          "message": {
            "type": "string",
            "description": "삭제 결과에 대한 결과 메시지 또는 오류 원인(없을 수도 있음)."
          }
        },
        "required": [
          "success",
          "deletedId"
        ],
        "description": "상태 변경 이력 삭제 요청에 대한 결과 데이터 구조입니다.\n\n성공 여부, 삭제된 PK, 필요시 오류 메시지 등을 제공합니다."
      },
      "IVirtualAccountDeposits.IRequest": {
        "type": "object",
        "properties": {
          "virtual_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "필터 또는 조회를 위한 가상계좌 PK.\n\nvirtual_account_deposits.virtual_account_id 참조."
          },
          "status": {
            "type": "string",
            "description": "입금 상태값: 예시 'PENDING', 'MATCHED', 'ERROR' 등."
          },
          "depositor_name": {
            "type": "string",
            "description": "입금자명(검색어)."
          },
          "reference_no": {
            "type": "string",
            "description": "은행 참조번호(검색, 중복 처리 등)."
          },
          "amount_min": {
            "type": "number",
            "format": "double",
            "description": "조회 최소 입금금액(검색 필터)."
          },
          "amount_max": {
            "type": "number",
            "format": "double",
            "description": "조회 최대 입금금액(검색 필터)."
          },
          "from_date": {
            "type": "string",
            "format": "date-time",
            "description": "조회 시작일/시점(ISO8601)."
          },
          "to_date": {
            "type": "string",
            "format": "date-time",
            "description": "조회 종료일/시점(ISO8601)."
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "페이지 번호(페이징)."
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "페이지당 레코드 한도."
          }
        },
        "required": [],
        "description": "가상계좌 입금내역 조건별 조회/검색 요청용 구조체입니다.\n\n가상계좌 PK, 기간/상태/입금자명/금액조건+페이징 등 복합 검색이 가능하도록 설계되었습니다. admin 대시보드와 연동됩니다."
      },
      "IPageIVirtualAccountDeposits": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountDeposits"
            },
            "description": "현재 페이지 결과 데이터 배열.\n\nIVirtualAccountDeposits 스키마(입금내역 상세) 기준."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "입금내역 페이징/검색 결과용 공통 컨테이너입니다.\n\n페이지네이션 메타+결과 리스트(IVirtualAccountDeposits)로 구성하며, 대시보드·API 공통 포맷을 따릅니다."
      },
      "IVirtualAccountDeposits": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "입금내역 고유 식별자."
          },
          "virtual_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "입금 대상 가상계좌 ID."
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "입금 금액. 소수점/원단위까지 실수 가능."
          },
          "depositor_name": {
            "type": "string",
            "description": "입금자 명칭(은행 입력된 값 그대로)."
          },
          "deposited_at": {
            "type": "string",
            "format": "date-time",
            "description": "은행에서 실제 입금 처리된 시각."
          },
          "reference_no": {
            "type": "string",
            "description": "은행/PG사 측의 입금 참조번호(중복필터/추적용)."
          },
          "status": {
            "type": "string",
            "description": "입금 처리 상태: 'PENDING', 'MATCHED', 'ERROR' 등."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "내역 레코드 등록/저장 시점."
          }
        },
        "required": [
          "id",
          "virtual_account_id",
          "amount",
          "depositor_name",
          "deposited_at",
          "reference_no",
          "status",
          "created_at"
        ],
        "description": "가상계좌 입금 내역 하나의 모든 속성을 포함하는 자료구조입니다.\n\nPrisma virtual_account_deposits 스키마에 직접 매핑, 입금내역 상세조회·로그분석·엑셀 추출 등에 활용됩니다."
      },
      "IVirtualAccountDeposits.ICreate": {
        "type": "object",
        "properties": {
          "virtual_account_id": {
            "type": "string",
            "format": "uuid",
            "description": "입금 대상 가상계좌 고유 PK."
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "입금 금액(원)."
          },
          "depositor_name": {
            "type": "string",
            "description": "입금자명 입력."
          },
          "deposited_at": {
            "type": "string",
            "format": "date-time",
            "description": "입금 시각(은행/PG서버기준)."
          },
          "reference_no": {
            "type": "string",
            "description": "입금 참조번호(은행/PG)."
          },
          "status": {
            "type": "string",
            "description": "입금 상태. 최초 입력 시 'PENDING' 권장, 이후 MATCHED/ERROR 등 판정."
          }
        },
        "required": [
          "virtual_account_id",
          "amount",
          "depositor_name",
          "deposited_at",
          "reference_no",
          "status"
        ],
        "description": "가상계좌 입금내역 신규 생성(등록) API 요청 바디.\n\n모든 레코드는 계좌, 금액, 입금자, 시각, 참조번호, 상태 등 필수값을 명확하게 전달해야 하며, 서비스 자동입금 매칭 및 오류 진단의 근간 자료가 됩니다."
      },
      "IVirtualAccountDeposits.IUpdate": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "description": "수정하고자 하는 입금 금액(원)."
          },
          "depositor_name": {
            "type": "string",
            "description": "수정 대상 입금자명."
          },
          "reference_no": {
            "type": "string",
            "description": "수정 대상 참조번호."
          },
          "status": {
            "type": "string",
            "description": "입금 상태 수정."
          },
          "deposited_at": {
            "type": "string",
            "format": "date-time",
            "description": "입금시각 수정."
          }
        },
        "required": [],
        "description": "가상계좌 입금내역 개별 수정(API PUT) 요청 구조체.\n\n필요한 항목만 일부 제공하면 부분 수정도 허용됩니다. 입금자명, 금액, 참조번호, 상태 등 업무/매칭 흐름에 따라 상황별 변경 지원."
      },
      "IVirtualAccountDeposits.IDeleteResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "삭제 결과 성공 여부."
          },
          "deletedId": {
            "type": "string",
            "format": "uuid",
            "description": "정상 삭제된 입금내역 ID."
          },
          "message": {
            "type": "string",
            "description": "삭제 결과 메시지(필요시 오류/상황설명)."
          }
        },
        "required": [
          "success",
          "deletedId"
        ],
        "description": "입금내역 삭제 요청 결과 반환 구조입니다.\n\n삭제 성공여부, PK, 사유 등이 포함될 수 있습니다."
      },
      "IVirtualAccountDepositMatchings.IRequest": {
        "type": "object",
        "properties": {
          "deposit_id": {
            "type": "string",
            "format": "uuid",
            "description": "검색/필터 대상 입금 이벤트의 고유 ID.\n\ndeposit matching의 하위 필터."
          },
          "status": {
            "type": "string",
            "description": "매칭 시도 대상 상태값(자동, 수동 등 matching_method로 활용 가능)."
          },
          "matched_customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "매칭된 고객ID 기반 필터."
          },
          "admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "관리자(매칭 담당자) 기반 필터."
          },
          "from_date": {
            "type": "string",
            "format": "date-time",
            "description": "조회 시작일."
          },
          "to_date": {
            "type": "string",
            "format": "date-time",
            "description": "조회 종료일."
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "페이지 번호(페이징)."
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "페이지별 결과 한도(기본값 등 적용 가능)."
          }
        },
        "required": [],
        "description": "입금 매칭(virtual_account_deposit_matchings) 이력 리스트 요청용 인터페이스입니다.\n\n입금PK, 처리자, 기간, 매칭상태 기준으로 필터+페이징이 가능합니다.\n\n주로 관리/감사/운영 대시보드에서 사용됩니다."
      },
      "IPageIVirtualAccountDepositMatchings": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "페이지네이션 정보입니다. 쿼리 결과의 현재 페이지, 한 페이지의 최대 결과 수, 전체 레코드 수 등의 정보를 포함합니다."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountDepositMatchings"
            },
            "description": "조회된 가상계좌 입금 매칭 기록 객체 배열입니다."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "가상계좌 입금 매칭 기록의 페이징된 결과입니다.\n\n이 객체는 관리자 대시보드에서 제공되는 입금 매칭 조회 기능에서 사용됩니다. pagination에는 현재 페이지, 한 페이지의 레코드 수, 전체 데이터 개수 등이 포함되며, data에는 매칭 레코드의 배열이 들어갑니다.\n\n각 매칭 레코드는 단일 입금에 대한 자동 또는 수동 매칭 수행 이력을 담고 있습니다."
      },
      "IVirtualAccountDepositMatchings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "입금 매칭 고유 ID입니다. 각 매칭 이벤트를 구분하는 식별자입니다.\n\nPrisma DB 컬럼 id에 해당하며, 레코드의 주 키입니다."
          },
          "deposit_id": {
            "type": "string",
            "format": "uuid",
            "description": "매칭된 입금 이벤트의 ID입니다. virtual_account_deposits 테이블과의 관계를 표시합니다.\n\n입금의 식별자로, 매칭된 입금 이벤트를 추적하는 데 이용됩니다."
          },
          "admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "이 매칭을 수행한 관리자(또는 시스템)의 ID입니다.\n\n입금 매칭 행위에 대한 감사 및 이력 기록의 대상 계정입니다."
          },
          "matched_customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "이 입금 매칭을 통해 최종적으로 연결된 고객의 ID입니다. virtual_account_customers 테이블의 참조키입니다.\n\n자동/수동 매칭 결과 고객 식별 및 현황 모니터링에 사용됩니다."
          },
          "matched_at": {
            "type": "string",
            "format": "date-time",
            "description": "실제 매칭이 일어난 일시입니다.\n\n매칭 활동 시각 기록(PG/은행 연동, 수동/자동 매칭 모두 대상)입니다."
          },
          "matching_method": {
            "type": "string",
            "description": "매칭 방식입니다. 'AUTOMATIC' 또는 'MANUAL' 값 중 하나로 기록합니다.\n\n프로그래밍 혹은 운영자가 직접한 케이스 구분 시 사용됩니다."
          },
          "reason": {
            "type": "string",
            "description": "매칭 사유 또는 관리자 코멘트(선택적 필드). 매칭 시 기록되는 코멘트·사유 등의 정보로, 이슈 진단 및 이력 관리에 활용됩니다."
          }
        },
        "required": [
          "id",
          "deposit_id",
          "admin_id",
          "matched_customer_id",
          "matched_at",
          "matching_method",
          "reason"
        ],
        "description": "가상계좌 서비스 내 입금 매칭 이력을 나타내는 엔터티입니다.\n\n각 입금 매칭은 단건의 입금 이벤트가 어떤 고객에게 연결되었는지를 자동 또는 수동으로 기록한 결과로, 감사 추적, 에러 진단, 재처리 등에 활용됩니다.\n\nPrisma DB의 virtual_account_deposit_matchings 테이블과 매핑되며, 관리자·고객·입금 등과의 참조 관계를 가집니다."
      },
      "IVirtualAccountDepositMatchings.ICreate": {
        "type": "object",
        "properties": {
          "deposit_id": {
            "type": "string",
            "format": "uuid",
            "description": "매칭할 입금 이벤트의 ID입니다. virtual_account_deposits 테이블 FK.\n\n이 매칭 생성이 어느 입금 이벤트와 대응되는지 지정합니다."
          },
          "admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "매칭 수행 관리자(혹은 시스템 피해액) ID.\n\n입금 매칭 등록 행위에 대한 책임자를 명시합니다."
          },
          "matched_customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "매칭 대상 고객의 ID. virtual_account_customers FK.\n\n입금 매칭이 연결되는 고객 식별자입니다."
          },
          "matched_at": {
            "type": "string",
            "format": "date-time",
            "description": "매칭 이벤트가 실제로 처리된 일시.\n\nPG/Webhook/관리자 수기 처리 시점 등을 기록합니다."
          },
          "matching_method": {
            "type": "string",
            "description": "매칭 방식 구분자입니다. 'AUTOMATIC' 또는 'MANUAL' 방식 구분에 사용합니다."
          },
          "reason": {
            "type": "string",
            "description": "매칭 시 기재하는 사유, 코멘트 등.\n\n이벤트 사유, 특이사항 참고 정보로 입력받습니다."
          }
        },
        "required": [
          "deposit_id",
          "admin_id",
          "matched_customer_id",
          "matched_at",
          "matching_method",
          "reason"
        ],
        "description": "새 입금 매칭 생성 시 서버로 전달하는 요청 본문 구조입니다.\n\n각 필드는 반드시 명확히 기입되어야 하며, 자동 매칭/수동 매칭 등 용도 구분이 필요합니다.\n\nPrisma DB의 virtual_account_deposit_matchings 테이블 정의 및 실제 업무 요구사항을 기준으로 모든 필드를 갖춰야 합니다."
      },
      "IVirtualAccountDepositMatchings.IUpdate": {
        "type": "object",
        "properties": {
          "matched_customer_id": {
            "type": "string",
            "format": "uuid",
            "description": "수정할 매칭 건의 고객 ID입니다.\n\n입금 매칭 결과를 변경할 때 사용됩니다."
          },
          "matching_method": {
            "type": "string",
            "description": "매칭 방식 변경 - 'AUTOMATIC' 또는 'MANUAL'"
          },
          "reason": {
            "type": "string",
            "description": "매칭 수정 사유 및 관리자 코멘트.\n\n입금 매칭 변경 이력, 이유 등 관리 목적의 기록 필드."
          }
        },
        "required": [
          "matched_customer_id",
          "matching_method",
          "reason"
        ],
        "description": "입금 매칭 정보 수정 시 사용하는 요청 본문 구조입니다.\n\n수정 가능한 필드만 노출하며, 업무상 처리 이력 기록 필드를 포함합니다."
      },
      "IVirtualAccountDepositMatchings.IDeleteResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "삭제 성공 여부입니다.\n\n삭제 요청 처리의 결과 상태를 나타냅니다."
          },
          "message": {
            "type": "string",
            "description": "상세 메시지 및 추가 안내(삭제 실패 시 오류 사유 등).\n\n사용자 및 관리자 UX를 위해 반환되는 안내문입니다."
          }
        },
        "required": [
          "success"
        ],
        "description": "입금 매칭 로그 삭제 API의 결과 반환 데이터 타입입니다.\n\n삭제 성공 여부와 안내 메시지를 포함합니다. 실패시 오류 안내 메시지가 할당됩니다."
      },
      "IVirtualAccountDepositError.IRequest": {
        "type": "object",
        "properties": {
          "deposit_id": {
            "type": "string",
            "format": "uuid",
            "description": "오류 발생 입금 이벤트의 ID. 해당 이벤트만 필터링 조회에 사용됩니다."
          },
          "admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "에러 처리 담당 관리자/운영자의 ID입니다. 여러 관리자 중 특정 담당자 에러만 조회 필요 시 활용합니다."
          },
          "error_code": {
            "type": "string",
            "description": "에러 코드 값. 예: 'AMOUNT_NOT_MATCH', 'ACCOUNT_EXPIRED', 'PG_ERROR' 등 도메인 비즈니스 코드입니다."
          },
          "status": {
            "type": "string",
            "description": "입금 에러의 처리 상태(선별 검색용). 예: 새로 접수된 에러 vs. 처리 완료 등."
          },
          "occurred_from": {
            "type": "string",
            "format": "date-time",
            "description": "에러 발생 기간 검색(시작). ISO8601 형식의 일시 필터입니다."
          },
          "occurred_to": {
            "type": "string",
            "format": "date-time",
            "description": "에러 발생 기간 검색(종료). ISO8601 형식의 일시 필터입니다."
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "페이징 요청시 페이지 번호. 1부터 시작합니다."
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "페이지당 결과 레코드 수."
          }
        },
        "description": "가상계좌 입금 에러 이력 리스트 조회 시 사용하는 복합 쿼리·페이징 파라미터입니다.\n\n입금 에러 ID, 관리자, 에러 코드, 발생 시각 등 다양한 조건으로 필터링이 가능합니다. 페이징과 목록 UI 구현을 위한 표준 필드를 포함합니다.",
        "required": []
      },
      "IPageIVirtualAccountDepositError": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "페이지네이션 정보입니다. (현재 페이지/한 페이지 최대 레코드수/전체 건수 등)"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountDepositError"
            },
            "description": "조회된 가상계좌 입금 에러 이력 배열"
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "가상계좌 입금 에러 이력 목록의 페이징 결과 컨테이너입니다.\n\n관리자 대시보드 에러 이력 화면, Excel 다운로드 등 다양한 목록 기반 기능에서 사용됩니다."
      },
      "IVirtualAccountDepositError": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "입금 에러 이력의 식별자입니다."
          },
          "deposit_id": {
            "type": "string",
            "format": "uuid",
            "description": "에러가 발생한 입금 이벤트의 ID입니다. virtual_account_deposits 테이블과 참조 관계입니다."
          },
          "admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "에러 분류 담당 관리자(수정/처리 담당자) ID. nullable.\n\n자동처리/임시건의 경우 null 허용."
          },
          "error_code": {
            "type": "string",
            "description": "업무상 에러 유형/코드. 비즈 도메인 Layer에서 정의 가능.\n\n예: 'AMOUNT_NOT_MATCH', 'PG_TIMEOUT', 'ACCOUNT_EXPIRED' 등"
          },
          "error_message": {
            "type": "string",
            "description": "상세 에러 메시지.\n\n은행/PG 등 외부기관으로부터 받은 메시지, 시스템 에러 설명 등 포함."
          },
          "error_detail": {
            "type": "string",
            "description": "개발/시스템 용 추가 상세 정보(예: 원본 JSON 등)."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "description": "에러 발생 일시. 감사/이력용 필수 항목입니다."
          }
        },
        "required": [
          "id",
          "deposit_id",
          "error_code",
          "error_message",
          "occurred_at"
        ],
        "description": "가상계좌 입금 에러 기록 엔터티 구조입니다.\n\n입금 이벤트별 에러 발생 내역을 기록하며, 관리자 감사, 이력 관리, 알림 트리거, 에러 진단 등에 사용됩니다.\n\nPrisma DB의 virtual_account_deposit_errors 테이블과 매핑됩니다."
      },
      "IVirtualAccountDepositError.ICreate": {
        "type": "object",
        "properties": {
          "deposit_id": {
            "type": "string",
            "format": "uuid",
            "description": "에러 등록 대상 입금 이벤트의 ID입니다."
          },
          "admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "에러 분류/처리 관리자 ID(없을 경우 null)."
          },
          "error_code": {
            "type": "string",
            "description": "업무, 시스템 상의 에러 유형 코드(비즈니스 도메인 정의)."
          },
          "error_message": {
            "type": "string",
            "description": "상세 오류 메시지/설명. 외부기관 메시지·경고포함."
          },
          "error_detail": {
            "type": "string",
            "description": "추가 시스템 상세값/개발자 참고(예: 원본 JSON, stacktrace 등)."
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "description": "에러 발생 시각(ISO)."
          }
        },
        "required": [
          "deposit_id",
          "error_code",
          "error_message",
          "occurred_at"
        ],
        "description": "가상계좌 입금 에러 새 로그 생성 시 작성하는 요청 타입입니다.\n\n에러 발생 대상 입금, 시스템/비즈 에러코드와 상세 메시지, 담당자, 발생일시 등을 기록합니다."
      },
      "IVirtualAccountDepositError.IUpdate": {
        "type": "object",
        "properties": {
          "error_code": {
            "type": "string",
            "description": "에러 유형 수정값. 예: PG_TIMEOUT, MANUAL_REVIEW 등"
          },
          "error_message": {
            "type": "string",
            "description": "에러 메시지/설명값 수정"
          },
          "error_detail": {
            "type": "string",
            "description": "개발/시스템 상세정보 변경(예: stacktrace 등)"
          }
        },
        "description": "입금 에러 기록 수정 시 사용되는 요청 본문 타입입니다.\n\n업무상 재분류, 메시지 수정 등 목적입니다.",
        "required": []
      },
      "IVirtualAccountNotification.IRequest": {
        "type": "object",
        "properties": {
          "event_type": {
            "type": "string",
            "description": "알림 이벤트 유형(필터링). 예: DEPOSIT_CONFIRMED, EXPIRED 등"
          },
          "recipient_id": {
            "type": "string",
            "format": "uuid",
            "description": "수신자(고객/관리자 등) 필터."
          },
          "notification_channel_id": {
            "type": "string",
            "format": "uuid",
            "description": "발송 채널(Kakao, Email 등) 필터."
          },
          "status": {
            "type": "string",
            "description": "알림 발송 상태(예: SENT, DELIVERED, FAILED 등)"
          },
          "requested_from": {
            "type": "string",
            "format": "date-time",
            "description": "알림 발생일/기간 검색(시작)"
          },
          "requested_to": {
            "type": "string",
            "format": "date-time",
            "description": "알림 발생일/기간 검색(종료)"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "조회 페이지 번호(페이징)"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "페이지별 결과 크기"
          }
        },
        "description": "알림 이력 목록 조회 시 요청하는 복합 쿼리 DTO입니다.\n\n알림 이벤트 유형, 수신자, 채널, 상태, 기간, 페이징 등 복합 조건 검색/필터/정렬용 파라미터입니다.",
        "required": []
      },
      "IPageIVirtualAccountNotification": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "페이지네이션 정보(페이징 메타)."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountNotification"
            },
            "description": "알림 이력 엔터티 객체 배열(조회된 알림 리스트)"
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "가상계좌 알림 이력(virtual_account_notifications) 페이징/목록 반환 타입입니다.\n\n관리자 대시보드에서 알림 내역 조회 시 사용되며, 데이터 배열과 페이징 메타 정보를 포함합니다."
      },
      "IVirtualAccountNotification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "알림 엔터티 고유 식별자\n\nvirtual_account_notifications.id PK"
          },
          "notification_template_id": {
            "type": "string",
            "format": "uuid",
            "description": "알림 템플릿 ID (템플릿: virtual_account_notification_templates.id)"
          },
          "notification_channel_id": {
            "type": "string",
            "format": "uuid",
            "description": "알림 채널 ID (채널: virtual_account_notification_channels.id)"
          },
          "event_type": {
            "type": "string",
            "description": "알림 이벤트 유형 (예: DEPOSIT_CONFIRMED, EXPIRED, ADMIN_ALERT 등)"
          },
          "recipient_id": {
            "type": "string",
            "format": "uuid",
            "description": "수신자(고객, 관리자, 슈퍼관리자 등) ID"
          },
          "status": {
            "type": "string",
            "description": "알림 발송 상태 코드(SENT, DELIVERED, FAILED 등)"
          },
          "requested_at": {
            "type": "string",
            "format": "date-time",
            "description": "알림 생성(발송요청/트리거) 시각"
          },
          "sent_at": {
            "type": "string",
            "format": "date-time",
            "description": "알림이 발송된(시스템 채널에 전달한) 시각\n\n일부 미전송/에러 시 null"
          },
          "delivered_at": {
            "type": "string",
            "format": "date-time",
            "description": "최종 전달/수신이 완료된 시각(채널 전달확인 OK)\n\n실패 시 null 허용"
          }
        },
        "required": [
          "id",
          "notification_template_id",
          "notification_channel_id",
          "event_type",
          "recipient_id",
          "status",
          "requested_at"
        ],
        "description": "가상계좌 알림 이벤트 단일 엔터티 구조입니다.\n\n입금 안내, 오류, 만료, 관리자 경보 등이 이 엔터티로 관리됩니다.\n\n각 필드는 Prisma DB virtual_account_notifications 테이블의 컬럼 구조 및 요구사항 문서 명세를 기반으로 구성되어 있습니다."
      },
      "virtual_account_IVirtualAccountNotification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "알림 이벤트의 고유 식별자입니다.\n\nPrisma 스키마 'virtual_account_notifications' 테이블의 기본키. 시스템 내 개별 알림 이벤트를 식별합니다."
          },
          "notification_template_id": {
            "type": "string",
            "format": "uuid",
            "description": "알림에 사용된 템플릿의 ID입니다.\n\nPrisma 스키마 컬럼 참조: 어떤 템플릿을 이용해 발송되었는지 추적합니다."
          },
          "notification_channel_id": {
            "type": "string",
            "format": "uuid",
            "description": "사용된 알림 채널(KakaoTalk, 이메일 등)의 ID입니다.\n\nPrisma 스키마에서 채널 테이블과 1:N 관계 지정."
          },
          "event_type": {
            "type": "string",
            "description": "알림의 트리거 유형(예: DEPOSIT_CONFIRMED, EXPIRED, ADMIN_ALERT 등).\n\n업무 요건별 다양한 상황의 구분 용도."
          },
          "recipient_id": {
            "type": "string",
            "format": "uuid",
            "description": "알림을 수신하는 주체(고객, 관리자, 슈퍼관리자)의 고유 PK입니다.\n\nPrisma 스키마 설명에 따라 다양한 대상에게 전달되는 경우에 사용."
          },
          "status": {
            "type": "string",
            "description": "알림의 현재 발송 상태(SENT, DELIVERED, FAILED 등).\n\n알림 이력 관리 및 재처리/통계 분석 용."
          },
          "requested_at": {
            "type": "string",
            "format": "date-time",
            "description": "이 알림이 생성된 시각 (ISO8601).\n\n요구사항상 이벤트, 알림 타임라인, 감사로그 등에서 사용."
          },
          "sent_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "시스템에서 채널로 실제 전송된 시각 (null 허용).\n\n실제 발송 시간 기록용."
              },
              {
                "type": "null"
              }
            ],
            "description": "시스템에서 채널로 실제 전송된 시각 (null 허용).\n\n실제 발송 시간 기록용."
          },
          "delivered_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "최종 채널에서 전달 완료된 시각(예: 카카오로 수신됨 등, null 허용).\n\n알림 성공/실패 분석 및 감사 이력 작성 시 필요."
              },
              {
                "type": "null"
              }
            ],
            "description": "최종 채널에서 전달 완료된 시각(예: 카카오로 수신됨 등, null 허용).\n\n알림 성공/실패 분석 및 감사 이력 작성 시 필요."
          }
        },
        "required": [
          "id",
          "notification_template_id",
          "notification_channel_id",
          "event_type",
          "recipient_id",
          "status",
          "requested_at"
        ],
        "description": "가상계좌 알림 메인 엔터티입니다.\n\nPrisma DB의 'virtual_account_notifications' 테이블에 대응되는 유형으로, 입금, 오류, 만료, 관리자 경보 등 시스템 내 모든 알림 이벤트를 원자적으로 기록합니다.\n\n각 행은 템플릿, 채널, 수신자, 상태, 트리거 유형, 발송 및 도달 시간 등 업무 및 컴플라이언스 요구사항을 완결적으로 반영합니다.\n\n이 타입은 다양한 트리거 이벤트와 멀티채널 발송 조건, 시스템 감사 추적, 이력/통계, 발송 관리에 핵심적으로 활용됩니다."
      },
      "virtual_account_IVirtualAccountNotification_ICreate": {
        "type": "object",
        "properties": {
          "notification_template_id": {
            "type": "string",
            "format": "uuid",
            "description": "알림 발송에 사용할 템플릿의 ID.\n\nPrisma 컬럼 참조, 발송 콘텐츠 형식 지정용."
          },
          "notification_channel_id": {
            "type": "string",
            "format": "uuid",
            "description": "알림 발송에 사용할 채널의 ID (카카오톡, 이메일 등).\n\nPrisma 외래키 참조 관계."
          },
          "event_type": {
            "type": "string",
            "description": "알림 이벤트 유형(예: DEPOSIT_CONFIRMED, EXPIRED, ADMIN_ALERT 등).\n\n업무/UX 요구에 따라 다양하게 확장."
          },
          "recipient_id": {
            "type": "string",
            "format": "uuid",
            "description": "알림을 받을 대상의 고유 ID(고객/관리자/슈퍼관리자 등).\n\nPrisma 테이블 recipient_id 컬럼. 타 엔터티와의 다양한 관계 지원."
          },
          "status": {
            "type": "string",
            "description": "초기 알림 상태값(SENT, PENDING 등 지정).\n\n알림 제어 및 이력 관리 용도."
          },
          "requested_at": {
            "type": "string",
            "format": "date-time",
            "description": "알림이 생성/요청된 시각(ISO8601).\n\n감사로그 및 통계, 이중 처리 방지 등 사용."
          }
        },
        "required": [
          "notification_template_id",
          "notification_channel_id",
          "event_type",
          "recipient_id",
          "status",
          "requested_at"
        ],
        "description": "가상계좌 알림(virtual_account_notifications) 신규 등록 요청 body 스키마입니다.\n\n알림 발송시 템플릿, 채널, 이벤트 유형, 수신자, 상태, 생성시간 등을 클라이언트에서 입력받아 생성합니다.\n\nPrisma 스키마 구조 및 업무 역할에 따라 엄격히 검증됩니다."
      },
      "virtual_account_IVirtualAccountNotification_IUpdate": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "알림의 상태값(SENT, DELIVERED, FAILED 등) 수정용.\n\n상태 변경에 따라 이력/Audit 로그 생성됨."
          },
          "sent_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "새 알림 발송 시각 값. null 가능.\n\n상태에 따라 업데이트 가능."
              },
              {
                "type": "null"
              }
            ],
            "description": "새 알림 발송 시각 값. null 가능.\n\n상태에 따라 업데이트 가능."
          },
          "delivered_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "알림 도달 완료(수신확정) 시각. null 가능.\n\n공지 상태나 실패 케이스에 따라 의미가 달라짐."
              },
              {
                "type": "null"
              }
            ],
            "description": "알림 도달 완료(수신확정) 시각. null 가능.\n\n공지 상태나 실패 케이스에 따라 의미가 달라짐."
          },
          "notification_template_id": {
            "type": "string",
            "format": "uuid",
            "description": "템플릿 변경(수동 재발송 등) 시 새 템플릿 ID로 갱신.\n\n업무상 필요시만 입력."
          },
          "notification_channel_id": {
            "type": "string",
            "format": "uuid",
            "description": "발송 채널 변경이 필요한 경우(예, 카카오톡→E-mail)만 입력.\n\n업무상 필요시에만 입력."
          }
        },
        "description": "가상계좌 알림(virtual_account_notifications) 수정 요청에 사용하는 body 타입입니다.\n\n알림의 상태(status), 발송/도달 시각, 템플릿/채널 재설정 등 다양한 알림 운영 시에 적용합니다.\n\nPrisma 테이블 구조 및 요구사항 기반, mutable 컬럼만 포함.",
        "required": []
      },
      "virtual_account_IVirtualAccountNotificationTemplate_IRequest": {
        "type": "object",
        "properties": {
          "template_code": {
            "type": "string",
            "description": "템플릿의 논리적 코드(예: 'DEPOSIT_CONFIRMED_KAKAO').\n\n검색/필터에 사용. DB 고유키 아님."
          },
          "channel_type": {
            "type": "string",
            "description": "채널 구분(예: 카카오, email, sms 등).\n\n템플릿/채널 전체 목록에서 필터링용."
          },
          "title": {
            "type": "string",
            "description": "템플릿 제목(메일제목, SMS Subject 등).\n\n검색용."
          },
          "is_active": {
            "type": "boolean",
            "description": "활성화 여부로만 필터링하고자 할 때."
          },
          "language_code": {
            "type": "string",
            "description": "템플릿 언어 구분(예: 'ko').\n\n다국어 지원/필터용."
          },
          "version": {
            "type": "integer",
            "description": "템플릿 버전 넘버 기준으로 검색할 때.\n\n테이블 버전가시화 용."
          }
        },
        "description": "알림 템플릿 리스트/검색/PATCH API의 요청 body 타입입니다.\n\n템플릿코드, 채널타입, 제목, 사용여부, 언어, 버전 등 조건별 검색/필터 및 페이징 시 사용합니다.\n\n모든 필드는 옵션이며, 다양한 조합 지원을 목표로 합니다.",
        "required": []
      },
      "virtual_account_IPageIVirtualAccountNotificationTemplate": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "페이지네이션 정보 객체. 페이징 및 전체 목록 길이, 현재 페이지 등 포함."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/virtual_account_IVirtualAccountNotificationTemplate"
            },
            "description": "실제 템플릿 목록 데이터.\n\n요약 용도로도 활용 가능. 배열 항목은 각 템플릿 타입 준수."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "알림 템플릿 목록 페이징/검색 응답에 사용되는 표준 페이징 컨테이너입니다.\n\nprisma virtual_account_notification_templates 테이블 전체를 포함하며, 목록, 페이징, 통합 조회에 주로 사용됩니다."
      },
      "virtual_account_IVirtualAccountNotificationTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "알림 템플릿의 고유키(PK UUID).\n\nvirtual_account_notification_templates의 ID 컬럼과 매핑."
          },
          "template_code": {
            "type": "string",
            "description": "논리적 템플릿 코드. 채널/타입별 소스 구분에 주로 사용."
          },
          "channel_type": {
            "type": "string",
            "description": "알림 채널 구분: kakao / email / sms 등.\n\ntemplate/channel 관계의 참조 컬럼."
          },
          "title": {
            "type": "string",
            "description": "템플릿 제목(예: '입금확인 안내').\n\n메일제목/SMS 제목 등."
          },
          "body_format": {
            "type": "string",
            "description": "본문 형식(text/html/markdown).\n\n채널특성별 파싱방식 - 업무확장성 고려."
          },
          "body_template": {
            "type": "string",
            "description": "템플릿 메시지 본문 (치환변수포함).\n\n템플릿 기반의 dynamic 렌더링 구조용."
          },
          "language_code": {
            "type": "string",
            "description": "언어구분(예: 'ko', 'en').\n\n다국어 템플릿 지원."
          },
          "version": {
            "type": "integer",
            "description": "템플릿 버전 번호(업데이트 이력용).\n\n템플릿 변경관리/audit용."
          },
          "is_active": {
            "type": "boolean",
            "description": "활성여부. 비활성시 신규 알림에서 제외."
          }
        },
        "required": [
          "id",
          "template_code",
          "channel_type",
          "title",
          "body_format",
          "body_template",
          "language_code",
          "version",
          "is_active"
        ],
        "description": "알림 템플릿 엔터티(virtual_account_notification_templates) 모델입니다.\n\n각종 알림에서 포맷/이벤트별 메시지 구조를 제공하며, 다국어/채널별 가변규격까지 완전히 커버함.\n\nPrisma 테이블 스키마의 각 컬럼별 주석을 충실히 반영하여, 실제 시스템의 템플릿 관리, 이력관리, 활성화 정책, 채널별 확장 니즈를 모두 포함합니다."
      },
      "virtual_account_IVirtualAccountNotificationTemplate_ICreate": {
        "type": "object",
        "properties": {
          "template_code": {
            "type": "string",
            "description": "생성할 템플릿 고유 코드. 논리 구분 식별자.\n\nPK 아님, 채널+언어+버전 중복 불가."
          },
          "channel_type": {
            "type": "string",
            "description": "알림 채널구분 (카카오톡, 이메일, SMS 등).\n\ntemplate/channel 매핑."
          },
          "title": {
            "type": "string",
            "description": "템플릿 제목이나 메일제목 등.\n\n긴 텍스트 허용."
          },
          "body_format": {
            "type": "string",
            "description": "본문 형식(text/html/markdown)\n\n채널용 구분자."
          },
          "body_template": {
            "type": "string",
            "description": "템플릿 본문 - 치환 변수 포함 가능.\n\n템플릿 엔진에서 동적 렌더링 지원."
          },
          "language_code": {
            "type": "string",
            "description": "언어 구분자. 예: 'ko', 'en', 'zh'.\n\n다국어 템플릿 관리 필수 컬럼."
          },
          "version": {
            "type": "integer",
            "description": "버전 번호(정수형).\n\n변경이력 및 diff 관리 용도."
          },
          "is_active": {
            "type": "boolean",
            "description": "활성화 여부. 신규 발송 적용 가능 여부 지정.\n\n업무 관리/운영 정책 지원."
          }
        },
        "required": [
          "template_code",
          "channel_type",
          "title",
          "body_format",
          "body_template",
          "language_code",
          "version",
          "is_active"
        ],
        "description": "알림 템플릿(virtual_account_notification_templates) 신규 등록 요청 스키마.\n\n템플릿코드, 채널, 제목, 포맷, 언어, 버전 등 모든 핵심 속성을 신규 생성시 지정하며,\n\n테이블 구조의 제약조건(중복불가, 유효범위)을 준수합니다."
      },
      "virtual_account_IVirtualAccountNotificationTemplate_IUpdate": {
        "type": "object",
        "properties": {
          "template_code": {
            "type": "string",
            "description": "수정할 템플릿의 논리 코드.\n\n필요시만 입력."
          },
          "channel_type": {
            "type": "string",
            "description": "템플릿 채널 구분 수정.\n\n필요시만 입력."
          },
          "title": {
            "type": "string",
            "description": "템플릿 제목, 메일제목 등.\n\n필요시만 입력."
          },
          "body_format": {
            "type": "string",
            "description": "본문 형식(text/html/markdown) 변경.\n\n필요시만 입력."
          },
          "body_template": {
            "type": "string",
            "description": "템플릿 메시지 본문(치환변수포함).\n\n필요시만 입력."
          },
          "language_code": {
            "type": "string",
            "description": "언어코드 변경.\n\n필요시만 입력."
          },
          "version": {
            "type": "integer",
            "description": "버전 변경시 지정.\n\n템플릿 변경 이력 관리 시 필요."
          },
          "is_active": {
            "type": "boolean",
            "description": "활성/비활성화 토글 변경 시 지정."
          }
        },
        "description": "알림 템플릿 엔터티(virtual_account_notification_templates) 업데이트 요청에 사용하는 body 스키마.\n\n변경 대상 컬럼만 부분 입력 가능하며, 정책상 불변속성은 제외되었습니다.",
        "required": []
      },
      "virtual_account_IVirtualAccountNotificationChannel_IRequest": {
        "type": "object",
        "properties": {
          "channel_type": {
            "type": "string",
            "description": "알림 채널 타입(예: kakao, email, sms)\n\n채널 목록, 필터링 등에서 검색에 사용."
          },
          "display_name": {
            "type": "string",
            "description": "채널 관리용 관리자 UI 표시명.\n\n검색, 리스트 정렬용."
          },
          "is_active": {
            "type": "boolean",
            "description": "활성, 비활성 상태만 필터링 때 사용."
          }
        },
        "description": "알림 채널(virtual_account_notification_channels) 리스트, 검색, 페이징 요청용 body 타입\n\n채널구분, 표시명, 활성여부 등 관리자가 관리/검색/필터 시 사용.",
        "required": []
      },
      "virtual_account_IPageIVirtualAccountNotificationChannel": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "페이지네이션 정보, 전체레코드/페이지 등 포함."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/virtual_account_IVirtualAccountNotificationChannel"
            },
            "description": "페이징 결과의 알림 채널 데이터 목록."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "알림 채널(virtual_account_notification_channels) 목록/페이징 검색 응답 표준 타입입니다.\n\n다수 알림 채널 정보와 페이징/통계 정보를 동시에 제공합니다."
      },
      "virtual_account_IVirtualAccountNotificationChannel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "알림 채널 아이디(PK UUID).\n\nvirtual_account_notification_channels 테이블과 매핑됨."
          },
          "channel_type": {
            "type": "string",
            "description": "채널 타입(카카오, email, sms 등 구분 string).\n\nchannel별 구분, 중복금지."
          },
          "display_name": {
            "type": "string",
            "description": "채널의 관리자 UI/설정 표시명.\n\nUX상 표기, 검색 등 활용."
          },
          "is_active": {
            "type": "boolean",
            "description": "채널 사용 가능여부.\n\n관리자는 off 처리로 발송 차단 가능."
          },
          "settings_json": {
            "type": "string",
            "description": "연동용 API 키, config 등 JSON 직렬화.\n\n실제 송신/설정 로딩 등에서 활용(보안항목)."
          }
        },
        "required": [
          "id",
          "channel_type",
          "display_name",
          "is_active",
          "settings_json"
        ],
        "description": "알림 채널 엔터티(virtual_account_notification_channels) 메인 스키마.\n\n카카오, 메일, SMS, 친구톡 등 여러 발송채널을 시스템적으로 관리하며,\n\nDB 컬럼/비즈니스 정책/보안 요구조건을 모두 준수합니다."
      },
      "virtual_account_IVirtualAccountNotificationChannel_ICreate": {
        "type": "object",
        "properties": {
          "channel_type": {
            "type": "string",
            "description": "신규 생성할 알림 채널의 타입(카카오, email, sms 등).\n\n시스템별로 중복 없이 생성됨."
          },
          "display_name": {
            "type": "string",
            "description": "채널의 관리자 화면 표기명.\n\nUX용, 구별 및 검색 필드."
          },
          "is_active": {
            "type": "boolean",
            "description": "채널의 활성화 여부.\n\ninit 또는 활성 채널로 등록 여부."
          },
          "settings_json": {
            "type": "string",
            "description": "API 연동설정값 등 JSON 직렬화 문자열.\n\n연동정보, 송신/수신자 정보 등 동적으로 입력됨."
          }
        },
        "required": [
          "channel_type",
          "display_name",
          "is_active",
          "settings_json"
        ],
        "description": "알림 채널 신규 등록 요청 스키마\n\nvirtual_account_notification_channels 테이블 신규 생성에서 사용되며, \n\n업무/관리 요구조건, 연동설정값 등 시스템 보안/프라이버시 규정을 엄격히 따릅니다."
      },
      "IPageIVirtualAccountSecurityLog": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountSecurityLog"
            }
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "가상계좌 시스템의 보안 로그 페이징 결과입니다.\n\n이 타입은 DB의 virtual_account_security_logs 테이블 전체를 요청 조건에 따라 검색해서, 페이징할때 사용하는 래퍼 타입입니다. 각 보안 로그의 상세는 data 배열로, 페이지네이션 정보는 pagination 객체로 제공합니다.\n\n실제 보안/감사 조회, 엑셀 다운로드, 대시보드 표시 등에 사용됩니다."
      },
      "IVirtualAccountSecurityLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "로그의 PK UUID입니다.\n\nPrisma DB의 primary key.\n\n시스템/관리자/고객 등등 보안관련 이벤트 당 유일 식별자입니다."
          },
          "actor_id": {
            "type": "string",
            "format": "uuid",
            "description": "보안이벤트를 유발한 주체의 PK UUID.\n\n고객, 관리자, 슈퍼관리자 또는 시스템 계정 등\n\nPrisma DB의 actor_id 컬럼 설명 참조."
          },
          "actor_type": {
            "type": "string",
            "description": "주체 종류(예: customer, admin, super_admin, system)\n\nvirtual_account_security_logs.actor_type\n\n보안감사, 대시보드, 권한 정책에서 주체 분리 목적 설명 필요."
          },
          "event_type": {
            "type": "string",
            "description": "이벤트 유형(예: login_fail, otp_fail, unauthorized_access 등)\n\nvirtual_account_security_logs.event_type 컬럼\n\n보안 정책 및 장애 모니터링에서 사용."
          },
          "ip": {
            "oneOf": [
              {
                "type": "string",
                "description": "IP 주소(있을 경우). 접속/침해 탐지, 감사 기록 목적.\n\nvirtual_account_security_logs.ip"
              },
              {
                "type": "null"
              }
            ],
            "description": "IP 주소(있을 경우). 접속/침해 탐지, 감사 기록 목적.\n\nvirtual_account_security_logs.ip"
          },
          "resource_type": {
            "type": "string",
            "description": "타겟 리소스 영역(account, oauth_client, hmac_key, notification, deposit 등)\n\nvirtual_account_security_logs.resource_type"
          },
          "resource_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "타겟 리소스 객체의 ID(존재 시). FK 또는 context key 값.\n\nvirtual_account_security_logs.resource_id"
              },
              {
                "type": "null"
              }
            ],
            "description": "타겟 리소스 객체의 ID(존재 시). FK 또는 context key 값.\n\nvirtual_account_security_logs.resource_id"
          },
          "detail": {
            "oneOf": [
              {
                "type": "string",
                "description": "이벤트 세부(예: stacktrace, 에러 코드/메시지, 기타 Context)\n\nvirtual_account_security_logs.detail"
              },
              {
                "type": "null"
              }
            ],
            "description": "이벤트 세부(예: stacktrace, 에러 코드/메시지, 기타 Context)\n\nvirtual_account_security_logs.detail"
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "description": "이벤트 발생 시각(ISO8601)\n\nvirtual_account_security_logs.occurred_at"
          }
        },
        "required": [
          "id",
          "actor_id",
          "actor_type",
          "event_type",
          "resource_type",
          "occurred_at"
        ],
        "description": "가상계좌 시스템 보안 로그 단건\n\nPrisma 테이블 virtual_account_security_logs의 단일 엔트리를 대부분 그대로 반영합니다.\n\n관리자/감사 대시보드, 이상탐지, Forensic 분석 등에 사용됩니다."
      },
      "IVirtualAccountSecurityLog.ICreate": {
        "type": "object",
        "properties": {
          "actor_id": {
            "type": "string",
            "format": "uuid",
            "description": "보안이벤트를 유발한 주체(주로 관리자/시스템)의 UUID\n\nPrisma DB의 actor_id\n\n로그남길때 반드시 지정."
          },
          "actor_type": {
            "type": "string",
            "description": "주체 종류(예: customer, admin, super_admin, system)\n\n로그 남김의 주체 타입\n\nvirtual_account_security_logs.actor_type"
          },
          "event_type": {
            "type": "string",
            "description": "보안 이벤트 분류(예: login_fail, otp_fail, unauthorized_access 등)\n\nvirtual_account_security_logs.event_type"
          },
          "ip": {
            "oneOf": [
              {
                "type": "string",
                "description": "이벤트의 IP\n\n로그 생성시 저장.\n\n없을 경우 null."
              },
              {
                "type": "null"
              }
            ],
            "description": "이벤트의 IP\n\n로그 생성시 저장.\n\n없을 경우 null."
          },
          "resource_type": {
            "type": "string",
            "description": "타겟 리소스 유형(account, oauth_client, hmac_key 등)\n\nvirtual_account_security_logs.resource_type"
          },
          "resource_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "리소스 UUID(존재시)\n\nvirtual_account_security_logs.resource_id"
              },
              {
                "type": "null"
              }
            ],
            "description": "리소스 UUID(존재시)\n\nvirtual_account_security_logs.resource_id"
          },
          "detail": {
            "oneOf": [
              {
                "type": "string",
                "description": "상세 설명, 스택트레이스 등 개발/장애용 텍스트\n\nvirtual_account_security_logs.detail"
              },
              {
                "type": "null"
              }
            ],
            "description": "상세 설명, 스택트레이스 등 개발/장애용 텍스트\n\nvirtual_account_security_logs.detail"
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "description": "발생 시각(납입 책임, 트래킹, 감사)\n\nvirtual_account_security_logs.occurred_at"
          }
        },
        "required": [
          "actor_id",
          "actor_type",
          "event_type",
          "resource_type",
          "occurred_at"
        ],
        "description": "보안 로그 생성 요청용 DTO\n\n보안감사 및 이상 이벤트 발생시 사용합니다.\n\nPrisma 테이블 컬럼과 1:1 매핑하고, 비즈니스 입력 시 검증이 필요합니다."
      },
      "IVirtualAccountSecurityLog.IUpdate": {
        "type": "object",
        "properties": {
          "detail": {
            "oneOf": [
              {
                "type": "string",
                "description": "이벤트 세부 정보/에러/스택트레이스의 수정\n\nPrisma DB의 detail 컬럼.\n\n수정시만 사용하고 입력 생략 가능."
              },
              {
                "type": "null"
              }
            ],
            "description": "이벤트 세부 정보/에러/스택트레이스의 수정\n\nPrisma DB의 detail 컬럼.\n\n수정시만 사용하고 입력 생략 가능."
          }
        },
        "description": "보안 로그 단건 수정용 DTO\n\n주로 사후 forensic 분석, 장애 상황에서 수기 보정/상세작성시 사용합니다.",
        "required": []
      },
      "IVirtualAccountExternalSystem.IRequest": {
        "type": "object",
        "properties": {
          "system_type": {
            "type": "string",
            "description": "외부시스템 구분값(ERP, MALL, BANK, PG 중 하나)\n\nvirtual_account_external_systems.system_type 컬럼.\n\n검색, 필터, 신규연동 추가 시 사용."
          },
          "name": {
            "type": "string",
            "description": "시스템 이름(예: Cafe24, 더존iCUBE 등). 부분검색 가능.\n\nvirtual_account_external_systems.name"
          },
          "enabled": {
            "type": "boolean",
            "description": "사용/연동 허용 상태 필터.\n\nvirtual_account_external_systems.enabled"
          }
        },
        "description": "외부 시스템 정의(ERP, 쇼핑몰, PG, 은행 등) 검색조건 및 페이징 쿼리\n\n대시보드/관리자 UX의 연동 설정 조회 검색 등에 사용.",
        "required": []
      },
      "IPageIVirtualAccountExternalSystem": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountExternalSystems"
            }
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "외부 시스템 정의 테이블 검색/페이징 결과 DTO\n\n페이징 정보+외부 시스템 시스템정보 배열."
      },
      "IVirtualAccountExternalSystems": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "외부 시스템 고유 UUID, virtual_account_external_systems.id"
          },
          "system_type": {
            "type": "string",
            "description": "시스템 구분(ERP/MALL/BANK/PG)\n\nvirtual_account_external_systems.system_type"
          },
          "name": {
            "type": "string",
            "description": "시스템 이름(예: Cafe24, 더존)\n\nvirtual_account_external_systems.name"
          },
          "api_base_url": {
            "type": "string",
            "description": "API base URL, virtual_account_external_systems.api_base_url"
          },
          "enabled": {
            "type": "boolean",
            "description": "활성화 여부(관리자 온/오프 시 사용)\n\nvirtual_account_external_systems.enabled"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "생성일시(감사로그/변경 기록)\n\nvirtual_account_external_systems.created_at"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "최종수정일\n\nvirtual_account_external_systems.updated_at"
          }
        },
        "required": [
          "id",
          "system_type",
          "name",
          "api_base_url",
          "enabled",
          "created_at",
          "updated_at"
        ],
        "description": "외부 시스템 정의 엔티티 단건\n\nERP, 쇼핑몰, PG, 은행 등 연동 대상 시스템 정보의 마스터 테이블 DTO\n\nPrisma 테이블 virtual_account_external_systems와 1:1 매핑."
      },
      "IVirtualAccountExternalSystems.ICreate": {
        "type": "object",
        "properties": {
          "system_type": {
            "type": "string",
            "description": "등록할 시스템 유형(ERP/MALL/BANK/PG)\n\nvirtual_account_external_systems.system_type 컬럼과 동일."
          },
          "name": {
            "type": "string",
            "description": "외부시스템 이름(예: Cafe24, 더존iCUBE)\n\nvirtual_account_external_systems.name"
          },
          "api_base_url": {
            "type": "string",
            "description": "Integration용 API base URL\n\nvirtual_account_external_systems.api_base_url"
          },
          "enabled": {
            "type": "boolean",
            "description": "활성화/비활성화(관리자용 플래그)."
          }
        },
        "required": [
          "system_type",
          "name",
          "api_base_url",
          "enabled"
        ],
        "description": "외부 시스템 정의 등록용 데이터 DTO\n\nERP, 쇼핑몰, PG, 은행 등 신규 연동 추가시 사용."
      },
      "IVirtualAccountExternalSystems.IUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "수정할 시스템 이름\n\nvirtual_account_external_systems.name"
          },
          "api_base_url": {
            "type": "string",
            "description": "API base URL(수정)\n\nvirtual_account_external_systems.api_base_url"
          },
          "enabled": {
            "type": "boolean",
            "description": "활성화 여부(변경)\n\nvirtual_account_external_systems.enabled"
          }
        },
        "description": "외부 시스템 정의 수정용 DTO\n\n이름, API, 활성화를 별도로 변경 가능하도록 구성.",
        "required": []
      },
      "IVirtualAccountExternalSystems.IDeleteResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "삭제 성공 여부"
          },
          "message": {
            "type": "string",
            "description": "삭제 결과 메시지 또는 상세"
          }
        },
        "description": "외부 시스템 삭제시 결과 DTO",
        "required": []
      },
      "IVirtualAccountExternalIntegrationLogs.IRequest": {
        "type": "object",
        "properties": {
          "external_system_id": {
            "type": "string",
            "format": "uuid",
            "description": "외부 시스템의 UUID로 필터링(virtual_account_external_systems.id)\n\n연동대상 필터"
          },
          "event_type": {
            "type": "string",
            "description": "이벤트 유형(SYNC, PUSH, FAIL 등)\n\nvirtual_account_external_integration_logs.event_type"
          },
          "success": {
            "type": "boolean",
            "description": "성공/실패로 검색"
          }
        },
        "description": "외부 연동 로그 (virtual_account_external_integration_logs) 검색조건/페이징 DTO\n\n외부 연동 이벤트 로그 검색과 대시보드 필터 연동에 사용.",
        "required": []
      },
      "IPageIVirtualAccountExternalIntegrationLogs": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountExternalIntegrationLogs"
            }
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "외부 연동 이벤트 로그 검색 결과(페이징)\n\nvirtual_account_external_integration_logs 테이블에서 조건검색시 페이지네이션 출력용."
      },
      "IVirtualAccountExternalIntegrationLogs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "외부 연동 이벤트 로그의 고유 식별자입니다.\n\nPrisma 스키마의 id 컬럼 설명과 동일하며, 각 연동 로그 이벤트를 유니크하게 식별합니다."
          },
          "external_system_id": {
            "type": "string",
            "format": "uuid",
            "description": "연동 대상 외부 시스템 ID입니다.\n\nPrisma 스키마의 external_system_id 컬럼 설명을 참조하며, 어떤 외부 시스템(ERP, 쇼핑몰 등)과의 로그인지를 명확히 식별합니다."
          },
          "event_type": {
            "type": "string",
            "description": "외부 연동 이벤트 유형(예: SYNC, PUSH, FAIL 등)을 나타냅니다.\n\n이 필드는 Prisma 스키마 주석에 따라 로그 이벤트의 비즈니스 시나리오 분류를 지원합니다."
          },
          "request_payload": {
            "type": "string",
            "description": "외부 시스템으로 전송된 원본 요청 데이터(예: JSON).\n\nPrisma 스키마의 설명에 따라 정규화된 개별 연동 요청을 기록합니다."
          },
          "response_payload": {
            "oneOf": [
              {
                "type": "string",
                "description": "외부 시스템에서 받은 응답 데이터(생략 가능).\n\n실패 시에는 빈 값일 수 있으며, Prisma 스키마의 설명에서 'raw response'로 명시됩니다."
              },
              {
                "type": "null"
              }
            ],
            "description": "외부 시스템에서 받은 응답 데이터(생략 가능).\n\n실패 시에는 빈 값일 수 있으며, Prisma 스키마의 설명에서 'raw response'로 명시됩니다."
          },
          "success": {
            "type": "boolean",
            "description": "연동 이벤트 성공 여부를 명시하며, 관리자 알림 조건 및 재처리 정책과 연동됩니다.\n\nPrisma 스키마의 success 컬럼 설명을 기반으로 합니다."
          },
          "error_message": {
            "oneOf": [
              {
                "type": "string",
                "description": "실패 시 오류 메시지(Null 가능).\n\nPrisma 스키마의 설명에서의 'error message'를 반영합니다."
              },
              {
                "type": "null"
              }
            ],
            "description": "실패 시 오류 메시지(Null 가능).\n\nPrisma 스키마의 설명에서의 'error message'를 반영합니다."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "이벤트 로그 생성 시각(ISO8601).\n\n감사 및 시계열 분석을 위한 필드로 Prisma와 동일합니다."
          }
        },
        "required": [
          "id",
          "external_system_id",
          "event_type",
          "request_payload",
          "success",
          "created_at"
        ],
        "description": "외부 시스템과의 연동 이벤트 이력 레코드입니다.\n\nPrisma 스키마의 virtual_account_external_integration_logs 엔티티를 기반으로 하며, ERP/쇼핑몰/금융 PG 등 각 연동 시점의 요청파라미터, 응답, 성공/실패, 오류 메시지, 시각정보 등 원자적 이벤트 정보를 기록합니다. 규정상 3NF 준수 테이블로, 업무 시스템의 연동 모듈, 대시보드, 감사지원 등의 다양한 비즈니스 절차에 활용됩니다."
      },
      "IVirtualAccountExternalIntegrationLogs.ICreate": {
        "type": "object",
        "properties": {
          "external_system_id": {
            "type": "string",
            "format": "uuid",
            "description": "연동 대상 외부 시스템 식별자입니다.\n\nPrisma 스키마의 external_system_id 컬럼 설명(외부 시스템 FK 참조)에서 재사용됩니다."
          },
          "event_type": {
            "type": "string",
            "description": "연동 이벤트 유형입니다(예: SYNC, PUSH, FAIL 등).\n\n업무 목적에 따라 시스템 간 호출 종류를 구분하며, Prisma 원본 도메인 주석과 동일합니다."
          },
          "request_payload": {
            "type": "string",
            "description": "외부 API 전송 또는 푸시를 위해 사용된 원본 요청 파라미터(대체로 JSON).\n\nPrisma 스키마에서 요구하는 원자적 RAW 요청을 직렬화/저장합니다."
          },
          "response_payload": {
            "oneOf": [
              {
                "type": "string",
                "description": "외부 시스템의 응답 데이터(Nullable).\n\n실패 시 공란일 수 있으며, 로그 구축 표준에 따릅니다."
              },
              {
                "type": "null"
              }
            ],
            "description": "외부 시스템의 응답 데이터(Nullable).\n\n실패 시 공란일 수 있으며, 로그 구축 표준에 따릅니다."
          },
          "success": {
            "type": "boolean",
            "description": "연동 성공 시 true, 실패 시 false.\n\n관리자 대시보드/감사 정책과 연결되는 이진 필드입니다."
          },
          "error_message": {
            "oneOf": [
              {
                "type": "string",
                "description": "실패 시 오류 메시지(Null 가능).\n\n자동화 실패, 수동처리 필요 등 다양한 케이스를 구분합니다."
              },
              {
                "type": "null"
              }
            ],
            "description": "실패 시 오류 메시지(Null 가능).\n\n자동화 실패, 수동처리 필요 등 다양한 케이스를 구분합니다."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "이벤트 생성 시각(ISO8601).\n\nPrisma의 created_at과 동일(로그 입력 시 서버시간으로 지정 권장)."
          }
        },
        "required": [
          "external_system_id",
          "event_type",
          "request_payload",
          "success",
          "created_at"
        ],
        "description": "외부 연동 이벤트 로그 신규 생성요청 바디 타입입니다.\n\nERP/쇼핑몰/API 시스템 등과의 통신에서 발생한 각 연동 시나리오별 원본 요청정보, 결과 상태, 생성시각, 오류정보 등 실시간/비동기 이벤트를 원자적으로 입력할 때 사용하는 도메인 구조입니다."
      },
      "IVirtualAccountExternalIntegrationLogs.IUpdate": {
        "type": "object",
        "properties": {
          "event_type": {
            "type": "string",
            "description": "이벤트 유형(예: SYNC, PUSH, FAIL). 수정이 필요할 경우 사용됩니다.\n\nPrisma 원본 주석 설명과 동일하며, business scenario에 따라 correction 용도로 활용합니다."
          },
          "response_payload": {
            "oneOf": [
              {
                "type": "string",
                "description": "외부 시스템 응답 RAW 페이로드(이벤트 후속 처리 시 갱신 용).\n\n반드시 업데이트 필요할 때만 사용합니다."
              },
              {
                "type": "null"
              }
            ],
            "description": "외부 시스템 응답 RAW 페이로드(이벤트 후속 처리 시 갱신 용).\n\n반드시 업데이트 필요할 때만 사용합니다."
          },
          "success": {
            "type": "boolean",
            "description": "연동 성공/실패 결과값.\n\n업데이트 처리 시 실제 상태를 보정, 조정할 수 있도록 허용됩니다."
          },
          "error_message": {
            "oneOf": [
              {
                "type": "string",
                "description": "실패/오류 사유(Nullable).\n\n장애, API 실패, 수동관리 등 후처리 로그 보정용."
              },
              {
                "type": "null"
              }
            ],
            "description": "실패/오류 사유(Nullable).\n\n장애, API 실패, 수동관리 등 후처리 로그 보정용."
          }
        },
        "required": [],
        "description": "외부 연동 이벤트 로그 정보 수정용 바디 타입입니다.\n\n이벤트 결과, 오류메시지, 응답 페이로드 등 단건 갱신 시 활용됩니다. 비즈니스 상 허용된 필드만 Patch 지원."
      },
      "IVirtualAccountExternalIntegrationLogs.IDeleteResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "삭제(취소)된 외부 연동 로그의 고유 식별자.\n\nPrisma 스키마의 id 컬럼 설명과 일치합니다."
          },
          "deleted": {
            "type": "boolean",
            "description": "삭제 성공 여부. true=삭제됨, false=존재하지 않음 또는 삭제 실패.\n\n삭제 성공/실패의 결과 플래그입니다."
          }
        },
        "required": [
          "id",
          "deleted"
        ],
        "description": "외부 연동 로그 삭제 결과 오브젝트입니다.\n\n삭제 요청 결과(성공/실패 및 대상 식별)를 반환합니다."
      },
      "IVirtualAccountErpTypes.IRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "검색/필터/정렬을 위한 ERP 타입 코드값.\n\nERP 벤더 구분 등으로 사용되며, Prisma 엔티티 필드와 연동됩니다."
          },
          "display_name": {
            "type": "string",
            "description": "ERP 표준명/검색명.\n\n필터, 검색, UI 캡션 등에 활용."
          },
          "created_from": {
            "type": "string",
            "format": "date-time",
            "description": "생성일 검색 시작(ISO8601)."
          },
          "created_to": {
            "type": "string",
            "format": "date-time",
            "description": "생성일 검색 종료(ISO8601)."
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "description": "페이지 번호(기본 1)."
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "description": "페이지 당 레코드 수(기본 20)."
          }
        },
        "required": [],
        "description": "ERP 타입 목록(코드, 명칭, 등록일 등) 검색/필터용 요청 구조입니다.\n\n요구 조건에 따른 필드만 선택적으로 전달합니다."
      },
      "IPageIVirtualAccountErpTypes": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountErpTypes"
            },
            "description": "ERP 타입 리스트."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "ERP 타입 목록의 페이지네이션 결과 컨테이너입니다.\n\n관리자 대시보드, 시스템 연결설정 화면 등에서 ERP타입 테이블의 페이징/검색/다운로드 용도로 반환됩니다."
      },
      "IVirtualAccountErpTypes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ERP 타입 엔터티의 고유 식별자입니다.\n\nPrisma의 id 컬럼과 연결되며, ERP 벤더 구분/조회 등에서 사용됩니다."
          },
          "code": {
            "type": "string",
            "description": "ERP 타입 코드.\n\nPrisma 스키마 code 컬럼에 따라 중복 불가/PK성질을 지닙니다."
          },
          "display_name": {
            "type": "string",
            "description": "ERP 벤더/타입의 한글 표기.\n\nERP UI, 관리자 화면, 연동 업무 등에 활용됩니다."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "등록일자(ISO8601).\n\n테이블 생성 시각기록 및 색인에 활용."
          }
        },
        "required": [
          "id",
          "code",
          "display_name",
          "created_at"
        ],
        "description": "ERP 벤더/타입 정보 마스터 테이블 행의 구조입니다.\n\nERP 연동, 관리화면, 외부연동설정 등에서 ERP별 코드와 표준명칭, 등록일자를 제공합니다."
      },
      "IVirtualAccountErpTypes.ICreate": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "신규 ERP 타입(벤더) 코드.\n\nPrisma 스키마 고유 제약조건에 맞춰 입력 필요."
          },
          "display_name": {
            "type": "string",
            "description": "ERP 벤더명/표기명.\n\n관리자 UI, 연동설정 등의 표기필드."
          }
        },
        "required": [
          "code",
          "display_name"
        ],
        "description": "ERP 타입(벤더) 마스터 신규 생성 요청 구조입니다.\n\ncode, display_name 필수 입력이며, 중복 입력 제약이 있습니다."
      },
      "IVirtualAccountErpType.IUpdate": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "description": "ERP 타입의 표기명(수정용). Prisma description 참고.\n\n관리자 라이프사이클에서 ERP 벤더명 대체, UI 변경 등에 활용됩니다."
          }
        },
        "required": [],
        "description": "ERP 타입(벤더) 정보 수정시의 요청 바디 타입입니다.\n\n변경가능 필드를 명확히 표기합니다."
      },
      "IVirtualAccountErpType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ERP 타입 고유 식별자(Prisma의 id FK 및 조회키)."
          },
          "code": {
            "type": "string",
            "description": "ERP 코드값(벤더 구분). Prisma 코드 컬럼 참조."
          },
          "display_name": {
            "type": "string",
            "description": "ERP 한글 표기. 관리자 UI, 통합 연동제어 등에서 활용."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "등록 일시(ISO8601). Prisma 생성일 컬럼과 동일."
          }
        },
        "required": [
          "id",
          "code",
          "display_name",
          "created_at"
        ],
        "description": "단일 ERP 타입(벤더코드) 행 정보 구조(조회 등 단건뷰 응답).\n\nPrisma 엔티티 구조/주석 기반 ERP 통합관리/검색용 활용 케이스에 직결."
      },
      "IVirtualAccountErpType.IDeleteResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "삭제한 ERP 타입 식별자.\n\nPrisma 고유키 설명과 동일."
          },
          "deleted": {
            "type": "boolean",
            "description": "삭제 여부(성공=TRUE, 실패=FALSE).\n\n삭제결과를 출력합니다."
          }
        },
        "required": [
          "id",
          "deleted"
        ],
        "description": "ERP 타입 삭제(취소) 요청에 대한 결과 데이터 구조.\n\n최종 삭제 성공, 실패 및 대상 식별자를 반환합니다."
      },
      "IVirtualAccountErpSync.IRequest": {
        "type": "object",
        "properties": {
          "erp_type_id": {
            "type": "string",
            "format": "uuid",
            "description": "ERP 타입 UUID. (Prisma FK, ERP 연동 구분용)"
          },
          "external_system_id": {
            "type": "string",
            "format": "uuid",
            "description": "외부 시스템 UUID. (Prisma FK, 외부연동 시스템 참조)"
          },
          "result_status": {
            "type": "string",
            "description": "결과 상태 필터(예: SUCCESS, FAIL 등)"
          },
          "created_from": {
            "type": "string",
            "format": "date-time",
            "description": "동기화 이벤트 시작일시(Search)"
          },
          "created_to": {
            "type": "string",
            "format": "date-time",
            "description": "동기화 이벤트 종료일시(Search)"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "description": "페이지 번호"
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "default": 20,
            "description": "페이지 당 행 수"
          }
        },
        "required": [],
        "description": "ERP Sync(연동로그) 목록 조회 시의 검색/필터/페이징 파라미터 객체입니다.\n\nERP 타입, 외부시스템, 결과상태 등 업무보고, 운영대시보드 등 다양한 요구조건에 필터를 적용하여 조회할 수 있습니다."
      },
      "IPageIVirtualAccountErpSync": {
        "type": "object",
        "description": "ERP 연동 로그 목록 및 페이징 메타 정보 컨테이너.\n\nERP/외부시스템 연동 내역 목록조회 등에서 사용하며, 데이터의 집합과 페이징 정보를 함께 제공합니다. Prisma DB의 virtual_account_erp_syncs 테이블과 연계됩니다. ERP 연동 이력, 관리자 대시보드의 리스트 및 엑셀 추출 등 다양한 화면/업무 API 결과에 활용할 수 있습니다.",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "페이징 정보 객체. 현재 페이지, 페이지당 개수, 전체 레코드 수, 전체 페이지 수 등을 표시합니다."
          },
          "data": {
            "type": "array",
            "description": "ERP 연동 로그 목록 데이터.",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountErpSync"
            }
          }
        },
        "required": [
          "pagination",
          "data"
        ]
      },
      "IVirtualAccountErpSync": {
        "type": "object",
        "description": "ERP 연동 싱크(송수신 이벤트) 단일 행.\n\nvirtual_account_erp_syncs 테이블의 한 건을 의미하며, 외부 ERP 시스템으로의 송수신 이력 및 결과 값을 상세하게 기록합니다. 필수적으로 ERP 유형, 외부시스템 정보, 페이로드, 결과 상태, 에러 및 발생 시각 등을 포함합니다.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ERP 연동 싱크 로그 식별자(Key).\n\n각 연동 이벤트의 고유 PK(UUID)입니다. virtual_account_erp_syncs.id 컬럼에서 관리합니다."
          },
          "erp_type_id": {
            "type": "string",
            "format": "uuid",
            "description": "ERP 유형 테이블(virtual_account_erp_types) FK.\n\n해당 연동이 어떤 ERP 유형과 관련있는지 식별합니다."
          },
          "external_system_id": {
            "type": "string",
            "format": "uuid",
            "description": "외부 시스템 테이블(virtual_account_external_systems) FK.\n\n어느 외부 시스템과 연동했는지 구분합니다."
          },
          "payload": {
            "type": "string",
            "description": "ERP 또는 외부 시스템에 전달된(혹은 받은) 원본 JSON/텍스트 페이로드.\n\n송수신 데이터 전체를 문자열로 기록합니다."
          },
          "result_status": {
            "type": "string",
            "description": "송수신 결과 상태값.\n\n예: 'SUCCESS', 'FAIL' 등 업무상 성공/실패 여부 기록. 비즈니스 로직상 다양한 상태코드 정의 가능."
          },
          "error_message": {
            "oneOf": [
              {
                "type": "string",
                "description": "실패 시 에러 메시지.\n\nERROR 또는 FAIL 시 의미를 담는 자유형 오류 메시지입니다. Null이면 정상 전송."
              },
              {
                "type": "null"
              }
            ],
            "description": "실패 시 에러 메시지.\n\nERROR 또는 FAIL 시 의미를 담는 자유형 오류 메시지입니다. Null이면 정상 전송."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "이 연동 기록이 생성된 UTC 일시(varchar).\n\n업무 트레이스 및 이후 조회/정렬, 시간대 별 분석 등에 사용합니다."
          }
        },
        "required": [
          "id",
          "erp_type_id",
          "external_system_id",
          "payload",
          "result_status",
          "created_at"
        ]
      },
      "IVirtualAccountErpSync.ICreate": {
        "type": "object",
        "description": "ERP 연동 로그 신규 생성 요청 DTO.\n\nERP 외부 시스템 송·수신 이력을 신규로 기록할 때 사용하는 필드 집합입니다. virtual_account_erp_syncs의 생성 시 요구되는 값과 정합을 갖춥니다.",
        "properties": {
          "erp_type_id": {
            "type": "string",
            "format": "uuid",
            "description": "ERP 유형 테이블 FK. 연동 대상 ERP 타입의 식별자입니다."
          },
          "external_system_id": {
            "type": "string",
            "format": "uuid",
            "description": "외부 시스템 테이블 FK. 연동한 외부 시스템의 식별자입니다."
          },
          "payload": {
            "type": "string",
            "description": "ERP 또는 외부 시스템에 전달된 송수신 원본 데이터(JSON/텍스트 등)."
          },
          "result_status": {
            "type": "string",
            "description": "송수신 결과 상태(예: 'SUCCESS', 'FAIL')."
          },
          "error_message": {
            "oneOf": [
              {
                "type": "string",
                "description": "실패 시 에러 메시지. 정상시는 null."
              },
              {
                "type": "null"
              }
            ],
            "description": "실패 시 에러 메시지. 정상시는 null."
          }
        },
        "required": [
          "erp_type_id",
          "external_system_id",
          "payload",
          "result_status"
        ]
      },
      "IVirtualAccountErpSync.IUpdate": {
        "type": "object",
        "description": "ERP 연동 싱크 데이터 수정 DTO.\n\n성공/실패 상태, 에러 메시지, 송수신 페이로드 등을 수정할 때 활용합니다.",
        "properties": {
          "result_status": {
            "type": "string",
            "description": "수정할 결과 상태값(예: SUCCESS/FAIL 등)."
          },
          "error_message": {
            "oneOf": [
              {
                "type": "string",
                "description": "에러 메시지(실패 시), 정상시 null."
              },
              {
                "type": "null"
              }
            ],
            "description": "에러 메시지(실패 시), 정상시 null."
          },
          "payload": {
            "type": "string",
            "description": "수정할 송수신 데이터 원본(JSON/텍스트 등)."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "생성 일시(일부 수정 시 필요), 표준 UTC."
          }
        },
        "required": [
          "result_status",
          "payload"
        ]
      },
      "IVirtualAccountErpSync.IDeleteResult": {
        "type": "object",
        "description": "ERP 연동 로그 삭제 결과 객체.\n\nPK와 결과 메시지(또는 상태)를 반환할 수 있습니다. 실제 사용 컨텍스트에 따라 상태 메시지 추가 가능합니다.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "삭제된 ERP 연동 로그의 PK(UUID)."
          },
          "result": {
            "type": "string",
            "description": "삭제 결과 메시지 또는 상태(ex: 'success', 'not found' 등)."
          }
        },
        "required": [
          "id",
          "result"
        ]
      },
      "IVirtualAccountMallSync.IRequest": {
        "type": "object",
        "description": "몰 연동 로그(가상계좌 → 쇼핑몰 Webhook 등) 목록/검색에 사용하는 파라미터들.\n\nvirtual_account_mall_syncs의 조회 조건에 대응하며, 외부 쇼핑몰 연동 현황 리스트(기간, 상태, 주문ID 등) 조회에 사용합니다.",
        "properties": {
          "external_system_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "연동 대상 쇼핑몰 외부시스템 PK, null이면 전체."
              },
              {
                "type": "null"
              }
            ],
            "description": "연동 대상 쇼핑몰 외부시스템 PK, null이면 전체."
          },
          "order_id": {
            "oneOf": [
              {
                "type": "string",
                "description": "대상 주문 ID. 부분검색 허용."
              },
              {
                "type": "null"
              }
            ],
            "description": "대상 주문 ID. 부분검색 허용."
          },
          "result_status": {
            "oneOf": [
              {
                "type": "string",
                "description": "송수신 결과 상태값('SUCCESS', 'FAIL' 등). null은 전체."
              },
              {
                "type": "null"
              }
            ],
            "description": "송수신 결과 상태값('SUCCESS', 'FAIL' 등). null은 전체."
          },
          "from_date": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "조회 시작 일시(포함)."
              },
              {
                "type": "null"
              }
            ],
            "description": "조회 시작 일시(포함)."
          },
          "to_date": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "조회 종료 일시(포함)."
              },
              {
                "type": "null"
              }
            ],
            "description": "조회 종료 일시(포함)."
          },
          "page": {
            "oneOf": [
              {
                "type": "integer",
                "format": "int32",
                "description": "페이징: 요청 페이지 번호(1-base)."
              },
              {
                "type": "null"
              }
            ],
            "description": "페이징: 요청 페이지 번호(1-base)."
          },
          "size": {
            "oneOf": [
              {
                "type": "integer",
                "format": "int32",
                "description": "페이징: 페이지당 행 개수."
              },
              {
                "type": "null"
              }
            ],
            "description": "페이징: 페이지당 행 개수."
          }
        },
        "required": []
      },
      "IPageIVirtualAccountMallSync": {
        "type": "object",
        "description": "몰 연동 로그 검색 결과와 페이징 메타 데이터.\n\n관리자 대시보드의 연동 결과 리스트, 엑셀 저장 등 페이징 데이터 포함 응답에 사용합니다.",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "페이징 정보"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountMallSync"
            },
            "description": "몰 연동 로그 데이터 배열"
          }
        },
        "required": [
          "pagination",
          "data"
        ]
      },
      "IVirtualAccountMallSync": {
        "type": "object",
        "description": "몰 연동(Webhook/PUSH 등) 로그 엔터티 객체.\n\nvirtual_account_mall_syncs 테이블 1건 전부. 외부몰과 송수신 push 기록, 처리 상태, 페이로드/응답, 오류 등 포함.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "몰 연동 로그 PK(UUID)."
          },
          "external_system_id": {
            "type": "string",
            "format": "uuid",
            "description": "연결된 외부 시스템 ID(UUID)."
          },
          "order_id": {
            "type": "string",
            "description": "대상 주문ID. ERP/몰 등 외부 시스템 기준 키."
          },
          "payload": {
            "type": "string",
            "description": "송수신 페이로드 전체(문자열)."
          },
          "response": {
            "oneOf": [
              {
                "type": "string",
                "description": "상대 시스템 응답 내용(문자열, JSON 등), \nnull이면 미응답/실패 등."
              },
              {
                "type": "null"
              }
            ],
            "description": "상대 시스템 응답 내용(문자열, JSON 등), \nnull이면 미응답/실패 등."
          },
          "result_status": {
            "type": "string",
            "description": "처리 결과 상태('SUCCESS','FAIL', 등)."
          },
          "error_message": {
            "oneOf": [
              {
                "type": "string",
                "description": "에러 발생 시 메시지, 정상시 null."
              },
              {
                "type": "null"
              }
            ],
            "description": "에러 발생 시 메시지, 정상시 null."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "이 연동 기록이 생성된 UTC 일시."
          }
        },
        "required": [
          "id",
          "external_system_id",
          "order_id",
          "payload",
          "result_status",
          "created_at"
        ]
      },
      "IVirtualAccountMallSync.ICreate": {
        "type": "object",
        "description": "몰 연동 로그 신규 생성 DTO.\n\n외부몰 sync 이벤트 발생 시 삽입 요청에서 사용. 테이블 virtual_account_mall_syncs 필수 항목을 받아야 함.",
        "properties": {
          "external_system_id": {
            "type": "string",
            "format": "uuid",
            "description": "연동 외부 시스템 PK(UUID)."
          },
          "order_id": {
            "type": "string",
            "description": "몰/외부시스템 기준 주문 ID."
          },
          "payload": {
            "type": "string",
            "description": "송수신 페이로드 전체(문자열, JSON 등)."
          },
          "response": {
            "oneOf": [
              {
                "type": "string",
                "description": "상대 시스템 응답(문자열, JSON 등), null 허용."
              },
              {
                "type": "null"
              }
            ],
            "description": "상대 시스템 응답(문자열, JSON 등), null 허용."
          },
          "result_status": {
            "type": "string",
            "description": "처리 결과(예:'SUCCESS','FAIL' 등)."
          },
          "error_message": {
            "oneOf": [
              {
                "type": "string",
                "description": "에러 발생 시 메시지. 정상시 null."
              },
              {
                "type": "null"
              }
            ],
            "description": "에러 발생 시 메시지. 정상시 null."
          }
        },
        "required": [
          "external_system_id",
          "order_id",
          "payload",
          "result_status"
        ]
      },
      "IVirtualAccountMallSync.IUpdate": {
        "type": "object",
        "description": "몰 연동 로그 수정 DTO.\n\n상태/응답/에러 메시지 등 정보 보정 시 사용합니다.",
        "properties": {
          "response": {
            "oneOf": [
              {
                "type": "string",
                "description": "응답 값 내용(정상 응답 or null)."
              },
              {
                "type": "null"
              }
            ],
            "description": "응답 값 내용(정상 응답 or null)."
          },
          "result_status": {
            "type": "string",
            "description": "수정할 결과 상태(예: SUCCESS/FAIL)."
          },
          "error_message": {
            "oneOf": [
              {
                "type": "string",
                "description": "수정할 에러 메시지. 정상시 null."
              },
              {
                "type": "null"
              }
            ],
            "description": "수정할 에러 메시지. 정상시 null."
          },
          "payload": {
            "type": "string",
            "description": "송수신 페이로드 문자열, 수정 적용."
          }
        },
        "required": []
      },
      "IVirtualAccountMallSync.IDeleteResult": {
        "type": "object",
        "description": "몰 연동 로그 삭제결과 반환 객체.\n\n삭제 완료된 PK, 상태, 메시지 등 반환에 사용합니다.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "삭제 대상 몰 동기화 로그 PK(UUID)."
          },
          "result": {
            "type": "string",
            "description": "삭제 결과 상태/메시지. 예:'success' / 'already deleted' 등"
          }
        },
        "required": [
          "id",
          "result"
        ]
      },
      "IVirtualAccountDashboardSettings.IRequest": {
        "type": "object",
        "description": "관리자 대시보드 환경설정(필터/레이아웃/토글 등) 페이징 목록 검색용 파라미터 DTO.\n\nvirtual_account_dashboard_settings 테이블에 저장된 각 관리자별 개인화 환경 목록을 기간/소유자 등 기준으로 다수 조회할 때 사용합니다.",
        "properties": {
          "virtual_account_admin_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "설정 소유자(관리자) PK(UUID)."
              },
              {
                "type": "null"
              }
            ],
            "description": "설정 소유자(관리자) PK(UUID)."
          },
          "from_date": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "조회 시작일. created_at >= from_date."
              },
              {
                "type": "null"
              }
            ],
            "description": "조회 시작일. created_at >= from_date."
          },
          "to_date": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "조회 종료일. created_at <= to_date."
              },
              {
                "type": "null"
              }
            ],
            "description": "조회 종료일. created_at <= to_date."
          },
          "page": {
            "oneOf": [
              {
                "type": "integer",
                "format": "int32",
                "description": "요청 페이지 번호(1-base)."
              },
              {
                "type": "null"
              }
            ],
            "description": "요청 페이지 번호(1-base)."
          },
          "size": {
            "oneOf": [
              {
                "type": "integer",
                "format": "int32",
                "description": "페이지당 행 개수."
              },
              {
                "type": "null"
              }
            ],
            "description": "페이지당 행 개수."
          }
        },
        "required": []
      },
      "IPageIVirtualAccountDashboardSettings": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "페이지네이션 정보.\n\n현재 페이지, 페이지당 제한, 데이터 전체 개수 및 전체 페이지 수가 포함됩니다. 이 정보는 관리자 대시보드 설정 목록 요청에 대한 응답의 메타데이터로 활용됩니다."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountDashboardSettings"
            },
            "description": "대시보드 설정 레코드 목록.\n\n각 항목은 개별 관리자의 대시보드 환경설정 정보를 담고 있습니다."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "관리자 대시보드 환경설정 목록 페이지네이션 응답 타입.\n\n`virtual_account_dashboard_settings` 테이블의 여러 행(레코드)을 조건 및 페이징에 따라 반환하는 표준 포맷입니다. 페이지네이션 정보와 대시보드 설정 리스트를 함께 제공합니다."
      },
      "IVirtualAccountDashboardSettings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "대시보드 설정 레코드의 고유 식별자(ID).\n\nPrisma: `id` (PK) 컬럼. 각 설정의 유일성을 보장합니다."
          },
          "virtual_account_admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "해당 설정이 소속된 관리자 계정의 ID.\n\nPrisma: `virtual_account_admin_id`. 별도의 `virtual_account_admins` 엔터티와 일대일 참조 관계."
          },
          "settings_json": {
            "type": "string",
            "description": "사용자별 대시보드 환경설정값이 직렬화된 JSON 문자열.\n\nPrisma: `settings_json`. 관리자가 지정한 대시보드 뷰 필터, 컬럼, 알림 등 다양한 설정값을 담고 있습니다.\n\n예) {'defaultTab':'settlement','filters':{'status':'ALL'}} 등. 내부적으로 반드시 JSON 형식이어야 하며, 비정규화/사전 연산 필드를 포함하지 않음."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "레코드 생성 일시.\n\nPrisma: `created_at`. 생성 및 변경 이력 확인 시 사용됩니다."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "최근 수정 일시.\n\nPrisma: `updated_at`. 대시보드 사용 패턴이나 설정 변경 추적에 사용됩니다."
          }
        },
        "required": [
          "id",
          "virtual_account_admin_id",
          "settings_json",
          "created_at",
          "updated_at"
        ],
        "description": "관리자 대시보드 환경설정 단일 레코드를 나타내는 타입.\n\nPrisma 테이블 `virtual_account_dashboard_settings`의 각 컬럼 설명에 기반하며, 개별 관리자가 보유한 UI/환경 개인화 설정, 생성/갱신 일시가 포함됩니다.\n\n설정값 관리, 로그 확인, 관리자별 UI 커스터마이징 등 다양한 관리자 기능 화면의 입출력에 이용됩니다."
      },
      "IVirtualAccountDashboardSettings.ICreate": {
        "type": "object",
        "properties": {
          "virtual_account_admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "대시보드 설정을 소유할 관리자 ID.\n\nPrisma: `virtual_account_admin_id` 컬럼. 신규 설정 생성시 필수로 참조합니다."
          },
          "settings_json": {
            "type": "string",
            "description": "초기 대시보드 설정값을 직렬화한 JSON 문자열.\n\nPrisma: `settings_json` 컬럼. 반드시 유효한 JSON 포맷이어야 하며, 필드/컬럼의 반복 또는 집계 데이터 포함 불가."
          }
        },
        "required": [
          "virtual_account_admin_id",
          "settings_json"
        ],
        "description": "관리자 대시보드 환경설정 신규 등록을 위한 입력 데이터 타입.\n\n`virtual_account_dashboard_settings` 테이블 신규 생성 API 요청 바디에 사용됩니다. 필수 값은 소유 관리자 ID와 직렬화 JSON 형태의 설정값입니다."
      },
      "IVirtualAccountDashboardSettings.IUpdate": {
        "type": "object",
        "properties": {
          "settings_json": {
            "type": "string",
            "description": "수정할 대시보드 설정값(JSON 직렬화).\n\nPrisma: `settings_json`. 변경하고자 하는 뷰, 필터, 컬럼 등 UI 환경설정 적용. 반드시 올바른 JSON 포맷이어야 합니다."
          }
        },
        "required": [
          "settings_json"
        ],
        "description": "관리자 대시보드 환경설정 수정 API의 요청 타입.\n\n`virtual_account_dashboard_settings` 테이블의 지정 레코드(고유 ID)에 대해 설정값(JSON)만 갱신 가능하며, 생성/수정 일시는 DB에서 자동 관리됩니다."
      },
      "IVirtualAccountDashboardSettings.IDeleteResult": {
        "type": "object",
        "properties": {
          "deleted": {
            "type": "boolean",
            "description": "삭제 처리 성공 여부.\n\n삭제가 정상적으로 수행되었으면 true, 실패(존재하지 않음/이미 삭제 등)일 경우 false."
          },
          "message": {
            "type": "string",
            "description": "삭제 처리 결과 메시지.\n\n추가 정보 또는 오류 상황 설명용."
          }
        },
        "required": [
          "deleted",
          "message"
        ],
        "description": "관리자 대시보드 환경설정 삭제 요청 결과 응답 타입.\n\n삭제 성공/실패 여부, 결과 메시지 등을 포함합니다."
      },
      "IVirtualAccountExcelExports.IRequest": {
        "type": "object",
        "properties": {
          "admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "엑셀 내보내기 로그를 조회할 관리자의 ID.\n\nPrisma: `virtual_account_admin_id`. 관리자가 생성한 내역 만큼 필터링에 사용됩니다."
          },
          "export_type": {
            "type": "string",
            "description": "엑셀 내보내기 데이터 종류 구분 값.\n\n예) DEPOSIT_HISTORY, ACCOUNT_STATUS, NOTIFICATIONS 등. Prisma: `export_type`."
          },
          "requested_from": {
            "type": "string",
            "format": "date-time",
            "description": "다운로드 내역 검색 시작일(UTC/ISO8601).\n\nPrisma: `requested_at` 범위 필터로 이용."
          },
          "requested_to": {
            "type": "string",
            "format": "date-time",
            "description": "다운로드 내역 검색 종료일(UTC/ISO8601).\n\nPrisma: `requested_at` 범위 필터로 이용."
          },
          "succeeded": {
            "type": "boolean",
            "description": "다운로드 성공/실패 여부로 필터링(true=성공, false=실패만)"
          }
        },
        "description": "엑셀 내보내기 이력 검색 요청/필터 타입.\n\n관리자별, 내보내기 유형별, 성공/실패 여부, 기간 등 다양한 필터링 조건으로 Excel 다운로드 로그 이력을 검색할 때 사용합니다.",
        "required": []
      },
      "IPageIVirtualAccountExcelExports": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "페이지네이션 정보.\n\n다운로드 이력 목록의 전체 개수, 현재 페이지, 페이지당 최대 개수 등 메타데이터 포함."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountExcelExports"
            },
            "description": "엑셀 다운로드 이력 레코드 배열.\n\n각 레코드에는 관리자, 필터, 파일 위치, 성공여부 등 메타 정보가 포함됩니다."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "엑셀 다운로드(내보내기) 이력 리스트 응답 타입.\n\n`virtual_account_excel_exports` 테이블 데이터의 페이지 단위 목록을 페이징 및 메타데이터와 함께 제공합니다."
      },
      "IVirtualAccountExcelExports": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "엑셀 내보내기 로그의 고유 식별자(ID).\n\nPrisma: `id` (PK) 컬럼.\n관리자가 개별적으로 수행한 내보내기 작업별 로그 ID."
          },
          "virtual_account_admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "엑셀 내보내기 요청을 실행한 관리자 ID.\n\nPrisma: `virtual_account_admin_id` 컬럼.\n내보내기 수행 주체 조회에 활용."
          },
          "export_type": {
            "type": "string",
            "description": "다운로드한 데이터 종류 구분.\n\nPrisma: `export_type` 컬럼.\n예: DEPOSIT_HISTORY, ACCOUNT_STATUS, NOTIFICATIONS."
          },
          "filter_applied": {
            "type": "string",
            "description": "엑셀 내보내기 수행 시 적용된 필터 설정 값(JSON 직렬화).\n\nPrisma: `filter_applied` 컬럼. 다운로드 당시 검색조건, 필터, 기간, 상태 등이 모두 기록됩니다."
          },
          "requested_at": {
            "type": "string",
            "format": "date-time",
            "description": "내보내기 요청 시각.\n\nPrisma: `requested_at` 컬럼. 작업의 생성 일시(타임스탬프) 기록."
          },
          "succeeded": {
            "type": "boolean",
            "description": "내보내기 작업의 성공/실패 여부.\n\nPrisma: `succeeded` 컬럼. true=성공, false=실패 기록."
          },
          "file_path": {
            "type": "string",
            "description": "내보내기 파일(Excel)의 저장 위치(URI).\n\nPrisma: `file_path` 컬럼. S3 URI 등 또는 실패 시 null/미입력."
          }
        },
        "required": [
          "id",
          "virtual_account_admin_id",
          "export_type",
          "filter_applied",
          "requested_at",
          "succeeded"
        ],
        "description": "엑셀 내보내기(다운로드) 이력 단일 레코드 타입.\n\n`virtual_account_excel_exports` 테이블의 각 컬럼에 대한 설명 및 관리자, 데이터 종류, 요청 일시, 적용 필터, 파일 경로, 성공/실패 여부 등의 정보를 포함합니다.\n\n관리자 대시보드의 다운로드 이력 조회, 지원, 감사 목적 등으로 활용됩니다."
      },
      "IVirtualAccountExcelExports.ICreate": {
        "type": "object",
        "properties": {
          "virtual_account_admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "내보내기 수행 관리자 ID.\n\nPrisma: `virtual_account_admin_id` 컬럼. 로그 생성 시 필수."
          },
          "export_type": {
            "type": "string",
            "description": "다운로드하는 데이터 유형.\n\nPrisma: `export_type` 컬럼. 예: 'DEPOSIT_HISTORY', 'ACCOUNT_STATUS'."
          },
          "filter_applied": {
            "type": "string",
            "description": "다운로드 수행 시의 적용 필터 정보(JSON 직렬화).\n\nPrisma: `filter_applied` 컬럼. 다양한 조건 및 검색 파라미터 기록."
          },
          "file_path": {
            "type": "string",
            "description": "생성된 엑셀 파일의 저장 위치(URI).\n\nPrisma: `file_path` 컬럼. 성공시 경로 기록."
          }
        },
        "required": [
          "virtual_account_admin_id",
          "export_type",
          "filter_applied"
        ],
        "description": "엑셀 내보내기 이력 신규 로그 생성 요청 타입.\n\nAPI에 의해 새로운 다운로드 기록을 추가할 때 사용. 필수 값은 수행 관리자, 내보내기 유형, 필터 정보이며, 성공시 파일 저장 경로 포함."
      },
      "IVirtualAccountExcelExports.IUpdate": {
        "type": "object",
        "properties": {
          "file_path": {
            "type": "string",
            "description": "엑셀 파일 저장위치(URI) 갱신 값.\n\n내보내기 완료 후 결과 경로를 업데이트할 때 주로 사용합니다."
          },
          "succeeded": {
            "type": "boolean",
            "description": "내보내기 성공/실패 여부 갱신 값.\n\n배경 작업의 실패/성공 결과 반영시 활용."
          }
        },
        "description": "엑셀 내보내기 이력 갱신 요청 타입.\n\n주로 파일의 실제 저장 위치 또는 성공여부(상태)만 추적시 사용. 설정가능한 값만 입력 가능.",
        "required": []
      },
      "IVirtualAccountExcelExports.IDeleteResult": {
        "type": "object",
        "properties": {
          "deleted": {
            "type": "boolean",
            "description": "삭제 성공 여부\n\ntrue: 삭제 성공, false: 대상 없음/이미 삭제됨"
          },
          "message": {
            "type": "string",
            "description": "삭제 결과 상세 메시지\n\n성공/실패 사유 등 기타 설명"
          }
        },
        "required": [
          "deleted",
          "message"
        ],
        "description": "엑셀 내보내기 이력 삭제 결과 응답 타입.\n\n삭제 성공여부와 상세 메시지를 전달합니다."
      },
      "IVirtualAccountAdminAlerts.IRequest": {
        "type": "object",
        "properties": {
          "virtual_account_admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "대상 관리자 ID(필터)\n\n지정 관리자 알림만 필터링. Prisma: `virtual_account_admin_id`."
          },
          "alert_type": {
            "type": "string",
            "description": "알림/경보 유형 (EX: MASS_MISMATCH, EXTERNAL_ERROR 등)\n\nPrisma: `alert_type`. 유형별 분류 검색."
          },
          "notified_from": {
            "type": "string",
            "format": "date-time",
            "description": "알림 생성/발송 검색 시작일(ISO8601)\n\nPrisma: `notified_at` 컬럼 검색에 활용."
          },
          "notified_to": {
            "type": "string",
            "format": "date-time",
            "description": "알림 생성/발송 검색 종료일.\n\nPrisma: `notified_at` 컬럼 검색에 활용."
          },
          "clearable": {
            "type": "boolean",
            "description": "알림 읽음처리(삭제가능) 여부 필터. Prisma: `clearable`."
          },
          "cleared": {
            "type": "boolean",
            "description": "알림 실제 read/clear 처리됨 여부(해당시 true). Prisma: `cleared_at` 널이 아닌 경우 true."
          }
        },
        "description": "관리자 알림/경보 조회용 요청 필터 타입.\n\n관리자 알림 리스트/검색 API의 파라미터 타입으로, 관리자별, 알림유형, 발송일, 읽음/해제 상태 등 다양한 조건 필터를 제공합니다.",
        "required": []
      },
      "IPageIVirtualAccountAdminAlerts": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "페이지네이션 및 전체 카운트 정보. 대시보드 UI의 페이징, 총 경보 갯수 표시, 내보내기 등에 반드시 사용됩니다."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountAdminAlerts"
            },
            "description": "관리자 경보/알림 엔티티 리스트. 한 페이지 내 최대 N건. 각 알림은 상세 설명, 발생 시각, 관련 관리자 등 모든 주요 정보를 담고 있습니다."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "관리자 경보(알림) 페이징 목록 응답 구성체.\n\nvirtual_account_admin_alerts 테이블을 기반으로, 관리자 대시보드의 경보/알림 이력 표, 이상 패턴 감지 이벤트, 외부 연동 장애/오류 알림 등에 활용됩니다.\n\n각 페이지네이션 정보와 개별 알림 배열로 구성되어 있으며, 시스템에서 발생한 주요 이벤트, 위험 상황, 관리자 대상 공지 등을 제공합니다."
      },
      "IVirtualAccountAdminAlerts": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "경보/알림의 고유 식별자.\n\nvirtual_account_admin_alerts.id와 1:1로 매핑됩니다."
          },
          "virtual_account_admin_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "알림을 수신하는 대상 관리자 UUID.\n\n특정 관리자 지정용이며, 시스템 전체 알림은 null 가능합니다."
              },
              {
                "type": "null"
              }
            ],
            "description": "알림을 수신하는 대상 관리자 UUID.\n\n특정 관리자 지정용이며, 시스템 전체 알림은 null 가능합니다."
          },
          "alert_type": {
            "type": "string",
            "description": "경보/이상 이벤트 유형 코드. (예: MASS_MISMATCH, EXTERNAL_ERROR, SECURITY_WARNING 등)\n\nvirtual_account_admin_alerts.alert_type의 비즈니스 해석값입니다."
          },
          "context_json": {
            "type": "string",
            "description": "경보/알림의 상세 데이터(JSON 문자열).\n\n이벤트 관련 상세 설명, 대상 엔티티, 에러 context 등 임의의 구조."
          },
          "notified_at": {
            "type": "string",
            "format": "date-time",
            "description": "해당 알림이 시스템에 생성/노출된 시각(UTC, ISO8601).\n\nvirtual_account_admin_alerts.notified_at에 직접 매핑."
          },
          "clearable": {
            "type": "boolean",
            "description": "UI상 '확인/해제' 가능 여부 표시.\n\n관리자가 수동으로 경보를 해지/확인할 수 있으면 true."
          },
          "cleared_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "관리자에 의해 알림이 확인(처리 종료 등)된 시각.\n\nnull이면 아직 미확인 상태."
              },
              {
                "type": "null"
              }
            ],
            "description": "관리자에 의해 알림이 확인(처리 종료 등)된 시각.\n\nnull이면 아직 미확인 상태."
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "해당 알림에 대한 부가 설명, 관리자에게 표시할 요약/해설/비고. (Optional)\n\n예: 특정 이슈에 부연설명 제공 목적."
              },
              {
                "type": "null"
              }
            ],
            "description": "해당 알림에 대한 부가 설명, 관리자에게 표시할 요약/해설/비고. (Optional)\n\n예: 특정 이슈에 부연설명 제공 목적."
          }
        },
        "required": [
          "id",
          "alert_type",
          "context_json",
          "notified_at",
          "clearable"
        ],
        "description": "관리자 경보/알림 엔티티 대표 타입입니다.\n\nvirtual_account_admin_alerts 테이블의 1행과 1:1 매핑되며, 대량 미매칭, 외부 연동 장애, 보안 경고 등 다양한 시스템 이벤트를 포괄합니다.\n\n관리자 대시보드에서의 현황판/실시간 알림, 경보 리스트, 상세 내역, Excel 내보내기 등에 사용됩니다."
      },
      "virtual_account_admin_alerts.ICreate": {
        "type": "object",
        "properties": {
          "virtual_account_admin_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "경보 알림의 수신 대상 관리자(UUID). 시스템 전체 알림이면 생략/빈값 허용."
              },
              {
                "type": "null"
              }
            ],
            "description": "경보 알림의 수신 대상 관리자(UUID). 시스템 전체 알림이면 생략/빈값 허용."
          },
          "alert_type": {
            "type": "string",
            "description": "경보 유형 코드.\n\nMASS_MISMATCH, EXTERNAL_ERROR, SECURITY_WARNING 등 비즈니스 정책별로 정의."
          },
          "context_json": {
            "type": "string",
            "description": "이벤트/경보의 상세 context를 담는 JSON 문자열.\n\n이상 감지시 involved account, 발생 데이터, 배경 등 포함."
          },
          "notified_at": {
            "type": "string",
            "format": "date-time",
            "description": "알림/경보의 최초 생성(발생) 시각. UTC ISO8601 포맷."
          },
          "clearable": {
            "type": "boolean",
            "description": "관리자가 수동 처리가능(확인/해제) 여부.\n\n대시보드 UI 및 관련 트리거 처리에 반드시 필요."
          }
        },
        "required": [
          "alert_type",
          "context_json",
          "notified_at",
          "clearable"
        ],
        "description": "관리자 경보 알림 신규 등록 요청 DTO입니다.\n\nvirtual_account_admin_alerts 테이블에 신규 알림 row를 insert할 때 사용되며, 대량 오류, 외부 API 장애, 시스템 경고 이벤트에 대응합니다.\n\n필수값: alert_type, context_json, notified_at, clearable. 관리자 경보 alert의 모든 신규 생성/등록 API에 활용됩니다."
      },
      "virtual_account_admin_alerts": {
        "$ref": "#/components/schemas/IVirtualAccountAdminAlerts",
        "description": "관리자 경보/알림 엔티티 단일 객체 타입 별칭.\n\nvirtual_account_admin_alerts DB Record와 동등하며 상세 내역, 통계, Excel 다운로드 등 다양한 응답에 활용됩니다."
      },
      "virtual_account_admin_alerts.IUpdate": {
        "type": "object",
        "properties": {
          "alert_type": {
            "type": "string",
            "description": "경보/이상 이벤트 유형코드 (변경시)"
          },
          "context_json": {
            "type": "string",
            "description": "context_json 필드(변경시)"
          },
          "clearable": {
            "type": "boolean",
            "description": "확인/해제 가능 플래그(변경시)"
          },
          "cleared_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "경보 확인/해제(처리) 시각. null이면 미확인 상태."
              },
              {
                "type": "null"
              }
            ],
            "description": "경보 확인/해제(처리) 시각. null이면 미확인 상태."
          }
        },
        "description": "관리자 경보/알림 레코드 업데이트(부분 수정·patch) 시 사용하는 DTO\n\ncleared_at(확인/해제)를 포함, 일부 필드만 변경 가능. 예시: 알림 처리, 비고 추가 등 단건 patch처리 용도.",
        "required": []
      },
      "virtual_account_admin_activity_logs.IRequest": {
        "type": "object",
        "properties": {
          "actor_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "행위 관리자 UUID로 필터(선택)"
              },
              {
                "type": "null"
              }
            ],
            "description": "행위 관리자 UUID로 필터(선택)"
          }
        },
        "description": "관리자 행위·감사 로그 목록 조회 및 필터·검색 PATCH(리스트) 요청 DTO\n\nmain 컬럼: actor_id(수행자), action_type(행위 유형), entity_type(타깃), result(수행결과), occurred_from/to(기간), page, limit, sort 등 페이징/검색 옵션을 포괄. 대시보드, 보안 대시보드에서 사용.",
        "required": []
      },
      "IPagevirtual_account_admin_activity_logs": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "페이징 정보. 전체 레코드 수, 현재 페이지 등"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/virtual_account_admin_activity_logs"
            },
            "description": "감사 로그 단건 목록. virtual_account_admin_activity_logs 오브젝트 배열"
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "관리자 행위/감사 로그 페이징 결과 오브젝트\n\nvirtual_account_admin_activity_logs(PK 기준으로 페이지별/조건별 조회시 최종 결과. 대시보드, Excel내보내기, 검색 뷰에서 사용)"
      },
      "virtual_account_admin_activity_logs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "로그 고유 UUID(PK)."
          },
          "virtual_account_admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "로그 소유 관리자(수행자) UUID."
          },
          "action_type": {
            "type": "string",
            "description": "행위 유형 코드(예: EXPORT_EXCEL, DASHBOARD_UPDATE 등)."
          },
          "entity_type": {
            "type": "string",
            "description": "로그가 기록된 대상 엔티티명."
          },
          "target_entity_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "타깃 엔티티 uuid(null 허용)"
              },
              {
                "type": "null"
              }
            ],
            "description": "타깃 엔티티 uuid(null 허용)"
          },
          "result": {
            "type": "string",
            "description": "행위 결과(성공/실패 상태값, 에러 등)"
          },
          "meta_json": {
            "type": "string",
            "description": "부가 정보, 이벤트 context JSON. 첨부 정보용"
          },
          "ip_addr": {
            "type": "string",
            "description": "행위 발생 IP주소"
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "description": "행위 시각(ISO8601, UTC)"
          }
        },
        "required": [
          "id",
          "virtual_account_admin_id",
          "action_type",
          "entity_type",
          "result",
          "meta_json",
          "ip_addr",
          "occurred_at"
        ],
        "description": "관리자 행위(감사) 로그 단건 오브젝트\n\n관리자 모든 주요 이벤트(엑셀다운로드, 권한변경 등) 이력 레코드의 완전형 정의. virtual_account_admin_activity_logs DB row와 1:1 대응."
      },
      "virtual_account_admin_activity_logs.ICreate": {
        "type": "object",
        "properties": {
          "virtual_account_admin_id": {
            "type": "string",
            "format": "uuid",
            "description": "로그 생성(작성) 관리자 UUID"
          },
          "action_type": {
            "type": "string",
            "description": "행위 유형 코드"
          },
          "entity_type": {
            "type": "string",
            "description": "주요 대상 엔티티"
          },
          "target_entity_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "타깃 엔티티 UUID (O)"
              },
              {
                "type": "null"
              }
            ],
            "description": "타깃 엔티티 UUID (O)"
          },
          "result": {
            "type": "string",
            "description": "수행 결과 (필수)"
          },
          "meta_json": {
            "type": "string",
            "description": "연관 추가 정보(JSON)"
          },
          "ip_addr": {
            "type": "string",
            "description": "발생 IP주소(옵션)"
          },
          "occurred_at": {
            "type": "string",
            "format": "date-time",
            "description": "실행시각(UTC ISO8601)"
          }
        },
        "required": [
          "virtual_account_admin_id",
          "action_type",
          "entity_type",
          "result",
          "meta_json",
          "ip_addr",
          "occurred_at"
        ],
        "description": "관리자 행위·감사 로그 신규 생성 요청 DTO\n\n관리자 이벤트 발생 시 신규 로그 로우 추가에 이용. 필수: 관리자 ID, 액션, 엔티티명, 결과, meta, ip, 시각."
      },
      "virtual_account_admin_activity_logs.IUpdate": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "수행 결과/상태(변경값 patch)"
          },
          "meta_json": {
            "type": "string",
            "description": "이벤트 context 메타(JSON) (patch)"
          },
          "target_entity_id": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid",
                "description": "타깃 엔티티 UUID (optional patch)"
              },
              {
                "type": "null"
              }
            ],
            "description": "타깃 엔티티 UUID (optional patch)"
          }
        },
        "description": "관리자 감사 로그 일부 필드 patch/update DTO\n\n비고, 결과, 메타 등 일부 정보를 갱신할 때 사용.",
        "required": []
      },
      "virtual_account_system_settings.IRequest": {
        "type": "object",
        "properties": {
          "domain": {
            "oneOf": [
              {
                "type": "string",
                "description": "설정 섹션/도메인 (필터 조건)"
              },
              {
                "type": "null"
              }
            ],
            "description": "설정 섹션/도메인 (필터 조건)"
          },
          "setting_key": {
            "oneOf": [
              {
                "type": "string",
                "description": "설정 키값(필터 조건, 부분 검색 허용)"
              },
              {
                "type": "null"
              }
            ],
            "description": "설정 키값(필터 조건, 부분 검색 허용)"
          },
          "setting_value": {
            "oneOf": [
              {
                "type": "string",
                "description": "설정값(검색용)"
              },
              {
                "type": "null"
              }
            ],
            "description": "설정값(검색용)"
          },
          "description": {
            "oneOf": [
              {
                "type": "string",
                "description": "설명/비고 (텍스트 검색 조건)"
              },
              {
                "type": "null"
              }
            ],
            "description": "설명/비고 (텍스트 검색 조건)"
          },
          "page": {
            "oneOf": [
              {
                "type": "integer",
                "format": "int32",
                "description": "페이지 번호"
              },
              {
                "type": "null"
              }
            ],
            "description": "페이지 번호"
          },
          "limit": {
            "oneOf": [
              {
                "type": "integer",
                "format": "int32",
                "description": "페이지 크기"
              },
              {
                "type": "null"
              }
            ],
            "description": "페이지 크기"
          },
          "sort": {
            "oneOf": [
              {
                "type": "string",
                "description": "정렬 기준(예: created_at DESC 등)"
              },
              {
                "type": "null"
              }
            ],
            "description": "정렬 기준(예: created_at DESC 등)"
          }
        },
        "description": "시스템 환경/설정 목록 내 페이징, 필터, 검색 요청 DTO\n\nvirtual_account_system_settings(DB) 테이블의 domain, key, value, desc 등 조건별 페이징 쿼리. 대시보드/설정 화면에 사용.",
        "required": []
      },
      "IPagevirtual_account_system_settings": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination",
            "description": "페이징 정보(전체 레코드 수, 현재페이지, 총 페이지수 등)"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/virtual_account_system_settings"
            },
            "description": "시스템 환경설정 엔티티 배열(virtual_account_system_settings 규격)"
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "virtual_account_system_settings 기준 목록(검색결과) 페이징 반환 객체\n\n설정 관리/조회등에서 사용. pagination과 개별 설정 배열로 구성."
      },
      "virtual_account_system_settings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "시스템 설정 항목의 고유 식별자입니다.\n\nPrisma 스키마의 'id' 필드. 시스템 내부에서 각 설정을 식별할 때 사용되며, 모든 시스템 트랜잭션 및 변경 이력에 대한 참조로 활용됩니다."
          },
          "domain": {
            "type": "string",
            "description": "이 설정이 속하는 도메인 및 하위 영역(예시: infra, notification, security 등)을 나타냅니다.\n\nPrisma 스키마의 'domain' 필드. 관리화면에서 구분/필터링에 사용되며, 시스템 모듈별 설정을 그룹핑하는 역할입니다."
          },
          "setting_key": {
            "type": "string",
            "description": "개별 설정 항목을 구분하는 유니크 키 입니다. (예: enable_erp_sync, default_expiry_days 등)\n\nPrisma 스키마의 'setting_key' 필드. 각 도메인 내에서 중복될 수 없고, 프로그램의 동적 조회/검색에 활용됩니다."
          },
          "setting_value": {
            "type": "string",
            "description": "설정의 실제 값(문자열, 숫자, JSON포맷 등).\n\nPrisma 스키마의 'setting_value' 필드. 값 형식은 설정의 목적에 따라 다르며, 어플리케이션 로직에서 동적으로 파싱되거나 적용됩니다."
          },
          "description": {
            "type": "string",
            "description": "설정의 용도와 세부 설명. 관리/운영자가 관리화면이나 감사로그에서 상세 내역을 확인할 때 참고합니다.\n\nPrisma 스키마의 'description' 필드에 기반."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "설정 레코드가 최초 생성된 일시(ISO8601 형식).\n\nPrisma 스키마의 'created_at' 필드에 상응합니다. 운영/감사 이력을 위한 메타데이터로 사용됩니다."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "설정 데이터가 마지막으로 변경된 일시(ISO8601).\n\nPrisma 스키마의 'updated_at' 필드. 변경 추적, 감사 기능, 운영 로그에 활용됩니다."
          }
        },
        "required": [
          "id",
          "domain",
          "setting_key",
          "setting_value",
          "description",
          "created_at",
          "updated_at"
        ],
        "description": "시스템 전체 설정 정보를 저장하는 객체입니다. 운영, 보안, 인프라 정책, 대시보드/알림 등 다양한 시스템 범주의 세부 옵션을 다룹니다.\n\nPrisma 'virtual_account_system_settings' 테이블을 그대로 반영하며, 각 설정 도메인/domain과 유니크 키/setting_key로 구분됩니다. 이 구조는 운영팀의 정책 관리, 기능 플래그 적용, 추후 감사 및 변경 이력 파악 등 다양한 실무에 사용됩니다."
      },
      "virtual_account_system_settings.ICreate": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "description": "새 설정이 속할 도메인 구분자(예: notification, infra, security 등).\n\nPrisma 'domain' 컬럼과 동일. 그룹 단위로 설정을 쉽게 필터링할 때 사용됩니다."
          },
          "setting_key": {
            "type": "string",
            "description": "본 도메인 내 유니크 키로, 해당 설정을 식별/검색하는 용도. 예: enable_erp_sync, excel_export_max_rows.\n\nPrisma 'setting_key'와 동일합니다."
          },
          "setting_value": {
            "type": "string",
            "description": "입력할 설정 값(문자, 숫자, JSON 등 문자열).\n\nPrisma 'setting_value'와 동일. 실제 값은 각 도메인/키별 유형이 상이할 수 있습니다."
          },
          "description": {
            "type": "string",
            "description": "설정의 설명 또는 목적을 명확히 나타냅니다.\n\nPrisma 'description'과 동일. 관리자가 변경/조회할 때 참고합니다."
          }
        },
        "required": [
          "domain",
          "setting_key",
          "setting_value",
          "description"
        ],
        "description": "신규 시스템 설정값 등록 시 사용하는 생성 요청 바디 유형입니다.\n\nPrisma 'virtual_account_system_settings' 스키마 구조와 완전히 일치하며, 도메인-키-값-설명 필드만 명시하면 됩니다. 주로 운영자/관리자에 의해 시스템 설정 추가 시 활용됩니다."
      },
      "virtual_account_system_settings.IUpdate": {
        "type": "object",
        "properties": {
          "setting_value": {
            "type": "string",
            "description": "수정 대상 설정의 새로운 값(문자열). 값 포맷은 키/도메인에 따라 다를 수 있습니다.\n\nPrisma 스키마의 'setting_value' 필드. 운영 변경이력 및 설정 갱신 용도."
          },
          "description": {
            "type": "string",
            "description": "설명 텍스트의 변경, 또는 부연 설명 추가 시 사용.\n\nPrisma 'description'."
          }
        },
        "required": [
          "setting_value"
        ],
        "description": "시스템 설정 레코드의 값과 설명을 수정할 때 사용하는 타입입니다.\n\n변경 가능한 필드는 setting_value(필수), description(선택)만 허용되며, 나머지는 불변입니다. 이 타입 구조는 운영 환경에서 실제 설정 변경시, 관리자 대시보드에서 사용됩니다."
      },
      "IVirtualAccountSystemSettings.IDeleteResult": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "삭제 결과나 상태를 메시지로 반환합니다.\n\n삭제 성공 시 'success', 실패/존재하지 않을 경우 관련 에러 메시지 표현."
          }
        },
        "required": [
          "result"
        ],
        "description": "시스템 설정 삭제 API의 결과 반환 객체입니다.\n\nTry-catch 및 에러 핸들링까지 포괄하며, 삭제 성공/실패 케이스에 대한 상태 메시지를 제공합니다."
      },
      "IVirtualAccountOAuthClients.IRequest": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "OAuth2 client_id로 검색/필터링할 값입니다.\n\nPrisma 'client_id' 필드와 일치합니다."
          },
          "provider_name": {
            "type": "string",
            "description": "OAuth 연동시 사용하는 공급자명 기준 검색 필드(예: duzon, toss, cafe24 등).\n\nPrisma의 'provider_name' 필드와 일치."
          },
          "integration_type": {
            "type": "string",
            "description": "연동 대상 유형(erp, pg, mall, bank 등) 기반 필터링.\n\nPrisma 'integration_type' 필드와 동일."
          },
          "enabled": {
            "type": "boolean",
            "description": "등록 상태가 enabled(활성)이냐를 기준으로 검색할 때 사용.\n\nPrisma 'enabled' 컬럼과 일치."
          },
          "page": {
            "type": "integer",
            "format": "uint32",
            "description": "페이지 번호 (기본값: 1)"
          },
          "limit": {
            "type": "integer",
            "format": "uint32",
            "description": "페이지당 데이터 수 (기본값: 100)"
          }
        },
        "description": "OAuth Client 목록 검색/조회용 요청 객체입니다. client_id, provider_name, 연동타입, 활성상태 등 다양한 기준으로 필터링이 가능합니다.\n\nPrisma 'virtual_account_oauth_clients' 테이블의 서브셋을 필터/페이징 요청할 수 있도록 설계된 DTO입니다.",
        "required": []
      },
      "IPageIVirtualAccountOAuthClients": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountOAuthClients"
            },
            "description": "OAuth Client에 대한 목록 배열로, 각 아이템은 상세 타입을 따릅니다."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "OAuth Client 목록 페이징 결과(응답) 구조체입니다.\n\npagination에는 페이지 번호·총 개수·한 페이지당 레코드 수가 담기고,\ndata에는 OAuth client 메타 정보 배열이 포함됩니다."
      },
      "IVirtualAccountOAuthClients": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "OAuth2 client registry의 고유 식별값입니다.\n\nPrisma의 'id' 컬럼, 각 client 연동에 대한 고유 식별자로 사용합니다."
          },
          "client_id": {
            "type": "string",
            "description": "OAuth2 연동의 클라이언트 ID(외부 시스템에 제공되는 식별자).\n\nPrisma 'client_id' 필드. DB의 유니크 키."
          },
          "integration_type": {
            "type": "string",
            "description": "OAuth 클라이언트가 소속된 연동 유형(erp, mall, bank, pg 등).\n\nPrisma 'integration_type' 컬럼."
          },
          "provider_name": {
            "type": "string",
            "description": "OAuth 클라이언트 연동 대상 공급자명(duzon, toss, cafe24 등).\n\nPrisma 'provider_name' 필드."
          },
          "enabled": {
            "type": "boolean",
            "description": "현 시점에서 유효하게 등록/활성화되어 있는지 여부.\n\nPrisma 'enabled' 컬럼. 관리자가 실시간 토글 가능."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "OAuth 클라이언트 등록 일시(생성일).\n\nPrisma 'created_at' 컬럼."
          }
        },
        "required": [
          "id",
          "client_id",
          "integration_type",
          "provider_name",
          "enabled",
          "created_at"
        ],
        "description": "OAuth2 Client Registry의 상세 메타정보 객체입니다. 연동 외부 시스템 인증 관련 관리 및 점검용으로 활용되며, 각 client_id/공급자별 활성화 상태, 등록 일시, 연동 유형 등 필드로 구성됩니다.\n\nPrisma 'virtual_account_oauth_clients' 테이블 구조에 1:1 매핑됩니다."
      },
      "IVirtualAccountOAuthClients.ICreate": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "신규 등록할 OAuth2 client_id\n\nPrisma의 client_id(유니크)."
          },
          "integration_type": {
            "type": "string",
            "description": "연동 유형(erp, mall, bank, pg 등).\n\nPrisma 'integration_type'."
          },
          "provider_name": {
            "type": "string",
            "description": "제공자명(duzon, toss, cafe24, kg 등).\n\nPrisma 'provider_name'."
          },
          "enabled": {
            "type": "boolean",
            "description": "등록 활성화 상태 여부.\n\nPrisma 'enabled'."
          }
        },
        "required": [
          "client_id",
          "integration_type",
          "provider_name"
        ],
        "description": "OAuth2 client 레지스트리 신규 생성 요청 타입입니다. 연동 유형, 공급자, client_id 및 활성 여부 필드만 입력하면 됩니다.\n\nPrisma 구조와 1:1 매칭."
      },
      "IVirtualAccountOAuthClients.IUpdate": {
        "type": "object",
        "properties": {
          "integration_type": {
            "type": "string",
            "description": "연동 유형 정보 수정."
          },
          "provider_name": {
            "type": "string",
            "description": "공급자명 정보 수정."
          },
          "enabled": {
            "type": "boolean",
            "description": "활성화 상태(리스트 화면에서 토글 가능)."
          }
        },
        "description": "OAuth2 client registry의 메타 정보 수정용 타입입니다. 변경 가능한 필드는 integration_type, provider_name, enabled만 포함합니다.\n\nclient_id(식별자)는 불변입니다.",
        "required": []
      },
      "IVirtualAccountOAuthClients.IDeleteResult": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "삭제 결과(성공, 존재하지 않음 등)."
          }
        },
        "required": [
          "result"
        ],
        "description": "OAuth2 client registry 삭제 API 응답 결과 객체입니다. 상태 메시지로 처리 성공/실패 반환."
      },
      "IVirtualAccountHmacKeys.IRequest": {
        "type": "object",
        "properties": {
          "external_system": {
            "type": "string",
            "description": "HMAC 키 적용 대상을 외부시스템명(duzon, cafe24, toss 등)으로 필터링.\n\nPrisma 'external_system' 컬럼."
          },
          "key_label": {
            "type": "string",
            "description": "HMAC 키 라벨(별칭)로 검색/조회.\n\nPrisma 'key_label' 컬럼 필터."
          },
          "enabled": {
            "type": "boolean",
            "description": "활성화 여부 기준 조회.\n\nPrisma 'enabled' 컬럼."
          },
          "page": {
            "type": "integer",
            "format": "uint32",
            "description": "페이지 번호 (기본값: 1)"
          },
          "limit": {
            "type": "integer",
            "format": "uint32",
            "description": "페이지당 데이터 수 (기본값: 100)"
          }
        },
        "description": "HMAC 키 메타데이터 목록을 검색/조회할 때 쓰는 요청 타입입니다. 외부시스템명, 라벨, 상태 기반 필터 및 페이징 파라미터를 지원합니다.",
        "required": []
      },
      "IPageIVirtualAccountHmacKeys": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IVirtualAccountHmacKeys"
            },
            "description": "HMAC 키 메타 정보 객체 배열입니다."
          }
        },
        "required": [
          "pagination",
          "data"
        ],
        "description": "HMAC Key 메타데이터 페이징 응답 타입으로, pagination(페이지 정보)와 data(배열)를 함께 반환합니다."
      },
      "IVirtualAccountHmacKeys": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "이 필드는 각 HMAC 키 레코드를 고유하게 식별합니다. Prisma 스키마의 'id' 컬럼에 해당하며, 시스템 내 모든 API 인증용 HMAC 키의 메타 정보 관리 및 레퍼런싱에 사용됩니다.\n\n관리, 감사, 키 회전, 비활성화 등 다양한 보안 이벤트에서 반드시 레퍼런스하는 핵심 식별자입니다."
          },
          "external_system": {
            "type": "string",
            "description": "이 필드는 ERP/PG/은행/쇼핑몰 등 외부 연동 대상 시스템명을 저장합니다. (예: 'duzon', 'cafe24', 'toss')\n\nHMAC 키 관리 및 레지스트리에서 어떤 외부 시스템의 API 연동에 사용되는지 명확하게 표시, 감사 및 키 관리 정책용으로 핵심 사용됩니다."
          },
          "key_label": {
            "type": "string",
            "description": "키의 관리용 레이블(닉네임)입니다. 실제 비밀값/시크릿 처리 없이, 관리 UI 및 감사 추적에 사용될 수 있게끔 별도 텍스트 필드로 저장합니다.\n\n키 이름 혼동방지와 보안관리 편의성 목적. 동일 외부시스템 내에서도 키 구분과 갱신, 롤오버 절차에서 중요한 역할을 합니다."
          },
          "enabled": {
            "type": "boolean",
            "description": "HMAC 키의 활성/비활성(폐기) 상태입니다. Prisma 스키마 'enabled' 컬럼과 1:1로 매핑되며, 보안 정책상 비활성화된 API 키는 어떤 외부 연동에도 사용되지 않도록 시스템적으로 차단합니다.\n\n키 플래그 변경 및 폐기, 만료 시에도 사용되어, 실시간 보안 컴플라이언스 준수에 중추적 역할을 합니다."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "해당 HMAC 키 메타데이터가 최초 생성된 시각을 저장합니다. 시스템 운영/감사/보안정책상 모든 키 발급 및 라이프사이클 관리에서 시점별 움직임을 추적합니다."
          },
          "last_rotated_at": {
            "type": "string",
            "format": "date-time",
            "description": "해당 HMAC 키가 마지막으로 교체(로테이션)된 시간입니다. 보안 정책 준수를 위한 키 수명 및 교체 실적 검증, 주기적 감사, 만료 정책에 필수로 활용됩니다."
          },
          "expires_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "해당 키의 만료 예정일입니다. 만료 정책 적용이 필요한 경우만 입력되며, null이면 무기한 유효로 간주합니다.\n\n만기 후 자동 폐기, 갱신 알림 트리거 등 보안 운용에 중요한 시점 기준으로 사용됩니다."
              },
              {
                "type": "null"
              }
            ],
            "description": "해당 키의 만료 예정일입니다. 만료 정책 적용이 필요한 경우만 입력되며, null이면 무기한 유효로 간주합니다.\n\n만기 후 자동 폐기, 갱신 알림 트리거 등 보안 운용에 중요한 시점 기준으로 사용됩니다."
          }
        },
        "required": [
          "id",
          "external_system",
          "key_label",
          "enabled",
          "created_at",
          "last_rotated_at"
        ],
        "description": "HMAC API 키(암호화 인증서) 메타데이터 레코드 타입입니다. ERP, 쇼핑몰, PG, 은행 등 외부 시스템과의 HMAC 인증 기반 API 연동 시, 해당 키의 구분, 활성화/비활성화, 만료, 교체 이력 등을 관리/운영하기 위한 목적으로 사용되는 대표 엔터티입니다.\n\n프리즘 스키마의 virtual_account_hmac_keys 테이블 구현을 충실하게 반영하며, 키 관점에서의 전사 보안 정책 준수, 키 수명 관리, 이상행위 탐지, 역할별 접근제어, 감사로그 등 다양한 업무 흐름의 핵심 기초 데이터로 활용됩니다.\n\n각 컬럼의 정의, 목적, 비즈니스 규칙은 스키마 원문(및 '보안 정책' 요구사항) 주석에 맞게 상세 기술되어, 시스템 유지보수자와 보안 오피서 모두 정확하게 이해할 수 있도록 다층 설명을 추가했습니다."
      },
      "IVirtualAccountHmacKeys.ICreate": {
        "type": "object",
        "properties": {
          "external_system": {
            "type": "string",
            "description": "ERP/PG/은행/쇼핑몰 등 외부 연결의 시스템명입니다. 키가 어떤 개발/운영 시스템에 할당되어 쓰일지 명확하게 지정합니다."
          },
          "key_label": {
            "type": "string",
            "description": "해당 키의 내부 식별, 감사, 관리 편의를 위한 사용 설명 또는 레이블입니다. 동명이 존재하지 않도록 유니크하게 관리합니다."
          },
          "enabled": {
            "type": "boolean",
            "description": "생성 시 활성/비활성 여부 지정. 보안 정책상 비활성 등록 상황도 가능(테스트 키 등)."
          },
          "expires_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "옵션. 만료 예정일이 있는 경우 지정합니다. 미지정 시 무기한(Null)."
              },
              {
                "type": "null"
              }
            ],
            "description": "옵션. 만료 예정일이 있는 경우 지정합니다. 미지정 시 무기한(Null)."
          }
        },
        "required": [
          "external_system",
          "key_label",
          "enabled"
        ],
        "description": "HMAC API 키 메타데이터 신규 생성 요청 타입입니다. 외부연동용 HMAC 키 신규 발급시 필수로 입력해야 하는 식별자, 레이블, 상태, 만료 기한 등을 담고 있습니다.\n\nPrisma 스키마의 입력 요구조건 및 시스템 정책을 완비하게 반영합니다."
      },
      "IVirtualAccountHmacKeys.IUpdate": {
        "type": "object",
        "properties": {
          "key_label": {
            "type": "string",
            "description": "관리자/감사 목적 또는 UI상 키명/설명 레이블을 수정할 수 있습니다."
          },
          "enabled": {
            "type": "boolean",
            "description": "활성/비활성 플래그를 변경합니다. 키를 폐기/사용정지할 때 false로 변경."
          },
          "expires_at": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "description": "본 키의 만기일을 갱신 or Null로 해제 가능합니다."
              },
              {
                "type": "null"
              }
            ],
            "description": "본 키의 만기일을 갱신 or Null로 해제 가능합니다."
          },
          "last_rotated_at": {
            "type": "string",
            "format": "date-time",
            "description": "키를 갱신 또는 교체한 시각 업데이트. 정책상 자동 변경될 수 있음."
          }
        },
        "description": "HMAC API 키 메타데이터 수정(패치) 요청 타입입니다. 키 레이블, 만료일, 활성/비활성, 마지막 갱신일 등 개별 컬럼에 대해 선택적으로 갱신할 때 사용합니다.\n\n업데이트 가능한 필드를 분명하게 구분하였고, 반드시 변경이력 추적 및 보안감사 로깅에 활용됩니다.\n\nPrisma 및 업무규정에 따라, 기본 식별자(id)는 path parameter로 처리하며, 본 바디에서는 불변 값을 포함하지 않습니다.",
        "required": []
      },
      "IVirtualAccountHmacKeys.IDeleteResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "삭제 성공 여부를 반영합니다. 만약 삭제가 정상 완료되었으면 true, 기타 오류/제약조건(참조무결성 등) 위반시 false."
          },
          "deleted_id": {
            "type": "string",
            "format": "uuid",
            "description": "삭제된 HMAC 키 레코드의 고유 식별자(UUID)."
          },
          "extra_message": {
            "type": "string",
            "description": "삭제 결과에 대한 추가 메시지(오류, 불가사유 등). 일반적으로 삭제 완료 시는 빈 값이나, 실패/불가/오류시 상세 메시지를 기술합니다."
          }
        },
        "required": [
          "success",
          "deleted_id"
        ],
        "description": "HMAC 키 삭제 명령의 결과 반환 타입입니다.\n\n삭제가 성공/실패 여부, 실제 삭제된(혹은 삭제 불가/참조 중) 레코드의 식별자, 추가 오류/사유 메시지 등을 제공합니다."
      },
      "IVirtualAccountMaterializedStats.IRequest": {
        "type": "object",
        "properties": {
          "stat_key": {
            "type": "string",
            "description": "필터 조건 사용시, 특정 대시보드/리포트 지표의 구분자 키(예:'active_accounts', 'fail_deposit_count' 등)."
          },
          "as_of_from": {
            "type": "string",
            "format": "date-time",
            "description": "조회 시작 기준(포함)의 스냅샷 시점. ISO8601, UTC."
          },
          "as_of_to": {
            "type": "string",
            "format": "date-time",
            "description": "조회 종료 기준(포함)의 스냅샷 시점. ISO8601, UTC."
          },
          "page": {
            "type": "integer",
            "description": "페이지 번호. 1부터 시작."
          },
          "limit": {
            "type": "integer",
            "description": "페이지 당 개수."
          },
          "sort": {
            "type": "string",
            "description": "정렬 기준. ex: 'as_of desc', 'stat_key asc' 등."
          }
        },
        "description": "대시보드/리포트용 집계 지표(virtual_account_materialized_stats) 리스트 조회 조건을 기술하는 요청 바디 타입입니다.\n\n주요 검색조건(지표키, 기간범위, 페이지네이션, 정렬정보 등)을 자유롭게 조합 가능하게 정의했으며, 각 필드는 옵션입니다.\n\n통계 수집 및 대시보드 통합 쿼리, ETL 집계 후 리포트용으로 사용됩니다.",
        "required": []
      },
      "virtual_account_materialized_stats": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "각 대시보드/리포트용 집계 스냅샷의 유일 식별자."
          },
          "stat_key": {
            "type": "string",
            "description": "수집된 지표의 논리적 키(예: 'active_accounts', 'fail_deposit_count' 등)."
          },
          "stat_value": {
            "type": "string",
            "description": "지표의 스냅샷 값(문자열). 다양한 유형 집계값 저장 가능."
          },
          "as_of": {
            "type": "string",
            "format": "date-time",
            "description": "해당 값 스냅샷의 생성 시각. ETL/BATCH로 수집된 기준시각."
          }
        },
        "required": [
          "id",
          "stat_key",
          "stat_value",
          "as_of"
        ],
        "description": "대시보드/리포트 지표의 스냅샷 레코드 엔터티입니다. virtual_account_materialized_stats 테이블의 1개 row를 그대로 구조화해 정의하였으며, 관리자 대시보드, 보고서, 통계분석, 성능 튜닝용 리포팅에 주로 사용됩니다.\n\n각 프로퍼티는 스키마 기술 주석을 참고하여 배열되었고, 데이터 웨어하우스/ETL/정기수집 등 다양한 대용량 대시보드 집계 업무용으로 활용됩니다."
      },
      "virtual_account_materialized_stats.ICreate": {
        "type": "object",
        "properties": {
          "stat_key": {
            "type": "string",
            "description": "신규 집계 지표의 논리키. unique하지 않을 수 있으나, as_of와 조합하여 식별 목적."
          },
          "stat_value": {
            "type": "string",
            "description": "수집된 대시보드/분석/성능 지표의 값. 자유형 문자열로 보관(예: 집계수, 평균, % 등)."
          },
          "as_of": {
            "type": "string",
            "format": "date-time",
            "description": "본 값이 수집/스냅샷된 시점을 기록합니다. ETL/BATCH 시각 등 기준."
          }
        },
        "required": [
          "stat_key",
          "stat_value",
          "as_of"
        ],
        "description": "신규 대시보드/리포트용 집계값 스냅샷 레코드 생성 요청 타입입니다. 관리자 대시보드 ETL, 자동리포트, 매트릭스 통계 신규 집계 수집 등 모든 신규 스냅샷 생성에 공용으로 사용합니다."
      },
      "virtual_account_materialized_stats.IUpdate": {
        "type": "object",
        "properties": {
          "stat_key": {
            "type": "string",
            "description": "수정 대상 지표의 논리키."
          },
          "stat_value": {
            "type": "string",
            "description": "수정/갱신할 집계값. 문자열."
          },
          "as_of": {
            "type": "string",
            "format": "date-time",
            "description": "수정할 스냅샷 시점."
          }
        },
        "description": "대시보드용 집계값 스냅샷 레코드(virtual_account_materialized_stats) 업데이트 요청입니다. 지표키/값/스냅샷시점을 갱신하거나정정할 때 사용합니다.",
        "required": []
      },
      "virtual_account_materialized_stats.IDeleteResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "삭제가 정상 수행되었는지 여부. 성공시 true, 실패/불가시 false."
          },
          "deleted_id": {
            "type": "string",
            "format": "uuid",
            "description": "삭제된 집계 레코드의 식별자."
          },
          "extra_message": {
            "type": "string",
            "description": "삭제 사유, 불가 사유, 시스템 오류 등 상세 메시지."
          }
        },
        "required": [
          "success",
          "deleted_id"
        ],
        "description": "대시보드 집계값 스냅샷 삭제 결과 리스폰스 타입입니다. 관리 UI, 자동 클린업, 감사 추적 등에서 상태 확인 목적으로 사용합니다."
      },
      "IPageIVirtualAccountMaterializedStats": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/IPage.IPagination"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/virtual_account_materialized_stats"
            },
            "description": "현재 페이지를 구성하는 대시보드 집계 스냅샷 엔터티 배열."
          }
        },
        "description": "대시보드 집계 지표(virtual_account_materialized_stats) 리스트의 페이지네이션 래퍼 타입입니다. 표준 IPage 구조를 준수하며, 대량 데이터 처리/다운로드/리포트/통계 관리에 효율적으로 사용 가능합니다.",
        "required": []
      }
    }
  }
}