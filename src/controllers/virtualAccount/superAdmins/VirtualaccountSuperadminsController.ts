import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";

import { IVirtualAccountSuperAdmin } from "../../../api/structures/IVirtualAccountSuperAdmin";
import { IPageIVirtualAccountSuperAdmin } from "../../../api/structures/IPageIVirtualAccountSuperAdmin";
import { IOperationResult } from "../../../api/structures/IOperationResult";

@Controller("/virtualAccount/superAdmins")
export class VirtualaccountSuperadminsController {
  /**
   * Create a new super admin account (virtual_account_super_admins table).
   *
   * Creates a new super administrator record in the virtual account platform.
   * This operation is only accessible to existing super admins due to the
   * critical privileges conferred. The API expects a JSON object with fields
   * matching the 'virtual_account_super_admins' schema: a unique username and
   * a securely hashed password. Upon successful creation, audit logs are made
   * for policy compliance and traceability. The endpoint returns the created
   * super admin object, excluding sensitive information such as the raw
   * password. If a duplicate username is provided, an error is raised. This
   * operation underpins platform-level setup and on-boarding process for
   * top-level governance.
   *
   * @param body Fields required to create a new super admin (username,
   *   password).
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Post()
  public async post(
    @TypedBody()
    body: IVirtualAccountSuperAdmin.ICreate,
  ): Promise<IVirtualAccountSuperAdmin> {
    body;
    return typia.random<IVirtualAccountSuperAdmin>();
  }

  /**
   * List all super admin accounts with search and pagination
   * (virtual_account_super_admins table).
   *
   * Returns a paginated and searchable list of super admin accounts,
   * referencing the 'virtual_account_super_admins' table. Filters may include
   * username and created_at date range. Used for compliance dashboards and
   * account management by highest-privilege users. Access is strictly limited
   * by security policies. The result supports pagination for large
   * installations.
   *
   * No sensitive credential data is included in the response. All accesses
   * are logged and minimally required for day-to-day operation.
   *
   * @param body Search and pagination criteria for super admin list.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Patch()
  public async patch(
    @TypedBody()
    body: IVirtualAccountSuperAdmin.IRequest,
  ): Promise<IPageIVirtualAccountSuperAdmin> {
    body;
    return typia.random<IPageIVirtualAccountSuperAdmin>();
  }

  /**
   * Fetch a specific super administrator's details
   * (virtual_account_super_admins table).
   *
   * Returns the full, non-sensitive detail for a specific super admin
   * account. Used in role management and security audit flows. Always
   * RBAC/privilege checked, and all reads are audit-logged.
   *
   * Error handling returns a clear, non-sensitive message for unauthorized or
   * non-existent super admin IDs. Associated with super admin management
   * workflows for critical access users only.
   *
   * @param id Super admin ID to look up.
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Get(":id")
  public async getById(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IVirtualAccountSuperAdmin> {
    id;
    return typia.random<IVirtualAccountSuperAdmin>();
  }

  /**
   * Update a super admin account (virtual_account_super_admins table).
   *
   * Updates the properties of a designated super admin, identified by their
   * unique ID. Only authenticated and authorized super admins can perform
   * this action for critical role and audit reasons. The API body mirrors
   * updatable fields from the Prisma schema (currently username and
   * password_hash). The operation logs all changes for traceability and
   * returns the updated super admin, omitting confidential details. Attempts
   * to update non-existent or unauthorized resources produce an error. This
   * enables controlled account updates as outlined in security requirements.
   *
   * @param id Target super admin's ID
   * @param body Fields to update for super admin (username, password)
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Put(":id")
  public async putById(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IVirtualAccountSuperAdmin.IUpdate,
  ): Promise<IVirtualAccountSuperAdmin> {
    id;
    body;
    return typia.random<IVirtualAccountSuperAdmin>();
  }

  /**
   * Delete a super admin account (virtual_account_super_admins table).
   *
   * Permanently removes a super admin by ID. Security policy requires dual
   * authentication and logging of all such actions, as deleting top-level
   * administrators impacts platform governance and policy. The account is
   * deleted only if the ID exists and policy checks pass; otherwise, returns
   * error per API spec. This operation is crucial for managing root-level
   * system access.
   *
   * @param id Target super admin's ID
   * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
   */
  @TypedRoute.Delete(":id")
  public async eraseById(
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IOperationResult> {
    id;
    return typia.random<IOperationResult>();
  }
}
