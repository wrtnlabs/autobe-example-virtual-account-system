import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IVirtualAccountRolePermission } from "../../../structures/IVirtualAccountRolePermission";
import { IPageIVirtualAccountRolePermission } from "../../../structures/IPageIVirtualAccountRolePermission";

/**
 * Creates a new role-permission assignment entry in
 * virtual_account_role_permissions.
 *
 * This endpoint creates and inserts a new role-permission assignment into the
 * virtual_account_role_permissions table as per the Prisma schema
 * documentation. This mapping enables the specified role to get the
 * corresponding permission, supporting fine-grained security management.
 *
 * Payload includes role_id and permission_id, which must reference valid
 * existing roles and permissions. Creation fails if the mapping already exists
 * (enforced at DB via unique constraint), or if either role/permission does not
 * exist. All creation attempts, successful or failed, are audit-logged for
 * compliance with RBAC management requirements.
 *
 * Validation: request is rejected with 422 if IDs are missing/invalid. DB
 * errors (constraint violations) are reported with structured error responses.
 * Only admins/superadmins may execute this operation.
 *
 * Related endpoints: PATCH (list/search), PUT (edit), DELETE (remove)
 * role-permission assignments.
 *
 * @param props.body Information required to create a role-permission mapping.
 * @path /virtualAccount/rolePermissions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Information required to create a role-permission mapping. */
    body: IVirtualAccountRolePermission.ICreate;
  };
  export type Body = IVirtualAccountRolePermission.ICreate;
  export type Response = IVirtualAccountRolePermission;

  export const METADATA = {
    method: "POST",
    path: "/virtualAccount/rolePermissions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/rolePermissions";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountRolePermission =>
    typia.random<IVirtualAccountRolePermission>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieves a paginated list of role-permission assignments for
 * virtual_account_role_permissions.
 *
 * This operation retrieves a paginated list of role-permission assignments from
 * the virtual_account_role_permissions table. The request body may contain
 * complex search, paging, and filter criteria, such as role, permission,
 * assignment date, etc.
 *
 * The role-permission model implements the M:N mapping between roles and
 * permissions for RBAC enforcement, ensuring normalized security controls at
 * the logical DB layer. The description references the Prisma schema comment
 * for virtual_account_role_permissions: one row per role-permission assignment,
 * with uniqueness enforced at the DB level.
 *
 * Security: This endpoint is intended for admin or super admin use, enforced by
 * RBAC middleware. The results are never cached and may include sensitive
 * security configuration info, so access is tightly controlled.
 *
 * Validation and errors: Invalid search requests return 422. Users without RBAC
 * VIEW/EDIT privileges will get 403. Response includes a paginated list of
 * summary role-permission assignments.
 *
 * @param props.body Optional search, filter, and paging criteria for
 *   role-permission assignments
 * @path /virtualAccount/rolePermissions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Optional search, filter, and paging criteria for role-permission
     * assignments
     */
    body: IVirtualAccountRolePermission.IRequest;
  };
  export type Body = IVirtualAccountRolePermission.IRequest;
  export type Response = IPageIVirtualAccountRolePermission;

  export const METADATA = {
    method: "PATCH",
    path: "/virtualAccount/rolePermissions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/rolePermissions";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIVirtualAccountRolePermission =>
    typia.random<IPageIVirtualAccountRolePermission>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieves details of a single role-permission assignment by ID from
 * virtual_account_role_permissions.
 *
 * This operation fetches complete details of a specific role-permission
 * assignment by its unique ID from the virtual_account_role_permissions table,
 * as referenced in the Prisma schema doc. Role-permission assignments form the
 * M:N join between roles and permissions in the RBAC model, crucial for
 * fine-grained security.
 *
 * The GET returns all assignment metadata: role, permission, assigned
 * timestamps, and any linkage-specific data. The operation enforces access
 * control policies (only admins/superadmins) and is audit-logged. It must
 * validate the ID and return 404 if not found, or 403 if unauthorized. This
 * endpoint is related to PATCH /virtualAccount/rolePermissions (list), POST
 * (create), PUT (update), and DELETE (remove).
 *
 * Validation: Must check the existence of the ID and relationship constraints.
 * Errors are returned as structured messages.
 *
 * @param props.id Unique identifier of the role-permission assignment to fetch
 * @path /virtualAccount/rolePermissions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier of the role-permission assignment to fetch */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountRolePermission;

  export const METADATA = {
    method: "GET",
    path: "/virtualAccount/rolePermissions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/rolePermissions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountRolePermission =>
    typia.random<IVirtualAccountRolePermission>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Updates an existing role-permission mapping in
 * virtual_account_role_permissions by ID.
 *
 * This endpoint updates an existing role-permission mapping by ID in the
 * virtual_account_role_permissions table. Only certain fields may be updatable,
 * depending on business logic (for example: audit notes, custom metadata, but
 * not role_id/permission_id if uniqueness constraints would be violated).
 *
 * The operation first validates the ID and fetches the current row, then
 * applies requested changes from the request body. If the row does not exist,
 * 404 is returned; if RBAC prevents the change, 403.
 *
 * All update actions and their results are audit-logged. This endpoint requires
 * admin or superadmin privileges per RBAC enforced at the API level. Related
 * endpoints include PATCH (list), GET (detail), POST (create), and DELETE
 * (remove) role-permission assignments.
 *
 * @param props.id Role-permission mapping unique identifier to update.
 * @param props.body Fields to update for the role-permission mapping.
 * @path /virtualAccount/rolePermissions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Role-permission mapping unique identifier to update. */
    id: string & tags.Format<"uuid">;

    /** Fields to update for the role-permission mapping. */
    body: IVirtualAccountRolePermission.IUpdate;
  };
  export type Body = IVirtualAccountRolePermission.IUpdate;
  export type Response = IVirtualAccountRolePermission;

  export const METADATA = {
    method: "PUT",
    path: "/virtualAccount/rolePermissions/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/virtualAccount/rolePermissions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountRolePermission =>
    typia.random<IVirtualAccountRolePermission>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Deletes a role-permission assignment entry in
 * virtual_account_role_permissions by ID.
 *
 * This endpoint deletes an individual role-permission mapping from
 * virtual_account_role_permissions using the unique ID. The operation fulfills
 * requirements for RBAC assignment removal, supporting security and
 * compliance.
 *
 * The operation is only permitted for authorized admin/superadmin users; all
 * delete attempts are audit-logged with actor, target, and outcome per security
 * and audit requirements. Deletion is subject to referential integrity checks
 * (e.g., cannot delete if mapping is required elsewhere, such as for mandatory
 * default role-permissions).
 *
 * Returns 204 on success, 404 if mapping not found, or an error message on
 * denial for RBAC/constraints. Related operations: PATCH/GET/POST/PUT
 * role-permission endpoints.
 *
 * @param props.id Role-permission mapping unique identifier to delete.
 * @path /virtualAccount/rolePermissions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Role-permission mapping unique identifier to delete. */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/virtualAccount/rolePermissions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/rolePermissions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
