import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IVirtualAccountExternalIntegrationLogs } from "../../../structures/IVirtualAccountExternalIntegrationLogs";
import { IPageIVirtualAccountExternalIntegrationLogs } from "../../../structures/IPageIVirtualAccountExternalIntegrationLogs";

/**
 * Create a new external integration event log
 * (virtual_account_external_integration_logs table).
 *
 * This endpoint lets automated services, worker jobs, or authorized admins log
 * new integration events as they occur—such as a sync to ERP, a webhook to
 * Mall/PG, or a push to an external bank API. Each log records the target
 * system, event type, request/response bodies, result (success/failure), error,
 * and timestamps. Only meta (no secrets) are stored in request/response.
 *
 * Security: Auth is enforced; only system/automation users or properly
 * privileged admins can insert logs. All business validations check referenced
 * system's existence (by UUID), controlled event_type, and correct JSON
 * formatting/limits. Operation is fully auditable and referenced by
 * troubleshooting tools. Duplicates or inconsistent/incomplete postings result
 * in HTTP errors.
 *
 * Returns newly created log row. Errors thrown for invalid system, payload,
 * privilege, or unexpected faults (400/401/403/500).
 *
 * @param props.body Data describing the new integration event log.
 * @path /virtualAccount/externalIntegrationLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Data describing the new integration event log. */
    body: IVirtualAccountExternalIntegrationLogs.ICreate;
  };
  export type Body = IVirtualAccountExternalIntegrationLogs.ICreate;
  export type Response = IVirtualAccountExternalIntegrationLogs;

  export const METADATA = {
    method: "POST",
    path: "/virtualAccount/externalIntegrationLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/externalIntegrationLogs";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountExternalIntegrationLogs =>
    typia.random<IVirtualAccountExternalIntegrationLogs>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List or search external integration logs with filters/pagination
 * (virtual_account_external_integration_logs).
 *
 * This endpoint lets administrators retrieve a filtered and paginated list of
 * external integration log events—each entry records API call events or data
 * exchanges with external systems. The operation supports search by
 * external_system_id, event_type, success/fail, and date range, with pagination
 * (page/size) and sorted descent by time.
 *
 * Uses request body for complex search conditions, as filtering involves
 * non-trivial logic. Returned data includes integration event details
 * (event_type, request and response payload, success flag, error, and
 * timestamp) but omits sensitive data/secrets. Useful for troubleshooting,
 * system audit, and compliance analysis. Security is based on RBAC roles
 * defined in the requirements; only admins with appropriate privileges can view
 * logs.
 *
 * Errors are returned for failed permission (403), invalid filters (400), or
 * server/database issues (500).
 *
 * @param props.body Criteria for searching/listing integration logs.
 * @path /virtualAccount/externalIntegrationLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Criteria for searching/listing integration logs. */
    body: IVirtualAccountExternalIntegrationLogs.IRequest;
  };
  export type Body = IVirtualAccountExternalIntegrationLogs.IRequest;
  export type Response = IPageIVirtualAccountExternalIntegrationLogs;

  export const METADATA = {
    method: "PATCH",
    path: "/virtualAccount/externalIntegrationLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/externalIntegrationLogs";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIVirtualAccountExternalIntegrationLogs =>
    typia.random<IPageIVirtualAccountExternalIntegrationLogs>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get details of a single integration event log by ID
 * (virtual_account_external_integration_logs table).
 *
 * This API retrieves one detailed record for a specific external integration
 * event log, identified by ID. Typical data returned includes which external
 * system, the event type (SYNC, PUSH, FAIL, etc), request data, response, error
 * status/message, and timestamp. Crucial for debugging issues with
 * ERP/Mall/Bank/PG integrations, and for compliance review of event outcomes.
 *
 * Security: Only privileged admin/super_admin actors are authorized for detail
 * access. Direct links to referenced external system are included if present.
 * Permissions, RBAC, and masking/sanitization of potentially sensitive fields
 * are enforced as per requirements. If the log entry does not exist, a 404
 * error occurs; if access is denied, a 403 error. Audit log is written for
 * access.
 *
 * Returns the normalized log entry as per the Prisma schema (no
 * computed/denormalized aggregates).
 *
 * @param props.id UUID of the integration log event to retrieve.
 * @path /virtualAccount/externalIntegrationLogs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** UUID of the integration log event to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountExternalIntegrationLogs;

  export const METADATA = {
    method: "GET",
    path: "/virtualAccount/externalIntegrationLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/externalIntegrationLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountExternalIntegrationLogs =>
    typia.random<IVirtualAccountExternalIntegrationLogs>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update an external integration log event
 * (virtual_account_external_integration_logs table).
 *
 * This operation lets admin, automation jobs, or log processors update a
 * previously created external integration log event, usually to record actual
 * outcome (marking retried, resolved, error-cleared, etc) or to patch incorrect
 * data. Only non-key fields (result, error, timestamps) can be updated; the
 * linked system, event type, or event data cannot be replaced for integrity
 * reasons. All changes are audited.
 *
 * Security: Only privileged actors (admin/super_admin) or authorized automation
 * can update logs. Business validations enforce logical state changes (cannot
 * update immutable fields, must conform to event life cycle). If no log found,
 * returns 404. If invalid patch or privilege, returns 400/403.
 *
 * Returns updated event log row. Never allows deletion or tampering with event
 * origin/major metadata.
 *
 * @param props.id UUID of the integration log event to update.
 * @param props.body Patch data for the log entry (may only include certain
 *   updatable fields).
 * @path /virtualAccount/externalIntegrationLogs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** UUID of the integration log event to update. */
    id: string & tags.Format<"uuid">;

    /**
     * Patch data for the log entry (may only include certain updatable
     * fields).
     */
    body: IVirtualAccountExternalIntegrationLogs.IUpdate;
  };
  export type Body = IVirtualAccountExternalIntegrationLogs.IUpdate;
  export type Response = IVirtualAccountExternalIntegrationLogs;

  export const METADATA = {
    method: "PUT",
    path: "/virtualAccount/externalIntegrationLogs/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/virtualAccount/externalIntegrationLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountExternalIntegrationLogs =>
    typia.random<IVirtualAccountExternalIntegrationLogs>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete external integration event log
 * (virtual_account_external_integration_logs table).
 *
 * This API allows privileged admins or system automation to permanently remove
 * a single integration log record, provided retention and reference policies
 * are respected. The record is deleted by primary key. Business validation
 * ensures logs required for compliance cannot be deleted until their
 * retention/archiving period has passed. All deletions are audited in admin and
 * audit logs. Deletion is logical if required by policy (i.e., status marking
 * instead of physical erase).
 *
 * Security: Only super_admin or well-privileged admin roles can remove log
 * records. Attempt to delete non-existent logs, in-use compliance records, or
 * without permission will result in 404, 409, or 403 respectively. Returns
 * confirmation payload (deleted ID/status).
 *
 * Successful deletion breaks linkage to dashboards/searches immediately, but
 * remains auditable if required. Failure cases yield relevant errors.
 *
 * @param props.id UUID of the integration log event to delete.
 * @path /virtualAccount/externalIntegrationLogs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** UUID of the integration log event to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountExternalIntegrationLogs.IDeleteResult;

  export const METADATA = {
    method: "DELETE",
    path: "/virtualAccount/externalIntegrationLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/externalIntegrationLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountExternalIntegrationLogs.IDeleteResult =>
    typia.random<IVirtualAccountExternalIntegrationLogs.IDeleteResult>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
