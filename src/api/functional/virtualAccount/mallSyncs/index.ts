import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IVirtualAccountMallSync } from "../../../structures/IVirtualAccountMallSync";
import { IPageIVirtualAccountMallSync } from "../../../structures/IPageIVirtualAccountMallSync";

/**
 * Create a new mall sync log entry for mall integration event.
 *
 * This endpoint creates a new record in the `virtual_account_mall_syncs` table,
 * documenting an outbound integration event with a mall (e.g., Cafe24, 고도몰).
 * The operation is essential for end-to-end tracing of all interactions with
 * mall platforms, useful for admin dashboards and integration troubleshooting.
 * Required input includes external_system_id (referencing the mall), order_id,
 * the payload sent, and expected result. All requests are strictly
 * permission-checked (RBAC enforced) and validated for field consistency. The
 * new entity and its metadata are returned for further processing/display. This
 * endpoint supports the reporting, notification, and troubleshooting
 * requirements outlined in integration documentation and admin dashboard
 * features.
 *
 * @param props.body Details and payload of new mall sync log.
 * @path /virtualAccount/mallSyncs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Details and payload of new mall sync log. */
    body: IVirtualAccountMallSync.ICreate;
  };
  export type Body = IVirtualAccountMallSync.ICreate;
  export type Response = IVirtualAccountMallSync;

  export const METADATA = {
    method: "POST",
    path: "/virtualAccount/mallSyncs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/mallSyncs";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountMallSync => typia.random<IVirtualAccountMallSync>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List mall sync log entries in virtual_account_mall_syncs with searching and
 * pagination.
 *
 * This endpoint retrieves an efficient, paginated list of mall sync events from
 * the `virtual_account_mall_syncs` table. It enables admins to view the
 * transmission history of all mall integration pushes, supporting their duties
 * in monitoring external status updates and troubleshooting issues. Flexible
 * search options include order ID, target mall, status, and time range.
 * Pagination/ordering is supported for large result sets. Input validation
 * ensures consistency; output includes paging metadata for UI or Excel export.
 * Security protections such as RBAC limit exposure only to authorized roles.
 * Endpoint is designed to work in tandem with mall sync detail (GET), creation
 * (POST), update (PUT), and deletion endpoints.
 *
 * @param props.body Filter and pagination query for mall sync log retrieval.
 * @path /virtualAccount/mallSyncs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Filter and pagination query for mall sync log retrieval. */
    body: IVirtualAccountMallSync.IRequest;
  };
  export type Body = IVirtualAccountMallSync.IRequest;
  export type Response = IPageIVirtualAccountMallSync;

  export const METADATA = {
    method: "PATCH",
    path: "/virtualAccount/mallSyncs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/mallSyncs";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIVirtualAccountMallSync =>
    typia.random<IPageIVirtualAccountMallSync>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get the details for a specific mall sync log in virtual_account_mall_syncs by
 * ID.
 *
 * This endpoint returns the full details for a specific mall sync event in the
 * `virtual_account_mall_syncs` table. Typically used to drill down from a UI
 * listing (patch endpoint) or to review the full payload, result status, error
 * message, and metadata for an individual event. Access permissions are checked
 * to ensure only admins or super-admins with the correct role can review these
 * logs. Not found returns a 404 error. Output structure is designed to supply
 * all technical and business details required by the dashboard and support
 * tickets.
 *
 * @param props.id Unique identifier of the mall sync log to retrieve.
 * @path /virtualAccount/mallSyncs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier of the mall sync log to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountMallSync;

  export const METADATA = {
    method: "GET",
    path: "/virtualAccount/mallSyncs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/mallSyncs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountMallSync => typia.random<IVirtualAccountMallSync>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a mall sync log entry in virtual_account_mall_syncs by ID.
 *
 * This endpoint allows administrative users to update a specific mall sync log
 * entry in the `virtual_account_mall_syncs` table. Updates may include
 * correcting metadata (fixing result_status, error message), revising payload
 * for troubleshooting, or updating contextual data about the mall push event.
 * Each operation is protected by RBAC, audit-logged, and validated for allowed
 * fields and referential integrity. Edits are only permitted for
 * active/non-archived records. A not-found or lock-violation error is returned
 * if update request is not allowed. Returns updated mall sync entity on
 * success. The endpoint complements POST (create), PATCH (list), GET (details),
 * and DELETE (remove) operations for full CRUD cycle on mall sync logs.
 *
 * @param props.id Unique identifier of the mall sync log to update.
 * @param props.body Editable fields for the mall sync log entry.
 * @path /virtualAccount/mallSyncs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier of the mall sync log to update. */
    id: string & tags.Format<"uuid">;

    /** Editable fields for the mall sync log entry. */
    body: IVirtualAccountMallSync.IUpdate;
  };
  export type Body = IVirtualAccountMallSync.IUpdate;
  export type Response = IVirtualAccountMallSync;

  export const METADATA = {
    method: "PUT",
    path: "/virtualAccount/mallSyncs/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/virtualAccount/mallSyncs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountMallSync => typia.random<IVirtualAccountMallSync>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a mall sync log entry in virtual_account_mall_syncs by ID.
 *
 * This endpoint deletes an individual mall sync log row from the
 * `virtual_account_mall_syncs` table, supporting admin-led cleanup,
 * troubleshooting, and test data removal. Before deletion, the system checks
 * referential integrity to avoid breaking any downstream logs or analysis. Only
 * admin or super-admin users with granted RBAC rights can delete. All deletes
 * are audit-logged for compliance. Related endpoints in the mall sync log
 * domain include POST (create), PATCH (list), GET (details), PUT (update). Not
 * found returns a 404 error. Returns operation result or deleted entity
 * metadata on successful completion.
 *
 * @param props.id Unique identifier of the mall sync log to delete.
 * @path /virtualAccount/mallSyncs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier of the mall sync log to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountMallSync.IDeleteResult;

  export const METADATA = {
    method: "DELETE",
    path: "/virtualAccount/mallSyncs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/mallSyncs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountMallSync.IDeleteResult =>
    typia.random<IVirtualAccountMallSync.IDeleteResult>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
