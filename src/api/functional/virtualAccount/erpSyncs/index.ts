import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IVirtualAccountErpSync } from "../../../structures/IVirtualAccountErpSync";
import { IPageIVirtualAccountErpSync } from "../../../structures/IPageIVirtualAccountErpSync";

/**
 * Create a new ERP sync log entry for outbound ERP integration event.
 *
 * This endpoint adds a new ERP sync transmission record into the
 * `virtual_account_erp_syncs` table. Each entry documents a single event where
 * data (payload) is pushed to a supported ERP system. The operation is used to
 * satisfy requirements for tracing all integration activity, for reporting,
 * auditing, and error handling. Incoming request is validated: ERP type and
 * external system must exist and be enabled. On successful creation, the new
 * entity is returned. Permission controls ensure only admins/super-admins can
 * invoke this endpoint. All ERP sync events are tightly integrated with
 * external integration error-logging and ERP type lifecycle endpoints, forming
 * the complete ERP integration management API.
 *
 * @param props.body Basic info and outbound payload for the ERP sync log entry.
 * @path /virtualAccount/erpSyncs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Basic info and outbound payload for the ERP sync log entry. */
    body: IVirtualAccountErpSync.ICreate;
  };
  export type Body = IVirtualAccountErpSync.ICreate;
  export type Response = IVirtualAccountErpSync;

  export const METADATA = {
    method: "POST",
    path: "/virtualAccount/erpSyncs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/erpSyncs";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountErpSync => typia.random<IVirtualAccountErpSync>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List ERP sync logs with filtering and pagination from
 * virtual_account_erp_syncs.
 *
 * This endpoint efficiently lists all ERP sync transmission events from the
 * `virtual_account_erp_syncs` table, satisfying dashboard and audit needs to
 * review historical integrations with ERP systems. The PATCH method accepts a
 * complex filter/search body that allows paging, filtering by ERP type, result
 * status, time range, external system reference, and free text search on
 * payload. Results are used in monitoring panels, failure troubleshooting, and
 * export dashboards. Endpoint implements pagination and ordering; large sets
 * are returned in chunks for efficiency. Security protections include RBAC
 * (only admins/super-admins may access) and input validation to prevent
 * injection or excess data exposure. Dependent with creation (POST), view
 * (GET), update (PUT), and delete endpoints for full CRUD lifecycle over ERP
 * sync logs.
 *
 * @param props.body Search/filter parameters for ERP sync retrieval.
 * @path /virtualAccount/erpSyncs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Search/filter parameters for ERP sync retrieval. */
    body: IVirtualAccountErpSync.IRequest;
  };
  export type Body = IVirtualAccountErpSync.IRequest;
  export type Response = IPageIVirtualAccountErpSync;

  export const METADATA = {
    method: "PATCH",
    path: "/virtualAccount/erpSyncs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/erpSyncs";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIVirtualAccountErpSync =>
    typia.random<IPageIVirtualAccountErpSync>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get the details for a specific ERP sync log in virtual_account_erp_syncs by
 * ID.
 *
 * This endpoint fetches the full details of a single ERP sync log record from
 * the `virtual_account_erp_syncs` table by ID. The ERP sync entity documents
 * all outbound data pushes to ERP platforms, including result, payload, error
 * info, involved ERP type, and associated external system. It is essential for
 * admins performing error analysis, audits, or reconciliation of integration
 * history. Permission checks and input validation are enforced for security and
 * data consistency. Related endpoints include listing ERP sync events, creating
 * a new sync record, and deletion. If the requested sync entry doesn't exist, a
 * 404 error code is returned. The response includes all atomic event data
 * needed for audit and system reports.
 *
 * @param props.id Unique ID of the ERP sync log to retrieve.
 * @path /virtualAccount/erpSyncs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique ID of the ERP sync log to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountErpSync;

  export const METADATA = {
    method: "GET",
    path: "/virtualAccount/erpSyncs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/erpSyncs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountErpSync => typia.random<IVirtualAccountErpSync>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update an ERP sync log entry in virtual_account_erp_syncs by ID.
 *
 * This endpoint updates an existing ERP sync event in the
 * `virtual_account_erp_syncs` table. It is used when admins need to correct or
 * supplement outbound payloads or status attributes (for example, marking a
 * failed sync as resolved following manual intervention). All updates are
 * RBAC-protected, audit-logged, and validated for correct referencing of ERP
 * type/system and input structure. Supports integration with dashboard and
 * reporting modules. 404 error returned if sync event with specified ID does
 * not exist. Related to ERP sync event creation, listing, and detailed read
 * endpoints.
 *
 * @param props.id Unique ID of the ERP sync log to update.
 * @param props.body Fields to update for the ERP sync log entry.
 * @path /virtualAccount/erpSyncs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique ID of the ERP sync log to update. */
    id: string & tags.Format<"uuid">;

    /** Fields to update for the ERP sync log entry. */
    body: IVirtualAccountErpSync.IUpdate;
  };
  export type Body = IVirtualAccountErpSync.IUpdate;
  export type Response = IVirtualAccountErpSync;

  export const METADATA = {
    method: "PUT",
    path: "/virtualAccount/erpSyncs/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/virtualAccount/erpSyncs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountErpSync => typia.random<IVirtualAccountErpSync>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete an ERP sync log record from virtual_account_erp_syncs by ID.
 *
 * This endpoint deletes a specific ERP sync event record from the
 * `virtual_account_erp_syncs` table. It is intended for use by admins in
 * cleaning up redundant, test, or recovery sync logs. Deletion is checked for
 * referential integrity (e.g., that the record is not referenced by dependent
 * external integration logs). Permission checks and audit logging are
 * mandatory; deletion is tracked for compliance purposes. If the entity is not
 * found, a 404 error is returned. This operation is related to other ERP sync
 * log CRUD endpoints.
 *
 * @param props.id Unique ID of the ERP sync log to delete.
 * @path /virtualAccount/erpSyncs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique ID of the ERP sync log to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountErpSync.IDeleteResult;

  export const METADATA = {
    method: "DELETE",
    path: "/virtualAccount/erpSyncs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/erpSyncs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountErpSync.IDeleteResult =>
    typia.random<IVirtualAccountErpSync.IDeleteResult>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
