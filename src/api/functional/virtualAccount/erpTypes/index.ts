import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IVirtualAccountErpTypes } from "../../../structures/IVirtualAccountErpTypes";
import { IPageIVirtualAccountErpTypes } from "../../../structures/IPageIVirtualAccountErpTypes";
import { IVirtualAccountErpType } from "../../../structures/IVirtualAccountErpType";

/**
 * Register a new ERP vendor/type (virtual_account_erp_types table).
 *
 * This API lets an admin register a new ERP partner type (e.g., new commercial
 * ERP vendor, custom implementation, etc). Fields required include the code
 * (unique short), display_name (for UI), and creation timestamp is automatic.
 * The database enforces uniqueness of code, normalized attributes, and
 * referential integrity to any linked erp syncs.
 *
 * Security: Only admins or super_admins can insert ERP types. Validation errors
 * (duplicate code or empty values) will return 400/409. All additions are
 * logged (admin/audit log) for traceability. The new ERP type object is
 * returned on success.
 *
 * Errors for privilege, value, or server faults—401/403, 400/409, 500,
 * respectively.
 *
 * @param props.body Details of the ERP type to register.
 * @path /virtualAccount/erpTypes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Details of the ERP type to register. */
    body: IVirtualAccountErpTypes.ICreate;
  };
  export type Body = IVirtualAccountErpTypes.ICreate;
  export type Response = IVirtualAccountErpTypes;

  export const METADATA = {
    method: "POST",
    path: "/virtualAccount/erpTypes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/erpTypes";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountErpTypes => typia.random<IVirtualAccountErpTypes>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search ERP types (virtual_account_erp_types table).
 *
 * This PATCH endpoint provides admins or automation jobs with filtered, sorted,
 * and paginated ERP type records. Filters include code, display_name,
 * created_at range, and other search conditions. Used in the admin dashboard to
 * select or manage ERP integrations, or to analyze partner coverage. Pagination
 * and search pattern (like/trigram) are supported, returning a page of ERP type
 * objects with total/count.
 *
 * Security: Only authorized admins can query this data. Validation errors or
 * over-restrictive filters (zero results) are handled gracefully. Data returned
 * matches the normalized business entity model.
 *
 * Returns page of ERP types. HTTP errors on misconfiguration or server error.
 * RBAC enforced for access.
 *
 * @param props.body Criteria and pagination settings for ERP type search.
 * @path /virtualAccount/erpTypes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Criteria and pagination settings for ERP type search. */
    body: IVirtualAccountErpTypes.IRequest;
  };
  export type Body = IVirtualAccountErpTypes.IRequest;
  export type Response = IPageIVirtualAccountErpTypes;

  export const METADATA = {
    method: "PATCH",
    path: "/virtualAccount/erpTypes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/erpTypes";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIVirtualAccountErpTypes =>
    typia.random<IPageIVirtualAccountErpTypes>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get details for a single ERP type (virtual_account_erp_types table).
 *
 * This endpoint returns one row—the full details for a particular ERP type
 * (e.g., DUZON, SAP)—matching the unique ID (UUID). Data includes: code,
 * display_name, and creation date. Used in admin dashboards, configuration UIs,
 * integration managers, or audit/reporting tools for partner info reference. If
 * ERP type is not found, a 404 error is returned.
 *
 * Security: Only admin roles (RBAC enforced) may access this endpoint. No
 * secrets/meta beyond what is stored in the schema. The returned object matches
 * normalized 3NF definition of erp_types.
 *
 * Audit log is generated with every access, for compliance with policy.
 *
 * @param props.id UUID of the ERP type row to retrieve.
 * @path /virtualAccount/erpTypes/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** UUID of the ERP type row to retrieve. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountErpTypes;

  export const METADATA = {
    method: "GET",
    path: "/virtualAccount/erpTypes/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/erpTypes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountErpTypes => typia.random<IVirtualAccountErpTypes>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update an ERP type record in virtual_account_erp_types by ID.
 *
 * This endpoint updates properties of an existing ERP type, as recorded in the
 * `virtual_account_erp_types` table, which catalogs ERP vendors integrated with
 * the virtual account platform. This operation enables administrators to
 * correct display names, update metadata after new partnerships, and maintain
 * up-to-date ERP options for outbound sync and logging. All update actions are
 * validated for RBAC scope; only authorized administrators may perform this
 * operation. Input data is thoroughly validated against ERP type constraints
 * (e.g., unique code, non-null display name). Each update is audit-logged to
 * fulfill compliance and reporting standards described in the administrative
 * dashboard and external integration requirements. If the entity is not found,
 * a 404 error is returned. This API is closely related to the ERP type creation
 * and listing endpoints, which together provide full CRUD lifecycle
 * management.
 *
 * @param props.id Unique identifier of the ERP type to update.
 * @param props.body Fields to update for the ERP type.
 * @path /virtualAccount/erpTypes/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier of the ERP type to update. */
    id: string & tags.Format<"uuid">;

    /** Fields to update for the ERP type. */
    body: IVirtualAccountErpType.IUpdate;
  };
  export type Body = IVirtualAccountErpType.IUpdate;
  export type Response = IVirtualAccountErpType;

  export const METADATA = {
    method: "PUT",
    path: "/virtualAccount/erpTypes/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/virtualAccount/erpTypes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountErpType => typia.random<IVirtualAccountErpType>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete an ERP type record in virtual_account_erp_types by ID.
 *
 * This endpoint deletes an ERP type entry from the `virtual_account_erp_types`
 * table, controlling which ERP platforms are recognized for integration
 * activities. Deletion requests are restricted to super-admins or privileged
 * roles, following strict RBAC controls as established in requirements and
 * Prisma schema documentation. Before deletion, the system checks for the
 * existence of related ERP sync history to ensure data integrity (enforcing
 * referential checks). If dependencies exist, the operation is rejected with an
 * appropriate error code. Each deletion is strictly audit-logged in the admin
 * action logs. This endpoint is complementary to other ERP type lifecycle
 * endpoints (create, list, update) and helps keep the registry of acceptable
 * ERP platforms accurate and compliant.
 *
 * @param props.id Unique identifier of the ERP type to delete.
 * @path /virtualAccount/erpTypes/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier of the ERP type to delete. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountErpType.IDeleteResult;

  export const METADATA = {
    method: "DELETE",
    path: "/virtualAccount/erpTypes/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/erpTypes/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountErpType.IDeleteResult =>
    typia.random<IVirtualAccountErpType.IDeleteResult>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
