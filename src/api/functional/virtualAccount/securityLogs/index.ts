import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IVirtualAccountSecurityLog } from "../../../structures/IVirtualAccountSecurityLog";
import { IPageIVirtualAccountSecurityLog } from "../../../structures/IPageIVirtualAccountSecurityLog";

/**
 * Create a new security log entry (virtual_account_security_logs).
 *
 * Creates a new security log entry in the virtual_account_security_logs table
 * to record a system or user security event, based on requirements for
 * audit/functions in 07_virtual_account_security.md. The request body must
 * specify all required fields: actor, event_type, resource, detail, and
 * occurred_at. Used by admin users and system security modules.
 *
 * Write errors (validation/permission) result in 422/403. Success returns the
 * created log with all fields. All insertions are themselves audited in the
 * admin action log. Related endpoints: PATCH (list), GET/PUT/DELETE single
 * log.
 *
 * @param props.body Security log creation details
 * @path /virtualAccount/securityLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Security log creation details */
    body: IVirtualAccountSecurityLog.ICreate;
  };
  export type Body = IVirtualAccountSecurityLog.ICreate;
  export type Response = IVirtualAccountSecurityLog;

  export const METADATA = {
    method: "POST",
    path: "/virtualAccount/securityLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/securityLogs";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountSecurityLog => typia.random<IVirtualAccountSecurityLog>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List and search security logs (virtual_account_security_logs).
 *
 * Retrieves a list of security logs from the virtual_account_security_logs
 * table, supporting paginated results, multi-field filtering (event_type,
 * actor, resource), date range, and sorting. This entity implements
 * system/integration/user security incident tracking as required across
 * requirements (07_virtual_account_security.md, admin dashboard, notification
 * logs).
 *
 * The request body defines filter criteria and pagination (date, actor_id,
 * actor_type, event_type, resource_type, resource_id, keyword). The endpoint is
 * access-controlled for authorized admin/compliance users. 403 for permission
 * denied, 422 for invalid filter specs. Results in response include full log
 * details and pagination metadata. Related endpoints: GET/PUT/DELETE single log
 * entry.
 *
 * @param props.body Filtering and pagination criteria for security log
 *   retrieval
 * @path /virtualAccount/securityLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Filtering and pagination criteria for security log retrieval */
    body: IVirtualAccountSecurityLog.IRequest;
  };
  export type Body = IVirtualAccountSecurityLog.IRequest;
  export type Response = IPageIVirtualAccountSecurityLog;

  export const METADATA = {
    method: "PATCH",
    path: "/virtualAccount/securityLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/securityLogs";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIVirtualAccountSecurityLog =>
    typia.random<IPageIVirtualAccountSecurityLog>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a specific security log by ID (virtual_account_security_logs).
 *
 * Fetches a single security log entry from the virtual_account_security_logs
 * table by unique ID. Used in detail view for admin/compliance dashboards.
 *
 * Path parameter 'id' must match a unique security log. Returns all details
 * (event_type, actor info, resource, timestamp, etc). 404 returned if entry is
 * missing. Strictly access-controlled to admin/compliance users. Related
 * endpoints: PATCH (list), PUT/DELETE for same entity.
 *
 * @param props.id Security log entry ID to retrieve
 * @path /virtualAccount/securityLogs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Security log entry ID to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountSecurityLog;

  export const METADATA = {
    method: "GET",
    path: "/virtualAccount/securityLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/securityLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountSecurityLog => typia.random<IVirtualAccountSecurityLog>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a security log entry by ID (virtual_account_security_logs).
 *
 * Updates an existing security log entry in the virtual_account_security_logs
 * table, identified by its unique ID. Only permitted fields (e.g., detail,
 * description, result) may be updated as per security policy. action_type,
 * occurred_at, actor_id/type, and event_type must NOT be mutable for compliance
 * integrity.
 *
 * Entry not found returns 404. Permission error returns 403. Update success
 * returns new log object. All update actions are themselves recorded in admin
 * action log. Related endpoints: PATCH (list), GET/DELETE for the same log
 * entry.
 *
 * @param props.id Security log ID to update
 * @param props.body Fields to update in security log entry
 * @path /virtualAccount/securityLogs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Security log ID to update */
    id: string & tags.Format<"uuid">;

    /** Fields to update in security log entry */
    body: IVirtualAccountSecurityLog.IUpdate;
  };
  export type Body = IVirtualAccountSecurityLog.IUpdate;
  export type Response = IVirtualAccountSecurityLog;

  export const METADATA = {
    method: "PUT",
    path: "/virtualAccount/securityLogs/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/virtualAccount/securityLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountSecurityLog => typia.random<IVirtualAccountSecurityLog>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a security log entry by ID (virtual_account_security_logs).
 *
 * Deletes a single security log entry from the virtual_account_security_logs
 * table. Used for security event and incident log audit clean-up, per
 * compliance/policy. Admin or compliance roles only permitted; all deletions
 * logged in admin activities.
 *
 * Deletion is hard and does not affect other logs. 404 is returned if the ID is
 * missing. HTTP 204 on success, 403 if permission denied. Related endpoints:
 * PATCH (list), GET/PUT for single log.
 *
 * @param props.id Security log ID to delete
 * @path /virtualAccount/securityLogs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Security log ID to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/virtualAccount/securityLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/securityLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
