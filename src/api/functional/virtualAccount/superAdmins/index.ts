import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IVirtualAccountSuperAdmin } from "../../../structures/IVirtualAccountSuperAdmin";
import { IPageIVirtualAccountSuperAdmin } from "../../../structures/IPageIVirtualAccountSuperAdmin";
import { IOperationResult } from "../../../structures/IOperationResult";

/**
 * Create a new super admin account (virtual_account_super_admins table).
 *
 * Creates a new super administrator record in the virtual account platform.
 * This operation is only accessible to existing super admins due to the
 * critical privileges conferred. The API expects a JSON object with fields
 * matching the 'virtual_account_super_admins' schema: a unique username and a
 * securely hashed password. Upon successful creation, audit logs are made for
 * policy compliance and traceability. The endpoint returns the created super
 * admin object, excluding sensitive information such as the raw password. If a
 * duplicate username is provided, an error is raised. This operation underpins
 * platform-level setup and on-boarding process for top-level governance.
 *
 * @param props.body Fields required to create a new super admin (username,
 *   password).
 * @path /virtualAccount/superAdmins
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Fields required to create a new super admin (username, password). */
    body: IVirtualAccountSuperAdmin.ICreate;
  };
  export type Body = IVirtualAccountSuperAdmin.ICreate;
  export type Response = IVirtualAccountSuperAdmin;

  export const METADATA = {
    method: "POST",
    path: "/virtualAccount/superAdmins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/superAdmins";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountSuperAdmin => typia.random<IVirtualAccountSuperAdmin>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List all super admin accounts with search and pagination
 * (virtual_account_super_admins table).
 *
 * Returns a paginated and searchable list of super admin accounts, referencing
 * the 'virtual_account_super_admins' table. Filters may include username and
 * created_at date range. Used for compliance dashboards and account management
 * by highest-privilege users. Access is strictly limited by security policies.
 * The result supports pagination for large installations.
 *
 * No sensitive credential data is included in the response. All accesses are
 * logged and minimally required for day-to-day operation.
 *
 * @param props.body Search and pagination criteria for super admin list.
 * @path /virtualAccount/superAdmins
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Search and pagination criteria for super admin list. */
    body: IVirtualAccountSuperAdmin.IRequest;
  };
  export type Body = IVirtualAccountSuperAdmin.IRequest;
  export type Response = IPageIVirtualAccountSuperAdmin;

  export const METADATA = {
    method: "PATCH",
    path: "/virtualAccount/superAdmins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/superAdmins";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIVirtualAccountSuperAdmin =>
    typia.random<IPageIVirtualAccountSuperAdmin>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Fetch a specific super administrator's details (virtual_account_super_admins
 * table).
 *
 * Returns the full, non-sensitive detail for a specific super admin account.
 * Used in role management and security audit flows. Always RBAC/privilege
 * checked, and all reads are audit-logged.
 *
 * Error handling returns a clear, non-sensitive message for unauthorized or
 * non-existent super admin IDs. Associated with super admin management
 * workflows for critical access users only.
 *
 * @param props.id Super admin ID to look up.
 * @path /virtualAccount/superAdmins/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Super admin ID to look up. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountSuperAdmin;

  export const METADATA = {
    method: "GET",
    path: "/virtualAccount/superAdmins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/superAdmins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountSuperAdmin => typia.random<IVirtualAccountSuperAdmin>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a super admin account (virtual_account_super_admins table).
 *
 * Updates the properties of a designated super admin, identified by their
 * unique ID. Only authenticated and authorized super admins can perform this
 * action for critical role and audit reasons. The API body mirrors updatable
 * fields from the Prisma schema (currently username and password_hash). The
 * operation logs all changes for traceability and returns the updated super
 * admin, omitting confidential details. Attempts to update non-existent or
 * unauthorized resources produce an error. This enables controlled account
 * updates as outlined in security requirements.
 *
 * @param props.id Target super admin's ID
 * @param props.body Fields to update for super admin (username, password)
 * @path /virtualAccount/superAdmins/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target super admin's ID */
    id: string & tags.Format<"uuid">;

    /** Fields to update for super admin (username, password) */
    body: IVirtualAccountSuperAdmin.IUpdate;
  };
  export type Body = IVirtualAccountSuperAdmin.IUpdate;
  export type Response = IVirtualAccountSuperAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/virtualAccount/superAdmins/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/virtualAccount/superAdmins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountSuperAdmin => typia.random<IVirtualAccountSuperAdmin>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a super admin account (virtual_account_super_admins table).
 *
 * Permanently removes a super admin by ID. Security policy requires dual
 * authentication and logging of all such actions, as deleting top-level
 * administrators impacts platform governance and policy. The account is deleted
 * only if the ID exists and policy checks pass; otherwise, returns error per
 * API spec. This operation is crucial for managing root-level system access.
 *
 * @param props.id Target super admin's ID
 * @path /virtualAccount/superAdmins/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target super admin's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOperationResult;

  export const METADATA = {
    method: "DELETE",
    path: "/virtualAccount/superAdmins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/superAdmins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IOperationResult => typia.random<IOperationResult>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
