import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IVirtualAccountPermission } from "../../../structures/IVirtualAccountPermission";
import { IPageIVirtualAccountPermission } from "../../../structures/IPageIVirtualAccountPermission";

/**
 * Create a new permission (virtual_account_permissions table).
 *
 * Adds a new permission, given a unique code and human-readable description.
 * Only privileged admin users may invoke this operation. All creation actions
 * are strictly logged. Used for onboarding new features or finer-grained access
 * control scenarios. Attempts to duplicate an existing code or violate schema
 * constraints result in a conflict error; otherwise, returns the created
 * permission object.
 *
 * @param props.body Permission creation fields (code, description).
 * @path /virtualAccount/permissions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Permission creation fields (code, description). */
    body: IVirtualAccountPermission.ICreate;
  };
  export type Body = IVirtualAccountPermission.ICreate;
  export type Response = IVirtualAccountPermission;

  export const METADATA = {
    method: "POST",
    path: "/virtualAccount/permissions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/permissions";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountPermission => typia.random<IVirtualAccountPermission>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search all permissions (virtual_account_permissions table).
 *
 * Returns a list of defined permissions for RBAC mapping, optionally
 * filtered/searched via the request body parameters (such as code,
 * description/subtext, pagination, and sorting). Used for permission
 * assignment, UI dropdowns, and permission audit trails. Router enforces
 * admin-only access. Implements full audit and searchability as required for
 * practical RBAC administration.
 *
 * @param props.body Filters and pagination for permission list.
 * @path /virtualAccount/permissions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Filters and pagination for permission list. */
    body: IVirtualAccountPermission.IRequest;
  };
  export type Body = IVirtualAccountPermission.IRequest;
  export type Response = IPageIVirtualAccountPermission;

  export const METADATA = {
    method: "PATCH",
    path: "/virtualAccount/permissions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/permissions";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIVirtualAccountPermission =>
    typia.random<IPageIVirtualAccountPermission>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a specific permission's details (virtual_account_permissions table).
 *
 * Outputs the full details of a single permission entity as defined in the
 * Prisma schema, using the permission ID path parameter. Includes code,
 * description, and linkage metadata. Secured for admin use; used in permission
 * config/edit screens.
 *
 * @param props.id Target permission's ID
 * @path /virtualAccount/permissions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target permission's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountPermission;

  export const METADATA = {
    method: "GET",
    path: "/virtualAccount/permissions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/permissions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountPermission => typia.random<IVirtualAccountPermission>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a permission (virtual_account_permissions table).
 *
 * Updates a permission field such as code or description, by permission ID,
 * reflecting the mutable fields defined in the schema. All changes are strictly
 * logged with before/after values for RBAC compliance and rollback. If a
 * provided ID is not found or other constraints are violated, appropriate
 * errors are returned. Enables dynamic RBAC evolution as described in
 * requirements.
 *
 * @param props.id Target permission's ID
 * @param props.body Permission fields to update (code, description)
 * @path /virtualAccount/permissions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target permission's ID */
    id: string & tags.Format<"uuid">;

    /** Permission fields to update (code, description) */
    body: IVirtualAccountPermission.IUpdate;
  };
  export type Body = IVirtualAccountPermission.IUpdate;
  export type Response = IVirtualAccountPermission;

  export const METADATA = {
    method: "PUT",
    path: "/virtualAccount/permissions/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/virtualAccount/permissions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountPermission => typia.random<IVirtualAccountPermission>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Deletes a permission entry from the virtual_account_permissions table by ID.
 *
 * This operation deletes a permission entry from the
 * virtual_account_permissions table by a unique ID path parameter.
 *
 * The permission defines an individual allowable action or capability in the
 * RBAC system, as required for admin dashboard and security compliance.
 * Deletion is only allowed if the permission is not referenced by any active
 * role-permission mapping in the role_permission link table, enforcing
 * referential integrity as described in the Prisma schema. Attempts to delete a
 * permission in use will result in a referential integrity error response.
 *
 * This endpoint is restricted to privileged users (admin and super admin) due
 * to the security implications of permission deletion. All attempts to delete
 * must be logged in the system's audit log, including the acting admin, target
 * permission, and the action result.
 *
 * Related endpoints are: PATCH /virtualAccount/permissions for listing and
 * searching permissions, and POST /virtualAccount/permissions for creating new
 * permission codes.
 *
 * Validation includes path parameter existence check and reference check for
 * role-permission usage. Any error related to constraint violation or
 * permission handling must return structured error messages.
 *
 * @param props.id Unique identifier for the permission to delete
 * @path /virtualAccount/permissions/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier for the permission to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/virtualAccount/permissions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/permissions/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
