import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IVirtualAccountPgProvider } from "../../../structures/IVirtualAccountPgProvider";
import { IPageIVirtualAccountPgProvider } from "../../../structures/IPageIVirtualAccountPgProvider";

/**
 * Register a new PG provider into the `virtual_account_pg_providers` table.
 *
 * This API allows an administrator to register a new PG provider into the
 * `virtual_account_pg_providers` table. All input is strictly validated:
 * required fields such as `name`, `code`, and `api_endpoint` must be supplied
 * and must be unique. Upon success, a record will be created, and the new
 * provider will be available for virtual account issuance workflows.
 *
 * Security is enforced using RBAC; only privileged admins may use this
 * endpoint. Input is checked for uniqueness to prevent duplication of providers
 * or conflicting codes. The operation will fail if uniqueness is violated (409
 * error).
 *
 * Data validation ensures only atomic, non-derived values are inserted,
 * maintaining strict 3NF normalization. Business logic ensures integration
 * metadata is correct before creation.
 *
 * Related endpoints for fetching, updating, and deleting providers are also
 * available.
 *
 * @param props.body Data for the new PG provider (name, code, API endpoint,
 *   etc).
 * @path /virtualAccount/pgProviders
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Data for the new PG provider (name, code, API endpoint, etc). */
    body: IVirtualAccountPgProvider.ICreate;
  };
  export type Body = IVirtualAccountPgProvider.ICreate;
  export type Response = IVirtualAccountPgProvider;

  export const METADATA = {
    method: "POST",
    path: "/virtualAccount/pgProviders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/pgProviders";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountPgProvider => typia.random<IVirtualAccountPgProvider>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieves a paginated and filterable list of payment gateway providers.
 *
 * This operation returns a filterable and paginated list of payment gateway
 * (PG) providers from the virtual_account_pg_providers table. Used for
 * dashboard onboarding, external integration management, and reference during
 * virtual account issuance. The PATCH method allows a search/filter query in
 * the request body, specifying provider name, code, or ordering as needed.
 *
 * Access is protected by RBAC policy (admin/superadmin). Results may include
 * sensitive integration data, so actions are audit-logged.
 *
 * Related endpoints: POST (add new PG), GET (detail), PUT (update), DELETE
 * (remove) for the same entity. Referential integrity enforced (providers
 * referenced by accounts cannot be removed until unused).
 *
 * @param props.body Optional search/filter criteria for PG provider list.
 * @path /virtualAccount/pgProviders
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Optional search/filter criteria for PG provider list. */
    body: IVirtualAccountPgProvider.IRequest;
  };
  export type Body = IVirtualAccountPgProvider.IRequest;
  export type Response = IPageIVirtualAccountPgProvider;

  export const METADATA = {
    method: "PATCH",
    path: "/virtualAccount/pgProviders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/pgProviders";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIVirtualAccountPgProvider =>
    typia.random<IPageIVirtualAccountPgProvider>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Fetch a specific PG provider from the `virtual_account_pg_providers` table by
 * ID.
 *
 * This API fetches a single record from the `virtual_account_pg_providers`
 * table using a unique PG provider ID. The endpoint allows administrators to
 * view the provider's details, such as its name, code, API endpoint, and
 * status. All returned data is atomic and complies with 3NF; the response never
 * includes summarizations or duplicate data. This read operation is essential
 * for various service maintenance and external API integration workflows, where
 * knowing each PG configuration is required.
 *
 * Security is enforced through role-based permissions (RBAC); only authorized
 * administrators can access provider details. The endpoint ensures that only a
 * provider with a matching ID will return a result, otherwise, a 404 not found
 * is returned for absent resources. Links to external integrations are also
 * visible.
 *
 * No business logic modifies the recordâ€”this is a pure read operation. Error
 * handling follows typical RESTful conventions (401 for unauthorized, 404 for
 * not found).
 *
 * Related operations: Creation and update endpoints exist for managing provider
 * entries.
 *
 * @param props.id Unique identifier (UUID) for the PG provider.
 * @path /virtualAccount/pgProviders/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Unique identifier (UUID) for the PG provider. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountPgProvider;

  export const METADATA = {
    method: "GET",
    path: "/virtualAccount/pgProviders/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/pgProviders/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountPgProvider => typia.random<IVirtualAccountPgProvider>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update PG provider details in the `virtual_account_pg_providers` table by ID.
 *
 * This API allows authorized admins to edit or update a PG provider identified
 * by its unique ID. Only fields that are allowed to change (e.g., name, API
 * endpoint, code) may be updated; unique constraints are enforced (e.g., code
 * uniqueness). The update will only proceed for existing records, preserving
 * referential integrity and protecting against erroneous modifications to other
 * providers.
 *
 * Full atomic validation is performed on all updates. If non-existing, a 404 is
 * returned. Security: only authorized admins can perform updates per RBAC. Data
 * is strictly normalized, and only non-derived, direct values are ever changed.
 * Related downstream effects (e.g., impact on linked accounts) are not handled
 * hereâ€”this is a pure table update operation.
 *
 * Input validation errors and uniqueness violations (409) are handled as
 * RESTful errors.
 *
 * Related operations cover creation, deletion, and detail retrieval for PG
 * providers.
 *
 * @param props.id Unique identifier (UUID) for the PG provider.
 * @param props.body Fields to update for this PG provider.
 * @path /virtualAccount/pgProviders/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Unique identifier (UUID) for the PG provider. */
    id: string & tags.Format<"uuid">;

    /** Fields to update for this PG provider. */
    body: IVirtualAccountPgProvider.IUpdate;
  };
  export type Body = IVirtualAccountPgProvider.IUpdate;
  export type Response = IVirtualAccountPgProvider;

  export const METADATA = {
    method: "PUT",
    path: "/virtualAccount/pgProviders/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/virtualAccount/pgProviders/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountPgProvider => typia.random<IVirtualAccountPgProvider>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a PG provider from the `virtual_account_pg_providers` table by ID.
 *
 * This endpoint deletes a PG provider from the `virtual_account_pg_providers`
 * table using its unique ID. Only privileged administrators can perform this
 * operation. The deletion is validated against referential integrity rulesâ€”if
 * the provider is referenced by any issued virtual accounts, deletion is
 * blocked (409 Conflict), as required by the database schema comments and
 * relationships.
 *
 * Upon successful deletion, no content is returned; a 204 status is assumed. If
 * the PG provider is not found, a 404 is returned. Security is ensured through
 * RBAC permissions. No related downstream records will be removed except as
 * allowed via foreign key cascading (only if safe, as enforced by the schema).
 *
 * Related CRUD APIs cover creation, update, and retrieval of providers.
 * Business logic never allows deletion of referenced rows.
 *
 * @param props.id Unique identifier (UUID) for the PG provider.
 * @path /virtualAccount/pgProviders/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Unique identifier (UUID) for the PG provider. */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/virtualAccount/pgProviders/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/pgProviders/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
