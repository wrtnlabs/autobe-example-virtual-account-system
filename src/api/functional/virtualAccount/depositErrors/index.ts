import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IVirtualAccountDepositError } from "../../../structures/IVirtualAccountDepositError";
import { IPageIVirtualAccountDepositError } from "../../../structures/IPageIVirtualAccountDepositError";

/**
 * Create a new deposit error record (virtual_account_deposit_errors) for an
 * encountered deposit problem.
 *
 * Creates a new deposit error entry in the 'virtual_account_deposit_errors'
 * table, supporting atomic logging of errors encountered during virtual account
 * deposit handling. The endpoint requires fields such as deposit_id,
 * error_code, error_message, optionally admin_id, error_detail, and the
 * occurred_at timestamp.
 *
 * This operation is invoked by either system-level jobs (auto-matching,
 * parsing, webhook handling) or by authorized admin actions (manual error
 * registration, overrides). Permissions are tightly controlled: manual creation
 * may require additional RBAC checks to prevent misuse or accidental logging.
 *
 * Upon success, the endpoint returns the detailed object as persisted. Business
 * logic may reject duplicates, validate correctness of the target deposit
 * record, or throttle flood attempts. Errors must be handled according to
 * standard conventions (422 for validation, 409 for duplicate, 403/401 for
 * unauthorized).
 *
 * @param props.body Creation data for deposit error event
 * @path /virtualAccount/depositErrors
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Creation data for deposit error event */
    body: IVirtualAccountDepositError.ICreate;
  };
  export type Body = IVirtualAccountDepositError.ICreate;
  export type Response = IVirtualAccountDepositError;

  export const METADATA = {
    method: "POST",
    path: "/virtualAccount/depositErrors",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/depositErrors";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountDepositError =>
    typia.random<IVirtualAccountDepositError>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List and search deposit errors (virtual_account_deposit_errors table) with
 * filtering, pagination, and security enforcement.
 *
 * This API endpoint retrieves a paginated and searchable list of deposit error
 * events, directly referencing the 'virtual_account_deposit_errors' table. Each
 * deposit error record tracks failed or exceptional cases encountered during
 * virtual account deposits, including attributes such as error_code,
 * error_message, deposit_id, admin_id, and occurred_at. The API supports
 * advanced search parameters, including filtering by error code, admin,
 * timeframe, and keyword in error messages, as well as pagination and sorting
 * for scalable review of large event volumes.
 *
 * Administrators typically use this endpoint for error analysis, operations
 * troubleshooting, or proactive incident management. Data access must honor
 * RBAC permission rules, ensuring sensitive events are only viewable by
 * authorized accounts. Particular care must be taken to hide potentially
 * sensitive detail fields unless necessary for diagnosis, and to prevent
 * information leakage in export/download workflows.
 *
 * Related operations include retrieval of individual errors (GET by id), the
 * deposit list for the affected virtual account or deposit event, and
 * contextual linking within admin dashboard integrations. All query parameters
 * are validated for security and performance.
 *
 * @param props.body Search conditions and pagination for deposit error listing
 * @path /virtualAccount/depositErrors
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Search conditions and pagination for deposit error listing */
    body: IVirtualAccountDepositError.IRequest;
  };
  export type Body = IVirtualAccountDepositError.IRequest;
  export type Response = IPageIVirtualAccountDepositError;

  export const METADATA = {
    method: "PATCH",
    path: "/virtualAccount/depositErrors",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/depositErrors";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIVirtualAccountDepositError =>
    typia.random<IPageIVirtualAccountDepositError>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve a specific deposit error event (virtual_account_deposit_errors) by
 * ID with full error context.
 *
 * Retrieves the full details of an individual deposit error entry, identifying
 * it by its UUID primary key as defined in the 'virtual_account_deposit_errors'
 * table. The response includes all standard fields for the error: error_code,
 * error_message, deposit_id, admin_id, error_detail, occurred_at, and
 * relational context for troubleshooting. Admins or super-admins typically use
 * this endpoint for targeted investigation of error events recorded during
 * virtual account deposit flows.
 *
 * Error records are referenced for incident management, compliance audits, and
 * root cause analysis in conjunction with upstream deposit event and status
 * logs. Permission checks must restrict access to only authorized users,
 * especially regarding raw error_detail and system messages. Proper error
 * handling is required to respond with 404s for not found records or 403 if
 * unauthorized.
 *
 * Cross-references include hierarchical APIs for deposits and integrations with
 * the admin dashboard export/log features.
 *
 * @param props.id Target deposit error record UUID
 * @path /virtualAccount/depositErrors/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target deposit error record UUID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountDepositError;

  export const METADATA = {
    method: "GET",
    path: "/virtualAccount/depositErrors/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/depositErrors/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountDepositError =>
    typia.random<IVirtualAccountDepositError>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a deposit error record (virtual_account_deposit_errors) with new
 * context/classification/attribution details.
 *
 * Updates an existing deposit error entry identified by its primary key in
 * 'virtual_account_deposit_errors'. Permitted updates might include changing
 * error_code/classification (after reanalysis), editing error_message or
 * error_detail (for richer context), or updating admin reference after
 * override. The API requires full request validation to prevent accidental
 * overwrite or inconsistent status, and is RBAC-restricted to admin/super-admin
 * roles only.
 *
 * All updates trigger audit log writes as required by compliance and
 * traceability demands. UI should display before/after on major field changes.
 * Requires careful error handling for ID mismatches (404), invalid transitions
 * (409), or violation of validation constraints (422). Only mutable fields are
 * expected in the request body; immutable identity fields may not be changed.
 *
 * @param props.id Target deposit error record UUID to update
 * @param props.body Fields to update (error_code, message, detail, admin, etc)
 * @path /virtualAccount/depositErrors/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target deposit error record UUID to update */
    id: string & tags.Format<"uuid">;

    /** Fields to update (error_code, message, detail, admin, etc) */
    body: IVirtualAccountDepositError.IUpdate;
  };
  export type Body = IVirtualAccountDepositError.IUpdate;
  export type Response = IVirtualAccountDepositError;

  export const METADATA = {
    method: "PUT",
    path: "/virtualAccount/depositErrors/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/virtualAccount/depositErrors/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountDepositError =>
    typia.random<IVirtualAccountDepositError>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a deposit error event (virtual_account_deposit_errors) by ID with
 * strict RBAC/audit.
 *
 * Deletes a deposit error record from 'virtual_account_deposit_errors'
 * identified by its primary key (UUID). This action is typically permitted only
 * for super-admins or automation processes under special compliance scenarios
 * (such as legal erasure requests or initial test record cleanup). RBAC policy
 * must be strictly enforced to avoid unauthorized loss of audit data.
 *
 * Before deletion, the API verifies existence and constraints (e.g., not
 * referenced in other audit records). Full audit logging is required for
 * traceability. Fails with 404 if record is not found, or 403 for lack of
 * permission. On success, returns the deleted object, or a confirmation
 * status.
 *
 * @param props.id Target deposit error event UUID to delete
 * @path /virtualAccount/depositErrors/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target deposit error event UUID to delete */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountDepositError;

  export const METADATA = {
    method: "DELETE",
    path: "/virtualAccount/depositErrors/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/depositErrors/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountDepositError =>
    typia.random<IVirtualAccountDepositError>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
