import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IVirtualAccountRole } from "../../../structures/IVirtualAccountRole";
import { IPageIVirtualAccountRole } from "../../../structures/IPageIVirtualAccountRole";
import { IOperationResult } from "../../../structures/IOperationResult";

/**
 * Create a new role (virtual_account_roles table).
 *
 * Adds a new RBAC role, requiring unique name and a description. The request
 * body must provide all required fields as defined in the Prisma schema. After
 * creation, the new role is available for assignment to admins. Security policy
 * restricts this operation to authorized users, and audit logs are kept for
 * compliance. Duplicate role names return a conflict error.
 *
 * @param props.body Fields for creating a new role.
 * @path /virtualAccount/roles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Fields for creating a new role. */
    body: IVirtualAccountRole.ICreate;
  };
  export type Body = IVirtualAccountRole.ICreate;
  export type Response = IVirtualAccountRole;

  export const METADATA = {
    method: "POST",
    path: "/virtualAccount/roles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/roles";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountRole => typia.random<IVirtualAccountRole>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List/search all roles (virtual_account_roles table).
 *
 * Fetches a paginated, searchable list of all defined roles for admin RBAC
 * configuration. Parameters in the request body allow search by role name,
 * filtering, and pagination/sorting. Data returned is a summary, including role
 * name, description, and ID. This enables admin console UI to display, search,
 * and configure access roles. Security checks ensure only authorized admin
 * users can query role lists.
 *
 * @param props.body Filters and pagination for listing/searching roles
 * @path /virtualAccount/roles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Filters and pagination for listing/searching roles */
    body: IVirtualAccountRole.IRequest;
  };
  export type Body = IVirtualAccountRole.IRequest;
  export type Response = IPageIVirtualAccountRole;

  export const METADATA = {
    method: "PATCH",
    path: "/virtualAccount/roles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/roles";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIVirtualAccountRole => typia.random<IPageIVirtualAccountRole>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a specific role's details (virtual_account_roles table).
 *
 * Returns the properties and relationships of an individual role for admin
 * configuration UI, given the role ID. Only authorized admin users may access
 * this endpoint. Returned data includes ID, name, description, and associated
 * permissions or related objects if present. Used for detailed view and edit
 * preparation in access management.
 *
 * @param props.id Target role's ID
 * @path /virtualAccount/roles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target role's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountRole;

  export const METADATA = {
    method: "GET",
    path: "/virtualAccount/roles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/roles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountRole => typia.random<IVirtualAccountRole>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a role (virtual_account_roles table).
 *
 * Updates the name or description of a specified role. Security policies
 * restrict this endpoint to admin users with proper authority. The request body
 * should reflect mutable schema fields. Audit trails are required and attempts
 * to update an invalid or non-existent ID are handled with appropriate errors.
 * Used in role management UIs.
 *
 * @param props.id Target role's ID
 * @param props.body Role fields to update (name, description)
 * @path /virtualAccount/roles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target role's ID */
    id: string & tags.Format<"uuid">;

    /** Role fields to update (name, description) */
    body: IVirtualAccountRole.IUpdate;
  };
  export type Body = IVirtualAccountRole.IUpdate;
  export type Response = IVirtualAccountRole;

  export const METADATA = {
    method: "PUT",
    path: "/virtualAccount/roles/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/virtualAccount/roles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountRole => typia.random<IVirtualAccountRole>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a role (virtual_account_roles table).
 *
 * Removes a role entity by its unique ID. Security/policy checks ensure that a
 * role is not currently assigned in use or required by system policies before
 * deletion. All deletions are logged for audit. Returns a confirmation object
 * on successful deletion, or an error for any constraint violation. Used for
 * RBAC configuration cleanup.
 *
 * @param props.id Target role's ID
 * @path /virtualAccount/roles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target role's ID */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IOperationResult;

  export const METADATA = {
    method: "DELETE",
    path: "/virtualAccount/roles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/roles/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IOperationResult => typia.random<IOperationResult>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
