import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IVirtualAccountAdmin } from "../../../structures/IVirtualAccountAdmin";
import { IPageIVirtualAccountAdmin } from "../../../structures/IPageIVirtualAccountAdmin";

/**
 * Register a new admin user account (virtual_account_admins table).
 *
 * Creates a new admin user account in the platform. Required fields: username
 * (unique), email (unique), password hash (never plain text), with optional
 * initial role assignment. Validates uniqueness and securely stores
 * credentials.
 *
 * This operation is only available to super-admins or users with the
 * appropriate privilege. Triggers audit logs and notification flows (e.g., for
 * 2FA setup). Errors include duplicate username/email, weak password (if
 * enforceable), or policy violation.
 *
 * Related endpoints: PATCH for listing, GET for detail, PUT/DELETE for updates.
 *
 * @param props.body Admin user details for onboarding—username, email,
 *   password, optional roles.
 * @path /virtualAccount/admins
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /**
     * Admin user details for onboarding—username, email, password, optional
     * roles.
     */
    body: IVirtualAccountAdmin.ICreate;
  };
  export type Body = IVirtualAccountAdmin.ICreate;
  export type Response = IVirtualAccountAdmin;

  export const METADATA = {
    method: "POST",
    path: "/virtualAccount/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/admins";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountAdmin => typia.random<IVirtualAccountAdmin>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List admin users with filtering, search, and pagination
 * (virtual_account_admins table).
 *
 * Provides paginated, filterable access to all platform admin users, leveraging
 * the 'virtual_account_admins' table. Filtering supports username, email,
 * creation date range, and login/lock status. Sorting and pagination metadata
 * included, supporting the admin dashboard and privilege management UI.
 *
 * Only super-admin or users with appropriate permissions may access this
 * endpoint. Query criteria validated for type and range correctness. All
 * accesses are logged per security/audit policy.
 *
 * Related endpoints: GET for detail, POST for creation, PUT/DELETE for
 * maintenance. This underpins the main user/role management view on the
 * platform.
 *
 * @param props.body Admin user list request—supports filtering, sort,
 *   pagination.
 * @path /virtualAccount/admins
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Admin user list request—supports filtering, sort, pagination. */
    body: IVirtualAccountAdmin.IRequest;
  };
  export type Body = IVirtualAccountAdmin.IRequest;
  export type Response = IPageIVirtualAccountAdmin;

  export const METADATA = {
    method: "PATCH",
    path: "/virtualAccount/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/admins";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIVirtualAccountAdmin => typia.random<IPageIVirtualAccountAdmin>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get detailed information for a specific admin user (virtual_account_admins
 * table).
 *
 * Retrieves the full (non-sensitive) profile for an admin user by their ID.
 * Access to this endpoint is restricted by RBAC and API authentication
 * policies, and all requests are audit-logged.
 *
 * Response fields include username, email, all timestamps, and status
 * indicators (lockout, last login). The password hash is never exposed.
 *
 * If the admin does not exist or access is unauthorized, a proper error code is
 * returned. Associated use-cases: admin profile view, role changes, activity
 * history UI.
 *
 * Related APIs: PATCH for list/search, POST for creation, PUT/DELETE for
 * maintenance.
 *
 * @param props.id Admin user ID to look up.
 * @path /virtualAccount/admins/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Admin user ID to look up. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountAdmin;

  export const METADATA = {
    method: "GET",
    path: "/virtualAccount/admins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/admins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountAdmin => typia.random<IVirtualAccountAdmin>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update admin user profile or status information (virtual_account_admins
 * table).
 *
 * Allows updates to an existing admin user's profile fields (username, email)
 * or status fields (lockout, last_login_at) by super-admins or authorized
 * admins. All changes are tracked in audit logs and RBAC is enforced. Password
 * update may be available in a separate endpoint due to extra policy.
 *
 * Attempts to set duplicate usernames/emails are blocked. This endpoint is
 * referenced in workflows for admin privilege changes, contact updates, or
 * lockout/reactivation. On success, updated admin record is returned.
 *
 * Sensitive operations such as password reset may require additional
 * authentication.
 *
 * @param props.id Admin user ID to update.
 * @param props.body Fields for update: email, username, status fields; password
 *   change not allowed here.
 * @path /virtualAccount/admins/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Admin user ID to update. */
    id: string & tags.Format<"uuid">;

    /**
     * Fields for update: email, username, status fields; password change
     * not allowed here.
     */
    body: IVirtualAccountAdmin.IUpdate;
  };
  export type Body = IVirtualAccountAdmin.IUpdate;
  export type Response = IVirtualAccountAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/virtualAccount/admins/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/virtualAccount/admins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountAdmin => typia.random<IVirtualAccountAdmin>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Deactivate (soft-delete) an admin user (virtual_account_admins table).
 *
 * Disables or soft-deletes an admin user record, marking them inactive and
 * preventing access to the platform. The user's record remains in the database
 * for audit compliance. Only super-admin-level access may invoke this API. All
 * operations are logged.
 *
 * Request errors returned if the admin does not exist or RBAC forbids action.
 * Related dashboard interfaces: admin user management, audit logging,
 * compliance review.
 *
 * @param props.id Admin user ID to deactivate.
 * @path /virtualAccount/admins/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Admin user ID to deactivate. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountAdmin;

  export const METADATA = {
    method: "DELETE",
    path: "/virtualAccount/admins/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/admins/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountAdmin => typia.random<IVirtualAccountAdmin>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
