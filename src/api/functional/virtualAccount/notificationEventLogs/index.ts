import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IVirtualAccountNotificationEventLog } from "../../../structures/IVirtualAccountNotificationEventLog";
import { IPageIVirtualAccountNotificationEventLog } from "../../../structures/IPageIVirtualAccountNotificationEventLog";

/**
 * Create a notification event log (virtual_account_notification_event_logs).
 *
 * This API operation inserts a new event log row into the
 * 'virtual_account_notification_event_logs' table. Used for manually or
 * programmatically logging notification delivery attempts or status (such as
 * sent, failed, bounced, retried) by the admin system.
 *
 * Security: Admin or system process with notification event log permission
 * required. All logs stored atomically with required fields. Validation checks
 * for actual notification event FK and standardized status values. Results are
 * visible in log listing and detail APIs. Related: event log list, notification
 * event review.
 *
 * @param props.body Creation info of the notification event log.
 * @path /virtualAccount/notificationEventLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Creation info of the notification event log. */
    body: IVirtualAccountNotificationEventLog.ICreate;
  };
  export type Body = IVirtualAccountNotificationEventLog.ICreate;
  export type Response = IVirtualAccountNotificationEventLog;

  export const METADATA = {
    method: "POST",
    path: "/virtualAccount/notificationEventLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/notificationEventLogs";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountNotificationEventLog =>
    typia.random<IVirtualAccountNotificationEventLog>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List notification event logs (virtual_account_notification_event_logs).
 *
 * This API operation returns a paginated, filtered list of notification event
 * logs from the 'virtual_account_notification_event_logs' table. Used by
 * administrators for notification tracing, troubleshooting, audit, and
 * dashboard statistics.
 *
 * Security: Admin login required. Input validation includes paging, sorting,
 * filter (status, period, notification, etc). No notification message secrets
 * are returned, only safe log status/detail and audit information. Used with
 * event and template review workflows. Error handling for query errors and
 * permission validation is included.
 *
 * @param props.body Request params for notification event log listing,
 *   including filters/search/sort.
 * @path /virtualAccount/notificationEventLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /**
     * Request params for notification event log listing, including
     * filters/search/sort.
     */
    body: IVirtualAccountNotificationEventLog.IRequest;
  };
  export type Body = IVirtualAccountNotificationEventLog.IRequest;
  export type Response = IPageIVirtualAccountNotificationEventLog;

  export const METADATA = {
    method: "PATCH",
    path: "/virtualAccount/notificationEventLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/notificationEventLogs";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIVirtualAccountNotificationEventLog =>
    typia.random<IPageIVirtualAccountNotificationEventLog>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a notification event log by ID (virtual_account_notification_event_logs).
 *
 * This API operation retrieves a single notification event log detail,
 * identified by unique ID, from the 'virtual_account_notification_event_logs'
 * table. Shows information about delivery status, event detail, and log time
 * for auditing or investigation.
 *
 * Security: Admin access required. Validation includes UUID and record
 * existence checks. Returns error if log does not exist or if unauthorized.
 * Used with troubleshooting and enterprise logging features. Related: event log
 * listing, notification event review.
 *
 * @param props.id Target notification event log's ID.
 * @path /virtualAccount/notificationEventLogs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target notification event log's ID. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountNotificationEventLog;

  export const METADATA = {
    method: "GET",
    path: "/virtualAccount/notificationEventLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/notificationEventLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountNotificationEventLog =>
    typia.random<IVirtualAccountNotificationEventLog>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a notification event log (virtual_account_notification_event_logs).
 *
 * This API operation updates a notification event log by unique ID in
 * 'virtual_account_notification_event_logs'. Used for admin-side audit log
 * correction, annotation of delivery attempt details, or status rectification.
 *
 * Security: Admin access required. Validation includes UUID, existence, and
 * allowed status transitions. Results visible on subsequent API calls and audit
 * review. Related: listing, event creation, event review APIs.
 *
 * @param props.id Target notification event log's ID.
 * @param props.body Update information for the notification event log.
 * @path /virtualAccount/notificationEventLogs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target notification event log's ID. */
    id: string & tags.Format<"uuid">;

    /** Update information for the notification event log. */
    body: IVirtualAccountNotificationEventLog.IUpdate;
  };
  export type Body = IVirtualAccountNotificationEventLog.IUpdate;
  export type Response = IVirtualAccountNotificationEventLog;

  export const METADATA = {
    method: "PUT",
    path: "/virtualAccount/notificationEventLogs/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/virtualAccount/notificationEventLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountNotificationEventLog =>
    typia.random<IVirtualAccountNotificationEventLog>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a notification event log by ID
 * (virtual_account_notification_event_logs).
 *
 * This operation deletes a notification event log entry from the
 * virtual_account_notification_event_logs table, identified by its unique log
 * ID. This log table implements the audit and event tracking requirements for
 * notification delivery attempts (see ERD and requirements: per-attempt audit
 * and troubleshooting is critical for operations). Deleting a log is an
 * administrative action—allowed only for roles with notification log management
 * permissions.
 *
 * The operation requires the path parameter 'id', matching the log's primary
 * key. Deletion is permanent and does not cascade to the parent notification
 * event or template. If the entry does not exist, a 404 must be returned. All
 * deletion requests should be logged in the admin activity log for
 * traceability. Any unauthorized or failed attempt should return a 403 or 500
 * error as appropriate.
 *
 * The response confirms deletion. No content is returned on success (HTTP 204),
 * and all attempts are audited for compliance. Related to endpoints for GET/PUT
 * on the same resource. Soft delete is not implemented; record is physically
 * removed.
 *
 * @param props.id ID of the notification event log to delete
 * @path /virtualAccount/notificationEventLogs/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<void> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** ID of the notification event log to delete */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/virtualAccount/notificationEventLogs/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/notificationEventLogs/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
