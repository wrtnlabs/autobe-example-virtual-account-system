import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IVirtualAccountNotificationChannel } from "../../../structures/IVirtualAccountNotificationChannel";
import { IPageIVirtualAccountNotificationChannel } from "../../../structures/IPageIVirtualAccountNotificationChannel";

/**
 * Create a new notification channel (virtual_account_notification_channels).
 *
 * This API operation creates a new notification channel, inserting a row into
 * 'virtual_account_notification_channels' with configuration info
 * (channel_type, display_name, active flag, and settings). Used to expand
 * system support for new messaging channels.
 *
 * Security: Admin-only with permission to add notification channels.
 * Validation: Channel type must be unique, settings must pass
 * integration/credentials checks, channel status is set active/inactive as per
 * admin input. All changes are audit-logged. Error responses for duplicates or
 * validation failures are included.
 *
 * Related APIs: channel listing, channel update, deletion, and template
 * management.
 *
 * @param props.body Creation info of the notification channel.
 * @path /virtualAccount/notificationChannels
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  props: post.Props,
): Promise<post.Response> {
  return !!connection.simulate
    ? post.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        props.body,
      );
}
export namespace post {
  export type Props = {
    /** Creation info of the notification channel. */
    body: IVirtualAccountNotificationChannel.ICreate;
  };
  export type Body = IVirtualAccountNotificationChannel.ICreate;
  export type Response = IVirtualAccountNotificationChannel;

  export const METADATA = {
    method: "POST",
    path: "/virtualAccount/notificationChannels",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/notificationChannels";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountNotificationChannel =>
    typia.random<IVirtualAccountNotificationChannel>(g);
  export const simulate = (
    connection: IConnection,
    props: post.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List notification channels (virtual_account_notification_channels).
 *
 * This API operation lists notification channels with support for filtering (by
 * channel type, status) and search for admin dashboard/configuration. Pulls
 * from the 'virtual_account_notification_channels' table, including basic
 * channel info, display name, whether it's active, and settings.
 *
 * Security: Authenticated admin only. Validation: Accepts paging/search/filter
 * params. Does not expose credential value fields; only shows safe
 * configuration details. Used to manage/add/edit available notification
 * channels for notifications and template linkage. Error handling for access
 * and malformed query included.
 *
 * @param props.body Request params for channel listing, including
 *   filters/search/sort.
 * @path /virtualAccount/notificationChannels
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  props: patch.Props,
): Promise<patch.Response> {
  return !!connection.simulate
    ? patch.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        props.body,
      );
}
export namespace patch {
  export type Props = {
    /** Request params for channel listing, including filters/search/sort. */
    body: IVirtualAccountNotificationChannel.IRequest;
  };
  export type Body = IVirtualAccountNotificationChannel.IRequest;
  export type Response = IPageIVirtualAccountNotificationChannel;

  export const METADATA = {
    method: "PATCH",
    path: "/virtualAccount/notificationChannels",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/virtualAccount/notificationChannels";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIVirtualAccountNotificationChannel =>
    typia.random<IPageIVirtualAccountNotificationChannel>(g);
  export const simulate = (
    connection: IConnection,
    props: patch.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a notification channel by ID (virtual_account_notification_channels).
 *
 * This API operation retrieves detailed notification channel information by its
 * unique ID from the 'virtual_account_notification_channels' table. Includes
 * properties such as channel type, display name, active status, and
 * configuration details needed by admin users for notification setup and
 * diagnosis.
 *
 * Security: Admin login required. Only safe configuration details (not
 * plaintext credentials/secrets) are exposed so as not to compromise channel
 * security. Validation includes UUID format and existence. Errors are returned
 * on not-found or invalid access.
 *
 * Related: channel list, add channel, update channel.
 *
 * @param props.id Target notification channel's ID.
 * @path /virtualAccount/notificationChannels/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  props: getById.Props,
): Promise<getById.Response> {
  return !!connection.simulate
    ? getById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(props),
          status: null,
        },
      );
}
export namespace getById {
  export type Props = {
    /** Target notification channel's ID. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountNotificationChannel;

  export const METADATA = {
    method: "GET",
    path: "/virtualAccount/notificationChannels/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/notificationChannels/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountNotificationChannel =>
    typia.random<IVirtualAccountNotificationChannel>(g);
  export const simulate = (
    connection: IConnection,
    props: getById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a notification channel (virtual_account_notification_channels).
 *
 * This API operation updates an existing notification channel by unique ID,
 * modifying fields such as display name, active status, or settings_json in the
 * 'virtual_account_notification_channels' table.
 *
 * Security: Admin-only with sufficient roles/permissions to edit notification
 * infra. All changes are audit logged for compliance. Input validation for e.g.
 * new display name, updated channel settings; rejects changes that would
 * violate unique or safety requirements.
 *
 * Related APIs: channel creation, deletion, channel listing.
 *
 * @param props.id Target notification channel's ID.
 * @param props.body Update information for the notification channel.
 * @path /virtualAccount/notificationChannels/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  props: putById.Props,
): Promise<putById.Response> {
  return !!connection.simulate
    ? putById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace putById {
  export type Props = {
    /** Target notification channel's ID. */
    id: string & tags.Format<"uuid">;

    /** Update information for the notification channel. */
    body: IVirtualAccountNotificationChannel.IUpdate;
  };
  export type Body = IVirtualAccountNotificationChannel.IUpdate;
  export type Response = IVirtualAccountNotificationChannel;

  export const METADATA = {
    method: "PUT",
    path: "/virtualAccount/notificationChannels/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/virtualAccount/notificationChannels/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountNotificationChannel =>
    typia.random<IVirtualAccountNotificationChannel>(g);
  export const simulate = (
    connection: IConnection,
    props: putById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Delete a notification channel (virtual_account_notification_channels).
 *
 * This API operation deletes a notification channel identified by unique ID
 * from the 'virtual_account_notification_channels' table. Validation ensures
 * the channel is not currently referenced in pending/active notifications or
 * templates. If safe, the record is deleted (usually soft-disabled or
 * removed).
 *
 * Security: Only admins with the requisite authority may delete channels;
 * action is always audit logged. Error handling: Fails gracefully if channel in
 * use, with appropriate message. Related: listing, add, update notification
 * channel.
 *
 * @param props.id Target notification channel's ID.
 * @path /virtualAccount/notificationChannels/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  props: eraseById.Props,
): Promise<eraseById.Response> {
  return !!connection.simulate
    ? eraseById.simulate(connection, props)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(props),
          status: null,
        },
      );
}
export namespace eraseById {
  export type Props = {
    /** Target notification channel's ID. */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IVirtualAccountNotificationChannel;

  export const METADATA = {
    method: "DELETE",
    path: "/virtualAccount/notificationChannels/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/virtualAccount/notificationChannels/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IVirtualAccountNotificationChannel =>
    typia.random<IVirtualAccountNotificationChannel>(g);
  export const simulate = (
    connection: IConnection,
    props: eraseById.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
