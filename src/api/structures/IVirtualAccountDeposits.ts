import { tags } from "typia";

/**
 * 가상계좌 입금 내역 하나의 모든 속성을 포함하는 자료구조입니다.
 *
 * Prisma virtual_account_deposits 스키마에 직접 매핑, 입금내역 상세조회·로그분석·엑셀 추출 등에 활용됩니다.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IVirtualAccountDeposits = {
  /** 입금내역 고유 식별자. */
  id: string & tags.Format<"uuid">;

  /** 입금 대상 가상계좌 ID. */
  virtual_account_id: string & tags.Format<"uuid">;

  /** 입금 금액. 소수점/원단위까지 실수 가능. */
  amount: number &
    tags.JsonSchemaPlugin<{
      format: "double";
    }>;

  /** 입금자 명칭(은행 입력된 값 그대로). */
  depositor_name: string;

  /** 은행에서 실제 입금 처리된 시각. */
  deposited_at: string & tags.Format<"date-time">;

  /** 은행/PG사 측의 입금 참조번호(중복필터/추적용). */
  reference_no: string;

  /** 입금 처리 상태: 'PENDING', 'MATCHED', 'ERROR' 등. */
  status: string;

  /** 내역 레코드 등록/저장 시점. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IVirtualAccountDeposits {
  /**
   * 가상계좌 입금내역 조건별 조회/검색 요청용 구조체입니다.
   *
   * 가상계좌 PK, 기간/상태/입금자명/금액조건+페이징 등 복합 검색이 가능하도록 설계되었습니다. admin 대시보드와 연동됩니다.
   */
  export type IRequest = {
    /**
     * 필터 또는 조회를 위한 가상계좌 PK.
     *
     * Virtual_account_deposits.virtual_account_id 참조.
     */
    virtual_account_id?: string & tags.Format<"uuid">;

    /** 입금 상태값: 예시 'PENDING', 'MATCHED', 'ERROR' 등. */
    status?: string;

    /** 입금자명(검색어). */
    depositor_name?: string;

    /** 은행 참조번호(검색, 중복 처리 등). */
    reference_no?: string;

    /** 조회 최소 입금금액(검색 필터). */
    amount_min?: number &
      tags.JsonSchemaPlugin<{
        format: "double";
      }>;

    /** 조회 최대 입금금액(검색 필터). */
    amount_max?: number &
      tags.JsonSchemaPlugin<{
        format: "double";
      }>;

    /** 조회 시작일/시점(ISO8601). */
    from_date?: string & tags.Format<"date-time">;

    /** 조회 종료일/시점(ISO8601). */
    to_date?: string & tags.Format<"date-time">;

    /** 페이지 번호(페이징). */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** 페이지당 레코드 한도. */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;
  };

  /**
   * 가상계좌 입금내역 신규 생성(등록) API 요청 바디.
   *
   * 모든 레코드는 계좌, 금액, 입금자, 시각, 참조번호, 상태 등 필수값을 명확하게 전달해야 하며, 서비스 자동입금 매칭 및 오류
   * 진단의 근간 자료가 됩니다.
   */
  export type ICreate = {
    /** 입금 대상 가상계좌 고유 PK. */
    virtual_account_id: string & tags.Format<"uuid">;

    /** 입금 금액(원). */
    amount: number &
      tags.JsonSchemaPlugin<{
        format: "double";
      }>;

    /** 입금자명 입력. */
    depositor_name: string;

    /** 입금 시각(은행/PG서버기준). */
    deposited_at: string & tags.Format<"date-time">;

    /** 입금 참조번호(은행/PG). */
    reference_no: string;

    /** 입금 상태. 최초 입력 시 'PENDING' 권장, 이후 MATCHED/ERROR 등 판정. */
    status: string;
  };

  /**
   * 가상계좌 입금내역 개별 수정(API PUT) 요청 구조체.
   *
   * 필요한 항목만 일부 제공하면 부분 수정도 허용됩니다. 입금자명, 금액, 참조번호, 상태 등 업무/매칭 흐름에 따라 상황별 변경
   * 지원.
   */
  export type IUpdate = {
    /** 수정하고자 하는 입금 금액(원). */
    amount?: number &
      tags.JsonSchemaPlugin<{
        format: "double";
      }>;

    /** 수정 대상 입금자명. */
    depositor_name?: string;

    /** 수정 대상 참조번호. */
    reference_no?: string;

    /** 입금 상태 수정. */
    status?: string;

    /** 입금시각 수정. */
    deposited_at?: string & tags.Format<"date-time">;
  };

  /**
   * 입금내역 삭제 요청 결과 반환 구조입니다.
   *
   * 삭제 성공여부, PK, 사유 등이 포함될 수 있습니다.
   */
  export type IDeleteResult = {
    /** 삭제 결과 성공 여부. */
    success: boolean;

    /** 정상 삭제된 입금내역 ID. */
    deletedId: string & tags.Format<"uuid">;

    /** 삭제 결과 메시지(필요시 오류/상황설명). */
    message?: string;
  };
}
