import { tags } from "typia";

/**
 * HMAC API 키(암호화 인증서) 메타데이터 레코드 타입입니다. ERP, 쇼핑몰, PG, 은행 등 외부 시스템과의 HMAC 인증 기반
 * API 연동 시, 해당 키의 구분, 활성화/비활성화, 만료, 교체 이력 등을 관리/운영하기 위한 목적으로 사용되는 대표 엔터티입니다.
 *
 * 프리즘 스키마의 virtual_account_hmac_keys 테이블 구현을 충실하게 반영하며, 키 관점에서의 전사 보안 정책 준수, 키
 * 수명 관리, 이상행위 탐지, 역할별 접근제어, 감사로그 등 다양한 업무 흐름의 핵심 기초 데이터로 활용됩니다.
 *
 * 각 컬럼의 정의, 목적, 비즈니스 규칙은 스키마 원문(및 '보안 정책' 요구사항) 주석에 맞게 상세 기술되어, 시스템 유지보수자와 보안
 * 오피서 모두 정확하게 이해할 수 있도록 다층 설명을 추가했습니다.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IVirtualAccountHmacKeys = {
  /**
   * 이 필드는 각 HMAC 키 레코드를 고유하게 식별합니다. Prisma 스키마의 'id' 컬럼에 해당하며, 시스템 내 모든 API
   * 인증용 HMAC 키의 메타 정보 관리 및 레퍼런싱에 사용됩니다.
   *
   * 관리, 감사, 키 회전, 비활성화 등 다양한 보안 이벤트에서 반드시 레퍼런스하는 핵심 식별자입니다.
   */
  id: string & tags.Format<"uuid">;

  /**
   * 이 필드는 ERP/PG/은행/쇼핑몰 등 외부 연동 대상 시스템명을 저장합니다. (예: 'duzon', 'cafe24',
   * 'toss')
   *
   * HMAC 키 관리 및 레지스트리에서 어떤 외부 시스템의 API 연동에 사용되는지 명확하게 표시, 감사 및 키 관리 정책용으로 핵심
   * 사용됩니다.
   */
  external_system: string;

  /**
   * 키의 관리용 레이블(닉네임)입니다. 실제 비밀값/시크릿 처리 없이, 관리 UI 및 감사 추적에 사용될 수 있게끔 별도 텍스트 필드로
   * 저장합니다.
   *
   * 키 이름 혼동방지와 보안관리 편의성 목적. 동일 외부시스템 내에서도 키 구분과 갱신, 롤오버 절차에서 중요한 역할을 합니다.
   */
  key_label: string;

  /**
   * HMAC 키의 활성/비활성(폐기) 상태입니다. Prisma 스키마 'enabled' 컬럼과 1:1로 매핑되며, 보안 정책상
   * 비활성화된 API 키는 어떤 외부 연동에도 사용되지 않도록 시스템적으로 차단합니다.
   *
   * 키 플래그 변경 및 폐기, 만료 시에도 사용되어, 실시간 보안 컴플라이언스 준수에 중추적 역할을 합니다.
   */
  enabled: boolean;

  /**
   * 해당 HMAC 키 메타데이터가 최초 생성된 시각을 저장합니다. 시스템 운영/감사/보안정책상 모든 키 발급 및 라이프사이클 관리에서
   * 시점별 움직임을 추적합니다.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * 해당 HMAC 키가 마지막으로 교체(로테이션)된 시간입니다. 보안 정책 준수를 위한 키 수명 및 교체 실적 검증, 주기적 감사,
   * 만료 정책에 필수로 활용됩니다.
   */
  last_rotated_at: string & tags.Format<"date-time">;

  /**
   * 해당 키의 만료 예정일입니다. 만료 정책 적용이 필요한 경우만 입력되며, null이면 무기한 유효로 간주합니다.
   *
   * 만기 후 자동 폐기, 갱신 알림 트리거 등 보안 운용에 중요한 시점 기준으로 사용됩니다.
   */
  expires_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IVirtualAccountHmacKeys {
  /**
   * HMAC 키 메타데이터 목록을 검색/조회할 때 쓰는 요청 타입입니다. 외부시스템명, 라벨, 상태 기반 필터 및 페이징 파라미터를
   * 지원합니다.
   */
  export type IRequest = {
    /**
     * HMAC 키 적용 대상을 외부시스템명(duzon, cafe24, toss 등)으로 필터링.
     *
     * Prisma 'external_system' 컬럼.
     */
    external_system?: string;

    /**
     * HMAC 키 라벨(별칭)로 검색/조회.
     *
     * Prisma 'key_label' 컬럼 필터.
     */
    key_label?: string;

    /**
     * 활성화 여부 기준 조회.
     *
     * Prisma 'enabled' 컬럼.
     */
    enabled?: boolean;

    /** 페이지 번호 (기본값: 1) */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** 페이지당 데이터 수 (기본값: 100) */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;
  };

  /**
   * HMAC API 키 메타데이터 신규 생성 요청 타입입니다. 외부연동용 HMAC 키 신규 발급시 필수로 입력해야 하는 식별자,
   * 레이블, 상태, 만료 기한 등을 담고 있습니다.
   *
   * Prisma 스키마의 입력 요구조건 및 시스템 정책을 완비하게 반영합니다.
   */
  export type ICreate = {
    /** ERP/PG/은행/쇼핑몰 등 외부 연결의 시스템명입니다. 키가 어떤 개발/운영 시스템에 할당되어 쓰일지 명확하게 지정합니다. */
    external_system: string;

    /** 해당 키의 내부 식별, 감사, 관리 편의를 위한 사용 설명 또는 레이블입니다. 동명이 존재하지 않도록 유니크하게 관리합니다. */
    key_label: string;

    /** 생성 시 활성/비활성 여부 지정. 보안 정책상 비활성 등록 상황도 가능(테스트 키 등). */
    enabled: boolean;

    /** 옵션. 만료 예정일이 있는 경우 지정합니다. 미지정 시 무기한(Null). */
    expires_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * HMAC API 키 메타데이터 수정(패치) 요청 타입입니다. 키 레이블, 만료일, 활성/비활성, 마지막 갱신일 등 개별 컬럼에 대해
   * 선택적으로 갱신할 때 사용합니다.
   *
   * 업데이트 가능한 필드를 분명하게 구분하였고, 반드시 변경이력 추적 및 보안감사 로깅에 활용됩니다.
   *
   * Prisma 및 업무규정에 따라, 기본 식별자(id)는 path parameter로 처리하며, 본 바디에서는 불변 값을 포함하지
   * 않습니다.
   */
  export type IUpdate = {
    /** 관리자/감사 목적 또는 UI상 키명/설명 레이블을 수정할 수 있습니다. */
    key_label?: string;

    /** 활성/비활성 플래그를 변경합니다. 키를 폐기/사용정지할 때 false로 변경. */
    enabled?: boolean;

    /** 본 키의 만기일을 갱신 or Null로 해제 가능합니다. */
    expires_at?: (string & tags.Format<"date-time">) | null;

    /** 키를 갱신 또는 교체한 시각 업데이트. 정책상 자동 변경될 수 있음. */
    last_rotated_at?: string & tags.Format<"date-time">;
  };

  /**
   * HMAC 키 삭제 명령의 결과 반환 타입입니다.
   *
   * 삭제가 성공/실패 여부, 실제 삭제된(혹은 삭제 불가/참조 중) 레코드의 식별자, 추가 오류/사유 메시지 등을 제공합니다.
   */
  export type IDeleteResult = {
    /**
     * 삭제 성공 여부를 반영합니다. 만약 삭제가 정상 완료되었으면 true, 기타 오류/제약조건(참조무결성 등) 위반시
     * false.
     */
    success: boolean;

    /** 삭제된 HMAC 키 레코드의 고유 식별자(UUID). */
    deleted_id: string & tags.Format<"uuid">;

    /**
     * 삭제 결과에 대한 추가 메시지(오류, 불가사유 등). 일반적으로 삭제 완료 시는 빈 값이나, 실패/불가/오류시 상세 메시지를
     * 기술합니다.
     */
    extra_message?: string;
  };
}
